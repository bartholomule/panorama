
/*  A Bison parser, made from parser.y
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	T_BOOL	258
#define	T_REAL	259
#define	T_IDENTIFIER	260
#define	T_QUOTED_STRING	261
#define	T_AGGREGATE	262
#define	T_ATM_OBJECT	263
#define	T_BLUE	264
#define	T_BOX	265
#define	T_BSDF	266
#define	T_CAMERA	267
#define	T_CIRCLE	268
#define	T_CLASS	269
#define	T_COLOR	270
#define	T_CONE	271
#define	T_CYLINDER	272
#define	T_DEFINE	273
#define	T_DIFFERENCE	274
#define	T_EXTENDS	275
#define	T_FILTER	276
#define	T_GREEN	277
#define	T_IMAGE_FILTER	278
#define	T_INTERSECTION	279
#define	T_LIGHT	280
#define	T_MATERIAL	281
#define	T_MESH	282
#define	T_OBJECT	283
#define	T_OBJECT_FILTER	284
#define	T_OUTPUT	285
#define	T_PHONG_TRIANGLE	286
#define	T_PLANE	287
#define	T_RECTANGLE	288
#define	T_RED	289
#define	T_RENDERER	290
#define	T_ROTATE	291
#define	T_SCALE	292
#define	T_SCENE	293
#define	T_SPHERE	294
#define	T_TORUS	295
#define	T_TRANSLATE	296
#define	T_TRIANGLE	297
#define	T_TYPE	298
#define	T_UNION	299
#define	T_VERTEX	300
#define	UNARY_MINUS	301

#line 19 "parser.y"


#include <map>
#include <stack>
#include <string>
#include <iostream>
#include "llapi/llapi_all.h"
#include "hlapi/hlapi_all.h"
#include "hlapi/class_manager.h"
#include "parser_defs.h"
#include "rt_io.h"

static map<string, TBaseClass*, less<string> >        _tObjectMap;
static map<string, TColor, less<string> >             _tColorMap;
static map<string, double(*)(void), less<string> >    _tFunctionMap;
static stack<TBaseClass*>                             _tDataStack;

static TBaseClass*   _ptData;
static TBaseClass*   _ptParent;
static Byte          _bVertices;
static TVector       _tVector;
static TVector2      _tVector2;
static TColor        _tColor;
static TAggregate*   _ptWorld;
static NAttribute    _nAttrib;
static TImageIO*     _ptImageIO;

static double (*_pfFunction)(void);

#define POP()           top(); _tDataStack.pop()            // Fix to STL's pop()

#define DATA		(_tDataStack.top())
#define ENTITY		((TEntity*) _tDataStack.top())
#define VOLUME		((TVolume*) _tDataStack.top())
#define COLOR		((TColor*) _tDataStack.top())
#define SCENE		(TSceneRT::_ptParsedScene)
#define MATERIAL	((TMaterial*) _tDataStack.top())
#define OBJECT		((TObject*) _tDataStack.top())
#define AGGREGATE	((TAggregate*) _tDataStack.top())
#define TRIANGLE	((TTriangle*) _tDataStack.top())
#define RECTANGLE	((TRectangle*) _tDataStack.top())
#define MESH		((TMeshObject*) _tDataStack.top())

#define YYDEBUG 1

TBaseClass* NewObject (const string& rktCLASS, const TBaseClass* pktPARENT);
void* InstanceObject (const string& rktNAME);
void* UpdateObject (const string& rktNAME);
void DefineObject (const string& rktNAME, const string& rktCLASS, const string& rktDEF_CLASS);
void CreateObject (const string& rktCLASS, const string& rktDEF_CLASS);
void SetParameter (const string& rktATTRIB, EAttribType eTYPE);

void InitObjects (void);
void InitFunctions (void);


#line 76 "parser.y"
typedef union {
         char                  acIdent [200];
         double                dValue;
         bool                  gValue;
         TColor*               ptColor;
         TVector*              ptVector;
         TVector2*             ptVector2;
         TScene*               ptScene;
         TRenderer*            ptRenderer;
         TCamera*              ptCamera;
         TLight*               ptLight;
         TBsdf*                ptBsdf;
         TMaterial*            ptMaterial;
         TObject*              ptObject;
         TImageFilter*         ptIFilter;
         TObjectFilter*        ptOFilter;
         TAtmosphericObject*   ptAtmObject;
         TImageIO*             ptImageIO;
       } YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		473
#define	YYFLAG		-32768
#define	YYNTBASE	59

#define YYTRANSLATE(x) ((unsigned)(x) <= 301 ? yytranslate[x] : 186)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    51,
    52,    48,    46,    54,    47,     2,    49,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    56,     2,    53,
     2,    55,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    57,     2,    58,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    50
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     4,     7,    10,    13,    15,    19,    23,    27,
    31,    35,    39,    43,    47,    51,    55,    59,    63,    67,
    71,    75,    79,    83,    87,    91,    95,    99,   103,   107,
   110,   113,   116,   119,   122,   125,   128,   131,   134,   137,
   140,   143,   146,   148,   152,   156,   160,   164,   168,   171,
   175,   183,   189,   191,   194,   195,   197,   198,   202,   206,
   207,   210,   213,   216,   219,   222,   225,   228,   231,   234,
   237,   240,   243,   246,   249,   250,   253,   256,   259,   261,
   264,   266,   267,   270,   273,   276,   278,   279,   286,   288,
   289,   295,   296,   299,   302,   305,   308,   309,   314,   315,
   318,   321,   323,   324,   331,   333,   334,   340,   341,   344,
   347,   350,   353,   355,   356,   363,   365,   366,   372,   373,
   380,   382,   383,   389,   390,   397,   399,   400,   406,   407,
   414,   416,   417,   423,   424,   431,   433,   434,   440,   441,
   448,   450,   451,   457,   458,   465,   467,   468,   474,   475,
   482,   484,   485,   491,   492,   499,   501,   502,   508,   509,
   516,   518,   519,   525,   526,   533,   535,   536,   542,   543,
   546,   548,   550,   551,   558,   560,   561,   567,   568,   571,
   573,   575,   576,   583,   585,   586,   592,   593,   596,   598,
   600,   601,   608,   610,   611,   617,   618,   621,   623,   625,
   626,   633,   635,   636,   642,   643,   650,   652,   653,   659,
   660,   667,   669,   670,   676,   677,   684,   686,   687,   693,
   694,   701,   703,   704,   710,   711,   718,   720,   721,   727,
   728,   735,   737,   738,   744,   745,   748,   751
};

static const short yyrhs[] = {    -1,
    59,    60,     0,    59,    61,     0,    38,    88,     0,     8,
   162,     0,    62,     0,    18,    15,    76,     0,    18,    28,
   120,     0,    18,    38,    86,     0,    18,    12,    92,     0,
    18,    25,    96,     0,    18,    11,   100,     0,    18,    23,
   112,     0,    18,    29,   116,     0,    18,    35,   104,     0,
    18,    26,   108,     0,    18,    32,   124,     0,    18,    39,
   128,     0,    18,    42,   132,     0,    18,    31,   138,     0,
    18,    33,   144,     0,    18,    13,   150,     0,    18,     7,
   156,     0,    18,    10,   164,     0,    18,    17,   168,     0,
    18,    16,   172,     0,    18,    40,   176,     0,    18,    27,
   180,     0,    18,     8,   160,     0,    28,   122,     0,    32,
   126,     0,    39,   130,     0,    42,   134,     0,    31,   140,
     0,    33,   146,     0,    13,   152,     0,     7,   158,     0,
    10,   166,     0,    17,   170,     0,    16,   174,     0,    40,
   178,     0,    27,   182,     0,     4,     0,     5,    51,    52,
     0,    63,    46,    63,     0,    63,    47,    63,     0,    63,
    48,    63,     0,    63,    49,    63,     0,    47,    63,     0,
    51,    63,    52,     0,    53,    63,    54,    63,    54,    63,
    55,     0,    53,    63,    54,    63,    55,     0,    64,     0,
    45,    64,     0,     0,     5,     0,     0,    56,    20,     5,
     0,    56,    14,     5,     0,     0,    69,    70,     0,     5,
    64,     0,     5,    65,     0,     5,    63,     0,     5,     3,
     0,     5,     6,     0,     5,    78,     0,    15,    78,     0,
     5,    94,     0,    12,    94,     0,     5,   106,     0,    35,
   106,     0,     5,   102,     0,    11,   102,     0,     0,    71,
    72,     0,    41,    64,     0,    36,    64,     0,    70,     0,
    37,    64,     0,    72,     0,     0,    74,    75,     0,    26,
   110,     0,    21,   118,     0,    73,     0,     0,    67,    68,
    77,    57,    80,    58,     0,    67,     0,     0,    68,    79,
    57,    80,    58,     0,     0,    80,    81,     0,    34,    63,
     0,    22,    63,     0,     9,    63,     0,     0,    57,    83,
    84,    58,     0,     0,    84,    85,     0,    43,     6,     0,
    70,     0,     0,    67,    68,    87,    57,    90,    58,     0,
    67,     0,     0,    68,    89,    57,    90,    58,     0,     0,
    90,    91,     0,    25,    98,     0,    21,   114,     0,    30,
    82,     0,    70,     0,     0,    67,    68,    93,    57,    71,
    58,     0,    67,     0,     0,    68,    95,    57,    71,    58,
     0,     0,    67,    68,    97,    57,    71,    58,     0,    67,
     0,     0,    68,    99,    57,    71,    58,     0,     0,    67,
    68,   101,    57,    69,    58,     0,    67,     0,     0,    68,
   103,    57,    69,    58,     0,     0,    67,    68,   105,    57,
    69,    58,     0,    67,     0,     0,    68,   107,    57,    69,
    58,     0,     0,    67,    68,   109,    57,    69,    58,     0,
    67,     0,     0,    68,   111,    57,    69,    58,     0,     0,
    67,    68,   113,    57,    69,    58,     0,    67,     0,     0,
    68,   115,    57,    69,    58,     0,     0,    67,    68,   117,
    57,    69,    58,     0,    67,     0,     0,    68,   119,    57,
    69,    58,     0,     0,    67,    68,   121,    57,    74,    58,
     0,    67,     0,     0,    68,   123,    57,    74,    58,     0,
     0,    67,    68,   125,    57,    74,    58,     0,    67,     0,
     0,    68,   127,    57,    74,    58,     0,     0,    67,    68,
   129,    57,    74,    58,     0,    67,     0,     0,    68,   131,
    57,    74,    58,     0,     0,    67,    68,   133,    57,   136,
    58,     0,    67,     0,     0,    68,   135,    57,   136,    58,
     0,     0,   136,   137,     0,    66,     0,    75,     0,     0,
    67,    68,   139,    57,   142,    58,     0,    67,     0,     0,
    68,   141,    57,   142,    58,     0,     0,   142,   143,     0,
    66,     0,    75,     0,     0,    67,    68,   145,    57,   148,
    58,     0,    67,     0,     0,    68,   147,    57,   148,    58,
     0,     0,   148,   149,     0,    66,     0,    75,     0,     0,
    67,    68,   151,    57,    74,    58,     0,    67,     0,     0,
    68,   153,    57,    74,    58,     0,     0,   154,   155,     0,
    62,     0,    75,     0,     0,    67,    68,   157,    57,   154,
    58,     0,    67,     0,     0,    68,   159,    57,   154,    58,
     0,     0,    67,    68,   161,    57,    69,    58,     0,    67,
     0,     0,    68,   163,    57,    69,    58,     0,     0,    67,
    68,   165,    57,    74,    58,     0,    67,     0,     0,    68,
   167,    57,    74,    58,     0,     0,    67,    68,   169,    57,
    74,    58,     0,    67,     0,     0,    68,   171,    57,    74,
    58,     0,     0,    67,    68,   173,    57,    74,    58,     0,
    67,     0,     0,    68,   175,    57,    74,    58,     0,     0,
    67,    68,   177,    57,    74,    58,     0,    67,     0,     0,
    68,   179,    57,    74,    58,     0,     0,    67,    68,   181,
    57,   184,    58,     0,    67,     0,     0,    68,   183,    57,
   184,    58,     0,     0,   184,   185,     0,    42,   134,     0,
    75,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   204,   205,   206,   209,   211,   215,   221,   223,   225,   227,
   229,   231,   233,   235,   237,   239,   241,   243,   245,   247,
   249,   251,   253,   255,   257,   259,   261,   263,   265,   269,
   273,   277,   281,   285,   289,   293,   297,   301,   305,   309,
   313,   317,   323,   327,   337,   341,   345,   349,   353,   357,
   363,   370,   377,   381,   387,   391,   397,   401,   411,   418,
   419,   422,   427,   432,   437,   442,   447,   452,   457,   462,
   467,   472,   477,   482,   489,   490,   493,   497,   501,   504,
   508,   511,   512,   515,   519,   523,   526,   544,   552,   568,
   572,   578,   579,   582,   586,   590,   596,   600,   606,   607,
   610,   618,   621,   625,   631,   636,   642,   649,   650,   653,
   657,   661,   665,   668,   672,   678,   682,   686,   692,   696,
   702,   706,   710,   716,   720,   726,   730,   734,   740,   744,
   750,   754,   758,   764,   768,   774,   778,   782,   789,   793,
   799,   803,   807,   813,   817,   823,   827,   831,   837,   841,
   847,   851,   855,   861,   865,   871,   875,   879,   885,   889,
   895,   899,   903,   909,   914,   925,   929,   934,   945,   946,
   949,   954,   957,   962,   973,   977,   982,   993,   994,   997,
  1002,  1005,  1010,  1021,  1025,  1030,  1041,  1042,  1045,  1050,
  1053,  1057,  1063,  1067,  1071,  1077,  1078,  1081,  1085,  1088,
  1092,  1098,  1102,  1106,  1112,  1116,  1122,  1126,  1130,  1136,
  1140,  1146,  1150,  1154,  1160,  1164,  1170,  1174,  1178,  1184,
  1188,  1194,  1198,  1202,  1208,  1212,  1218,  1222,  1226,  1232,
  1236,  1242,  1246,  1250,  1256,  1257,  1260,  1265
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","T_BOOL",
"T_REAL","T_IDENTIFIER","T_QUOTED_STRING","T_AGGREGATE","T_ATM_OBJECT","T_BLUE",
"T_BOX","T_BSDF","T_CAMERA","T_CIRCLE","T_CLASS","T_COLOR","T_CONE","T_CYLINDER",
"T_DEFINE","T_DIFFERENCE","T_EXTENDS","T_FILTER","T_GREEN","T_IMAGE_FILTER",
"T_INTERSECTION","T_LIGHT","T_MATERIAL","T_MESH","T_OBJECT","T_OBJECT_FILTER",
"T_OUTPUT","T_PHONG_TRIANGLE","T_PLANE","T_RECTANGLE","T_RED","T_RENDERER","T_ROTATE",
"T_SCALE","T_SCENE","T_SPHERE","T_TORUS","T_TRANSLATE","T_TRIANGLE","T_TYPE",
"T_UNION","T_VERTEX","'+'","'-'","'*'","'/'","UNARY_MINUS","'('","')'","'<'",
"','","'>'","':'","'{'","'}'","everything","instance","definition","object",
"real_expr","vector3","vector2","vertex_instance","name","class","params","param",
"entity_params","entity_param","volume_param","object_params","object_param",
"color_def","@1","color_instance","@2","color_params","color_param","image_io_instance",
"@3","image_io_params","image_io_param","scene_def","@4","scene_instance","@5",
"scene_params","scene_param","camera_def","@6","camera_instance","@7","light_def",
"@8","light_instance","@9","bsdf_def","@10","bsdf_instance","@11","renderer_def",
"@12","renderer_instance","@13","material_def","@14","material_instance","@15",
"ifilter_def","@16","ifilter_instance","@17","ofilter_def","@18","ofilter_instance",
"@19","object_def","@20","object_instance","@21","plane_def","@22","plane_instance",
"@23","sphere_def","@24","sphere_instance","@25","triangle_def","@26","triangle_instance",
"@27","triangle_params","triangle_param","phong_triangle_def","@28","phong_triangle_instance",
"@29","phong_triangle_params","phong_triangle_param","rectangle_def","@30","rectangle_instance",
"@31","rectangle_params","rectangle_param","circle_def","@32","circle_instance",
"@33","aggregate_params","aggregate_param","aggregate_def","@34","aggregate_instance",
"@35","atm_object_def","@36","atm_object_instance","@37","box_def","@38","box_instance",
"@39","cylinder_def","@40","cylinder_instance","@41","cone_def","@42","cone_instance",
"@43","torus_def","@44","torus_instance","@45","mesh_def","@46","mesh_instance",
"@47","mesh_params","mesh_param", NULL
};
#endif

static const short yyr1[] = {     0,
    59,    59,    59,    60,    60,    60,    61,    61,    61,    61,
    61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
    61,    61,    61,    61,    61,    61,    61,    61,    61,    62,
    62,    62,    62,    62,    62,    62,    62,    62,    62,    62,
    62,    62,    63,    63,    63,    63,    63,    63,    63,    63,
    64,    65,    66,    66,    67,    67,    68,    68,    68,    69,
    69,    70,    70,    70,    70,    70,    70,    70,    70,    70,
    70,    70,    70,    70,    71,    71,    72,    72,    72,    73,
    73,    74,    74,    75,    75,    75,    77,    76,    78,    79,
    78,    80,    80,    81,    81,    81,    83,    82,    84,    84,
    85,    85,    87,    86,    88,    89,    88,    90,    90,    91,
    91,    91,    91,    93,    92,    94,    95,    94,    97,    96,
    98,    99,    98,   101,   100,   102,   103,   102,   105,   104,
   106,   107,   106,   109,   108,   110,   111,   110,   113,   112,
   114,   115,   114,   117,   116,   118,   119,   118,   121,   120,
   122,   123,   122,   125,   124,   126,   127,   126,   129,   128,
   130,   131,   130,   133,   132,   134,   135,   134,   136,   136,
   137,   137,   139,   138,   140,   141,   140,   142,   142,   143,
   143,   145,   144,   146,   147,   146,   148,   148,   149,   149,
   151,   150,   152,   153,   152,   154,   154,   155,   155,   157,
   156,   158,   159,   158,   161,   160,   162,   163,   162,   165,
   164,   166,   167,   166,   169,   168,   170,   171,   170,   173,
   172,   174,   175,   174,   177,   176,   178,   179,   178,   181,
   180,   182,   183,   182,   184,   184,   185,   185
};

static const short yyr2[] = {     0,
     0,     2,     2,     2,     2,     1,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     1,     3,     3,     3,     3,     3,     2,     3,
     7,     5,     1,     2,     0,     1,     0,     3,     3,     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     0,     2,     2,     2,     1,     2,
     1,     0,     2,     2,     2,     1,     0,     6,     1,     0,
     5,     0,     2,     2,     2,     2,     0,     4,     0,     2,
     2,     1,     0,     6,     1,     0,     5,     0,     2,     2,
     2,     2,     1,     0,     6,     1,     0,     5,     0,     6,
     1,     0,     5,     0,     6,     1,     0,     5,     0,     6,
     1,     0,     5,     0,     6,     1,     0,     5,     0,     6,
     1,     0,     5,     0,     6,     1,     0,     5,     0,     6,
     1,     0,     5,     0,     6,     1,     0,     5,     0,     6,
     1,     0,     5,     0,     6,     1,     0,     5,     0,     2,
     1,     1,     0,     6,     1,     0,     5,     0,     2,     1,
     1,     0,     6,     1,     0,     5,     0,     2,     1,     1,
     0,     6,     1,     0,     5,     0,     2,     1,     1,     0,
     6,     1,     0,     5,     0,     6,     1,     0,     5,     0,
     6,     1,     0,     5,     0,     6,     1,     0,     5,     0,
     6,     1,     0,     5,     0,     6,     1,     0,     5,     0,
     6,     1,     0,     5,     0,     2,     2,     1
};

static const short yydefact[] = {     1,
     0,    55,    55,    55,    55,    55,    55,     0,    55,    55,
    55,    55,    55,    55,    55,    55,    55,     2,     3,     6,
    56,     0,   202,   203,    37,   207,   208,     5,   212,   213,
    38,   193,   194,    36,   222,   223,    40,   217,   218,    39,
    55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
    55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
    55,    55,    55,   232,   233,    42,   151,   152,    30,   175,
   176,    34,   156,   157,    31,   184,   185,    35,   105,   106,
     4,   161,   162,    32,   227,   228,    41,   166,   167,    33,
     0,     0,     0,     0,     0,     0,     0,     0,    57,    23,
    57,    29,    57,    24,    57,    12,    57,    10,    57,    22,
    57,     7,    57,    26,    57,    25,    57,    13,    57,    11,
    57,    16,    57,    28,    57,     8,    57,    14,    57,    20,
    57,    17,    57,    21,    57,    15,    57,     9,    57,    18,
    57,    27,    57,    19,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    59,    58,   196,    60,    82,    82,    82,
    82,   200,   205,   210,   124,   114,   191,    87,   220,   215,
   139,   119,   134,   230,   149,   144,   173,   154,   182,   129,
   103,   159,   225,   164,   235,    82,   178,    82,   187,   108,
    82,    82,   169,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    55,    55,    55,    55,    55,    55,    55,     0,     0,
     0,   204,   198,    79,    81,    86,   199,   197,   209,    61,
   214,    83,   195,   224,   219,   196,    60,    82,    60,    75,
    82,    92,    82,    82,    60,    75,    60,   235,    82,    60,
   178,    82,   187,    60,   108,    82,    82,   169,    55,   234,
   238,   236,   153,     0,     0,   177,    53,   180,   181,   179,
   158,   186,   189,   190,   188,    55,    55,     0,   107,   113,
   109,   163,   229,   168,   171,   172,   170,    65,    43,    56,
    66,     0,     0,     0,    64,    62,    63,    89,    90,    67,
    69,    73,    71,   126,   127,    74,   116,   117,    70,    89,
    90,    68,   146,   147,    85,   136,   137,    84,   131,   132,
    72,    78,    80,    77,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   237,    54,     0,
     0,   141,   142,   111,   121,   122,   110,    97,   112,     0,
    49,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   201,   206,   211,   125,   115,    76,   192,
     0,     0,     0,    88,    93,   221,   216,   140,   120,   135,
   231,   150,   145,   174,   155,   183,   130,   104,   160,   226,
   165,     0,     0,     0,    99,    44,    50,     0,    45,    46,
    47,    48,    92,    75,    60,    60,    60,    60,    96,    95,
    94,     0,    60,    75,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    98,   102,   100,    52,
    91,   118,   128,   133,   148,   138,     0,   143,   123,   101,
    51,     0,     0
};

static const short yydefgoto[] = {     1,
    18,    19,   243,   315,   287,   317,   288,    88,    89,   195,
   244,   349,   245,   246,   196,   252,   112,   206,   320,   388,
   351,   405,   379,   425,   445,   459,   138,   219,    81,   150,
   228,   301,   108,   204,   321,   389,   120,   210,   377,   424,
   106,   203,   322,   390,   136,   218,   323,   391,   122,   211,
   338,   393,   118,   209,   374,   423,   128,   214,   335,   392,
   126,   213,    69,   146,   132,   216,    75,   148,   140,   220,
    84,   151,   144,   222,    90,   153,   231,   307,   130,   215,
    72,   147,   225,   290,   134,   217,    78,   149,   227,   295,
   110,   205,    34,    96,   194,   248,   100,   200,    25,    93,
   102,   201,    28,    94,   104,   202,    31,    95,   116,   208,
    40,    98,   114,   207,    37,    97,   142,   221,    87,   152,
   124,   212,    66,   145,   223,   282
};

static const short yypact[] = {-32768,
  1058,    29,    29,    29,    29,    29,    29,  1094,    29,    29,
    29,    29,    29,    29,    29,    29,    29,-32768,-32768,-32768,
-32768,    17,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    16,    16,    16,    16,    16,    16,    16,    16,    16,    16,
    16,    16,    16,    16,    16,    16,    16,    16,    16,    16,
    16,    16,    16,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    28,    30,   -19,     5,     8,     9,    15,    18,    14,-32768,
    14,-32768,    14,-32768,    14,-32768,    14,-32768,    14,-32768,
    14,-32768,    14,-32768,    14,-32768,    14,-32768,    14,-32768,
    14,-32768,    14,-32768,    14,-32768,    14,-32768,    14,-32768,
    14,-32768,    14,-32768,    14,-32768,    14,-32768,    14,-32768,
    14,-32768,    14,-32768,    26,    31,    33,    35,    42,    43,
    44,    47,    48,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   286,   537,   588,   615,   627,   654,    54,
    58,    62,    64,    68,    70,    72,    74,    76,    84,    90,
    96,   101,   102,   118,   123,   131,   135,   136,   138,   148,
   150,   151,   548,   666,   380,   693,   408,   397,   705,   732,
   436,   104,    29,    29,    29,    29,    29,    29,   158,   158,
   158,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    29,-32768,
-32768,-32768,-32768,   158,    98,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    29,    29,   160,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   168,
-32768,    98,    98,    98,   116,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   347,   932,   744,   949,   185,   771,
    55,   783,   810,   954,   900,   965,   576,   822,   967,   464,
   849,   492,   976,   453,   861,   888,   520,-32768,-32768,   168,
   229,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   166,
-32768,   130,   284,    98,    98,    98,    98,   170,   171,   172,
   184,   187,   199,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    98,    98,    98,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,    98,   201,   202,-32768,-32768,-32768,    98,    46,    46,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   116,   116,
   116,   323,-32768,-32768,   481,   155,    59,   915,   981,   993,
   998,  1009,    98,  1025,   927,   217,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   167,-32768,-32768,-32768,
-32768,   224,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,   241,  -216,  -161,-32768,  -195,    -2,    13,  -183,
  -165,  -260,  -282,-32768,    79,   -88,-32768,-32768,   -10,-32768,
  -172,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   -13,-32768,-32768,-32768,    32,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    40,-32768,-32768,-32768,    25,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   -15,-32768,     3,-32768,-32768,-32768,
-32768,-32768,    -3,-32768,-32768,-32768,-32768,-32768,    19,-32768,
-32768,-32768,-32768,-32768,    34,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    20,-32768
};


#define	YYLAST		1136


static const short yytable[] = {    23,
    26,    29,    32,    35,    38,   355,    64,    67,    70,    73,
    76,    79,    82,    85,    24,    27,    30,    33,    36,    39,
    21,    65,    68,    71,    74,    77,    80,    83,    86,   250,
    91,   293,   154,    21,   155,   305,    92,   156,    99,   101,
   103,   105,   107,   109,   111,   113,   115,   117,   119,   121,
   123,   125,   127,   129,   131,   133,   135,   137,   139,   141,
   143,   157,   300,   401,   158,   159,   399,   401,   371,    22,
   316,   160,   399,   346,   161,   348,   402,   342,   343,   344,
   402,   354,   185,   356,    22,   -57,   359,   186,   403,   187,
   363,   188,   403,   386,   387,   381,   382,   383,   189,   190,
   191,   309,   370,   192,   193,   247,   308,   309,   310,   311,
   256,   162,   404,   163,   257,   164,   461,   165,   258,   166,
   259,   167,   369,   168,   260,   169,   261,   170,   262,   171,
   263,   172,   264,   173,   281,   174,   289,   175,   294,   176,
   265,   177,   306,   178,   312,   179,   266,   180,   313,   181,
   312,   182,   267,   183,   313,   184,   314,   268,   269,    22,
   -57,   384,   385,   386,   387,   399,   293,   429,   430,   431,
   432,   305,   399,   448,   270,   384,   385,   386,   387,   271,
   250,   427,   250,   455,   439,   440,   441,   272,   250,   232,
   250,   273,   274,   250,   275,   233,   234,   250,   300,   235,
   384,   385,   386,   387,   276,   442,   277,   278,   453,   460,
   285,   446,   384,   385,   386,   387,   378,   426,   380,   238,
   239,   471,   470,   473,   332,   241,   433,   434,   435,   318,
   324,   327,   330,   333,   336,   339,   467,   197,   198,   199,
   436,    20,   398,   437,   319,   325,   328,   331,   334,   337,
   340,   449,   450,   451,   452,   438,   247,   443,   444,   454,
   447,   364,   341,   368,   224,   329,   226,   360,   281,   229,
   230,   289,   326,   294,   384,   385,   386,   387,   306,   458,
   367,     0,   422,   250,   250,   250,   250,   357,   250,   345,
   232,   362,     2,   372,   375,     4,   233,   234,     5,     0,
   235,     6,     7,     0,     0,     0,   236,     0,   373,   376,
     0,   237,     9,    10,     0,     0,    11,    12,    13,     0,
   238,   239,   240,     0,    15,    16,   241,    17,     0,   384,
   385,   386,   387,     0,     0,     0,   347,   428,     0,   350,
     0,   352,   353,   242,     0,     0,     0,   358,     0,     0,
   361,   232,     0,     2,   365,   366,     4,   233,   234,     5,
     0,   235,     6,     7,     0,     0,     0,   236,   384,   385,
   386,   387,   237,     9,    10,     0,   453,    11,    12,    13,
     0,   238,   239,   240,   232,    15,    16,   241,    17,     0,
   233,   234,     0,     0,   235,     0,     0,     0,     0,     0,
   236,   232,     0,     0,   394,   237,     0,   233,   234,     0,
     0,   235,   232,     0,   238,   239,   240,   296,   233,   234,
   241,   297,   235,     0,   284,     0,   298,     0,   236,     0,
     0,   238,   285,   237,     0,     0,     0,   286,     0,     0,
   232,     0,   238,   239,   240,     0,   233,   234,   241,     0,
   235,     0,   284,     0,   299,     0,   236,   232,     0,     0,
   285,   237,     0,   233,   234,   292,     0,   235,   232,     0,
   238,   239,   240,   296,   233,   234,   241,   297,   235,     0,
   284,     0,   298,     0,   236,   232,     0,   238,   285,   237,
     0,   233,   234,   304,     0,   235,   232,     0,   238,   239,
   240,     0,   233,   234,   241,     0,   235,     0,   284,     0,
   418,     0,   236,     0,     0,   238,   285,   237,     0,     0,
     0,   414,     0,   456,   232,     0,   238,   239,   240,     0,
   233,   234,   241,     0,   235,     0,   284,     0,   457,     0,
   236,   232,     0,     0,   285,   237,     0,   233,   234,   416,
     0,   235,   232,     0,   238,   239,   240,     0,   233,   234,
   241,     0,   235,     0,   284,     0,     0,     0,   236,     0,
     0,   238,   285,   237,     0,     0,     0,   421,     0,     0,
   232,     0,   238,   239,   240,     0,   233,   234,   241,   279,
   235,     0,   232,     0,   249,     0,   236,     0,   233,   234,
     0,   237,   235,     0,     0,   280,     0,     0,   236,     0,
   238,   239,   240,   237,     0,     0,   241,   279,     0,   232,
     0,     0,   238,   239,   240,   233,   234,     0,   241,   235,
     0,   232,     0,   411,     0,   236,     0,   233,   234,     0,
   237,   235,     0,     0,     0,   251,     0,   236,     0,   238,
   239,   240,   237,     0,     0,   241,     0,     0,   232,     0,
     0,   238,   239,   240,   233,   234,     0,   241,   235,     0,
   232,     0,   253,     0,   236,     0,   233,   234,     0,   237,
   235,     0,     0,     0,   254,     0,   236,     0,   238,   239,
   240,   237,     0,     0,   241,     0,     0,   232,     0,     0,
   238,   239,   240,   233,   234,     0,   241,   235,     0,   232,
     0,   255,     0,   236,     0,   233,   234,     0,   237,   235,
     0,     0,     0,   283,     0,   236,     0,   238,   239,   240,
   237,     0,     0,   241,     0,     0,   232,     0,     0,   238,
   239,   240,   233,   234,     0,   241,   235,     0,   232,     0,
   291,     0,   236,     0,   233,   234,     0,   237,   235,     0,
     0,     0,   302,     0,   236,     0,   238,   239,   240,   237,
     0,     0,   241,     0,     0,   232,     0,     0,   238,   239,
   240,   233,   234,     0,   241,   235,     0,   232,     0,   303,
     0,   236,     0,   233,   234,     0,   237,   235,     0,     0,
     0,   396,     0,   236,     0,   238,   239,   240,   237,     0,
     0,   241,     0,     0,   232,     0,     0,   238,   239,   240,
   233,   234,     0,   241,   235,     0,   232,     0,   400,     0,
   236,     0,   233,   234,     0,   237,   235,     0,     0,     0,
   406,     0,   236,     0,   238,   239,   240,   237,     0,     0,
   241,     0,     0,   232,     0,     0,   238,   239,   240,   233,
   234,     0,   241,   235,     0,   232,     0,   407,     0,   236,
     0,   233,   234,     0,   237,   235,     0,     0,     0,   412,
     0,   236,     0,   238,   239,   240,   237,     0,     0,   241,
     0,     0,   232,     0,     0,   238,   239,   240,   233,   234,
     0,   241,   235,     0,   232,     0,   415,     0,   236,     0,
   233,   234,     0,   237,   235,     0,     0,     0,   419,   232,
     0,     0,   238,   239,   240,   233,   234,     0,   241,   235,
     0,   232,     0,     0,   238,   239,   232,   233,   234,     0,
   241,   235,   233,   234,     0,   420,   235,     0,     0,   238,
   239,     0,     0,   232,     0,   241,     0,   409,   232,   233,
   234,   238,   239,   235,   233,   234,   238,   241,   235,   232,
     0,   232,   462,     0,     0,   233,   234,   233,   234,   235,
   232,   235,     0,   238,   469,   232,   233,   234,   238,   395,
   235,   233,   234,     0,     0,   235,     0,   232,     0,   238,
     0,   238,   232,   233,   234,     0,   397,   235,   233,   234,
   238,   408,   235,   232,     0,   238,     0,     0,     0,   233,
   234,     0,   410,   235,   413,     0,     0,   238,     0,   232,
     0,     0,   238,   417,     0,   233,   234,     0,   463,   235,
     0,     0,     0,   238,     0,     0,     0,     0,     0,     0,
   464,     0,     0,     0,     0,   465,     0,   472,     0,   238,
     0,     0,     0,     0,     2,     3,   466,     4,     0,     0,
     5,     0,     0,     6,     7,     8,     0,     0,     0,     0,
     0,     0,   468,     0,     9,    10,     0,     0,    11,    12,
    13,     0,     0,     0,     0,    14,    15,    16,     0,    17,
    41,    42,     0,    43,    44,    45,    46,     0,    47,    48,
    49,     0,     0,     0,     0,     0,    50,     0,    51,    52,
    53,    54,    55,     0,    56,    57,    58,     0,    59,     0,
     0,    60,    61,    62,     0,    63
};

static const short yycheck[] = {     2,
     3,     4,     5,     6,     7,   266,     9,    10,    11,    12,
    13,    14,    15,    16,     2,     3,     4,     5,     6,     7,
     5,     9,    10,    11,    12,    13,    14,    15,    16,   195,
    14,   227,     5,     5,     5,   231,    20,    57,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    57,   228,     9,    57,    57,   349,     9,   285,    56,
   232,    57,   355,   257,    57,   259,    22,   239,   240,   241,
    22,   265,    57,   267,    56,    57,   270,    57,    34,    57,
   274,    57,    34,    48,    49,   312,   313,   314,    57,    57,
    57,     4,     5,    57,    57,   194,     3,     4,     5,     6,
    57,    99,    58,   101,    57,   103,    58,   105,    57,   107,
    57,   109,   284,   111,    57,   113,    57,   115,    57,   117,
    57,   119,    57,   121,   223,   123,   225,   125,   227,   127,
    57,   129,   231,   131,    47,   133,    57,   135,    51,   137,
    47,   139,    57,   141,    51,   143,    53,    57,    57,    56,
    57,    46,    47,    48,    49,   448,   362,   384,   385,   386,
   387,   367,   455,   434,    57,    46,    47,    48,    49,    57,
   346,    52,   348,   444,   401,   402,   403,    57,   354,     5,
   356,    57,    57,   359,    57,    11,    12,   363,   364,    15,
    46,    47,    48,    49,    57,   422,    57,    57,    54,    55,
    53,   428,    46,    47,    48,    49,    57,    52,    51,    35,
    36,    55,     6,     0,   235,    41,    57,    57,    57,   232,
   233,   234,   235,   236,   237,   238,   453,   159,   160,   161,
    57,     1,    58,    57,   232,   233,   234,   235,   236,   237,
   238,   435,   436,   437,   438,    57,   345,    57,    57,   443,
   433,   275,   238,   279,   186,   234,   188,   271,   357,   191,
   192,   360,   233,   362,    46,    47,    48,    49,   367,   445,
   278,    -1,    54,   449,   450,   451,   452,   268,   454,   256,
     5,   273,     7,   296,   297,    10,    11,    12,    13,    -1,
    15,    16,    17,    -1,    -1,    -1,    21,    -1,   296,   297,
    -1,    26,    27,    28,    -1,    -1,    31,    32,    33,    -1,
    35,    36,    37,    -1,    39,    40,    41,    42,    -1,    46,
    47,    48,    49,    -1,    -1,    -1,   258,    54,    -1,   261,
    -1,   263,   264,    58,    -1,    -1,    -1,   269,    -1,    -1,
   272,     5,    -1,     7,   276,   277,    10,    11,    12,    13,
    -1,    15,    16,    17,    -1,    -1,    -1,    21,    46,    47,
    48,    49,    26,    27,    28,    -1,    54,    31,    32,    33,
    -1,    35,    36,    37,     5,    39,    40,    41,    42,    -1,
    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    -1,    -1,
    21,     5,    -1,    -1,    58,    26,    -1,    11,    12,    -1,
    -1,    15,     5,    -1,    35,    36,    37,    21,    11,    12,
    41,    25,    15,    -1,    45,    -1,    30,    -1,    21,    -1,
    -1,    35,    53,    26,    -1,    -1,    -1,    58,    -1,    -1,
     5,    -1,    35,    36,    37,    -1,    11,    12,    41,    -1,
    15,    -1,    45,    -1,    58,    -1,    21,     5,    -1,    -1,
    53,    26,    -1,    11,    12,    58,    -1,    15,     5,    -1,
    35,    36,    37,    21,    11,    12,    41,    25,    15,    -1,
    45,    -1,    30,    -1,    21,     5,    -1,    35,    53,    26,
    -1,    11,    12,    58,    -1,    15,     5,    -1,    35,    36,
    37,    -1,    11,    12,    41,    -1,    15,    -1,    45,    -1,
    58,    -1,    21,    -1,    -1,    35,    53,    26,    -1,    -1,
    -1,    58,    -1,    43,     5,    -1,    35,    36,    37,    -1,
    11,    12,    41,    -1,    15,    -1,    45,    -1,    58,    -1,
    21,     5,    -1,    -1,    53,    26,    -1,    11,    12,    58,
    -1,    15,     5,    -1,    35,    36,    37,    -1,    11,    12,
    41,    -1,    15,    -1,    45,    -1,    -1,    -1,    21,    -1,
    -1,    35,    53,    26,    -1,    -1,    -1,    58,    -1,    -1,
     5,    -1,    35,    36,    37,    -1,    11,    12,    41,    42,
    15,    -1,     5,    -1,    58,    -1,    21,    -1,    11,    12,
    -1,    26,    15,    -1,    -1,    58,    -1,    -1,    21,    -1,
    35,    36,    37,    26,    -1,    -1,    41,    42,    -1,     5,
    -1,    -1,    35,    36,    37,    11,    12,    -1,    41,    15,
    -1,     5,    -1,    58,    -1,    21,    -1,    11,    12,    -1,
    26,    15,    -1,    -1,    -1,    58,    -1,    21,    -1,    35,
    36,    37,    26,    -1,    -1,    41,    -1,    -1,     5,    -1,
    -1,    35,    36,    37,    11,    12,    -1,    41,    15,    -1,
     5,    -1,    58,    -1,    21,    -1,    11,    12,    -1,    26,
    15,    -1,    -1,    -1,    58,    -1,    21,    -1,    35,    36,
    37,    26,    -1,    -1,    41,    -1,    -1,     5,    -1,    -1,
    35,    36,    37,    11,    12,    -1,    41,    15,    -1,     5,
    -1,    58,    -1,    21,    -1,    11,    12,    -1,    26,    15,
    -1,    -1,    -1,    58,    -1,    21,    -1,    35,    36,    37,
    26,    -1,    -1,    41,    -1,    -1,     5,    -1,    -1,    35,
    36,    37,    11,    12,    -1,    41,    15,    -1,     5,    -1,
    58,    -1,    21,    -1,    11,    12,    -1,    26,    15,    -1,
    -1,    -1,    58,    -1,    21,    -1,    35,    36,    37,    26,
    -1,    -1,    41,    -1,    -1,     5,    -1,    -1,    35,    36,
    37,    11,    12,    -1,    41,    15,    -1,     5,    -1,    58,
    -1,    21,    -1,    11,    12,    -1,    26,    15,    -1,    -1,
    -1,    58,    -1,    21,    -1,    35,    36,    37,    26,    -1,
    -1,    41,    -1,    -1,     5,    -1,    -1,    35,    36,    37,
    11,    12,    -1,    41,    15,    -1,     5,    -1,    58,    -1,
    21,    -1,    11,    12,    -1,    26,    15,    -1,    -1,    -1,
    58,    -1,    21,    -1,    35,    36,    37,    26,    -1,    -1,
    41,    -1,    -1,     5,    -1,    -1,    35,    36,    37,    11,
    12,    -1,    41,    15,    -1,     5,    -1,    58,    -1,    21,
    -1,    11,    12,    -1,    26,    15,    -1,    -1,    -1,    58,
    -1,    21,    -1,    35,    36,    37,    26,    -1,    -1,    41,
    -1,    -1,     5,    -1,    -1,    35,    36,    37,    11,    12,
    -1,    41,    15,    -1,     5,    -1,    58,    -1,    21,    -1,
    11,    12,    -1,    26,    15,    -1,    -1,    -1,    58,     5,
    -1,    -1,    35,    36,    37,    11,    12,    -1,    41,    15,
    -1,     5,    -1,    -1,    35,    36,     5,    11,    12,    -1,
    41,    15,    11,    12,    -1,    58,    15,    -1,    -1,    35,
    36,    -1,    -1,     5,    -1,    41,    -1,    58,     5,    11,
    12,    35,    36,    15,    11,    12,    35,    41,    15,     5,
    -1,     5,    58,    -1,    -1,    11,    12,    11,    12,    15,
     5,    15,    -1,    35,    58,     5,    11,    12,    35,    58,
    15,    11,    12,    -1,    -1,    15,    -1,     5,    -1,    35,
    -1,    35,     5,    11,    12,    -1,    58,    15,    11,    12,
    35,    58,    15,     5,    -1,    35,    -1,    -1,    -1,    11,
    12,    -1,    58,    15,    58,    -1,    -1,    35,    -1,     5,
    -1,    -1,    35,    58,    -1,    11,    12,    -1,    58,    15,
    -1,    -1,    -1,    35,    -1,    -1,    -1,    -1,    -1,    -1,
    58,    -1,    -1,    -1,    -1,    58,    -1,     0,    -1,    35,
    -1,    -1,    -1,    -1,     7,     8,    58,    10,    -1,    -1,
    13,    -1,    -1,    16,    17,    18,    -1,    -1,    -1,    -1,
    -1,    -1,    58,    -1,    27,    28,    -1,    -1,    31,    32,
    33,    -1,    -1,    -1,    -1,    38,    39,    40,    -1,    42,
     7,     8,    -1,    10,    11,    12,    13,    -1,    15,    16,
    17,    -1,    -1,    -1,    -1,    -1,    23,    -1,    25,    26,
    27,    28,    29,    -1,    31,    32,    33,    -1,    35,    -1,
    -1,    38,    39,    40,    -1,    42
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 210 "parser.y"
{;
    break;}
case 5:
#line 212 "parser.y"
{
                            SCENE->atmosphere()->addObject (yyvsp[0].ptAtmObject);
                          ;
    break;}
case 6:
#line 216 "parser.y"
{
                            _ptWorld->add (yyvsp[0].ptObject);
                          ;
    break;}
case 7:
#line 222 "parser.y"
{;
    break;}
case 8:
#line 224 "parser.y"
{;
    break;}
case 9:
#line 226 "parser.y"
{;
    break;}
case 10:
#line 228 "parser.y"
{;
    break;}
case 11:
#line 230 "parser.y"
{;
    break;}
case 12:
#line 232 "parser.y"
{;
    break;}
case 13:
#line 234 "parser.y"
{;
    break;}
case 14:
#line 236 "parser.y"
{;
    break;}
case 15:
#line 238 "parser.y"
{;
    break;}
case 16:
#line 240 "parser.y"
{;
    break;}
case 17:
#line 242 "parser.y"
{;
    break;}
case 18:
#line 244 "parser.y"
{;
    break;}
case 19:
#line 246 "parser.y"
{;
    break;}
case 20:
#line 248 "parser.y"
{;
    break;}
case 21:
#line 250 "parser.y"
{;
    break;}
case 22:
#line 252 "parser.y"
{;
    break;}
case 23:
#line 254 "parser.y"
{;
    break;}
case 24:
#line 256 "parser.y"
{;
    break;}
case 25:
#line 258 "parser.y"
{;
    break;}
case 26:
#line 260 "parser.y"
{;
    break;}
case 27:
#line 262 "parser.y"
{;
    break;}
case 28:
#line 264 "parser.y"
{;
    break;}
case 29:
#line 266 "parser.y"
{;
    break;}
case 30:
#line 270 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 31:
#line 274 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 32:
#line 278 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
			  ;
    break;}
case 33:
#line 282 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 34:
#line 286 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 35:
#line 290 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 36:
#line 294 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 37:
#line 298 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 38:
#line 302 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 39:
#line 306 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 40:
#line 310 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 41:
#line 314 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 42:
#line 318 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 43:
#line 324 "parser.y"
{
			    yyval.dValue = yyvsp[0].dValue;
			  ;
    break;}
case 44:
#line 328 "parser.y"
{
                            if ( _tFunctionMap.find (yyvsp[-2].acIdent) == _tFunctionMap.end() )
                            {
			      yyerror ("function does not exist");
			      exit (1);
                            }
			    _pfFunction = _tFunctionMap [yyvsp[-2].acIdent];
			    yyval.dValue = (*_pfFunction)();
			  ;
    break;}
case 45:
#line 338 "parser.y"
{
			    yyval.dValue = yyvsp[-2].dValue + yyvsp[0].dValue;
			  ;
    break;}
case 46:
#line 342 "parser.y"
{
			    yyval.dValue = yyvsp[-2].dValue - yyvsp[0].dValue;
			  ;
    break;}
case 47:
#line 346 "parser.y"
{
			    yyval.dValue = yyvsp[-2].dValue * yyvsp[0].dValue;
			  ;
    break;}
case 48:
#line 350 "parser.y"
{
			    yyval.dValue = yyvsp[-2].dValue / yyvsp[0].dValue;
			  ;
    break;}
case 49:
#line 354 "parser.y"
{
			    yyval.dValue = -yyvsp[0].dValue;
			  ;
    break;}
case 50:
#line 358 "parser.y"
{
			    yyval.dValue = yyvsp[-1].dValue;
			  ;
    break;}
case 51:
#line 364 "parser.y"
{
			    _tVector.set (yyvsp[-5].dValue, yyvsp[-3].dValue, yyvsp[-1].dValue);
			    yyval.ptVector = &_tVector;
			  ;
    break;}
case 52:
#line 371 "parser.y"
{
			    _tVector2.set (yyvsp[-3].dValue, yyvsp[-1].dValue);
			    yyval.ptVector2 = &_tVector2;
			  ;
    break;}
case 53:
#line 378 "parser.y"
{
			    yyval.ptVector = yyvsp[0].ptVector;
			  ;
    break;}
case 54:
#line 382 "parser.y"
{
			    yyval.ptVector = yyvsp[0].ptVector;
			  ;
    break;}
case 55:
#line 388 "parser.y"
{
			    strcpy (yyval.acIdent, "");
			  ;
    break;}
case 56:
#line 392 "parser.y"
{
			    strcpy (yyval.acIdent, yyvsp[0].acIdent);
			  ;
    break;}
case 57:
#line 398 "parser.y"
{
			    strcpy (yyval.acIdent, "");
			  ;
    break;}
case 58:
#line 402 "parser.y"
{
                            if ( _tObjectMap.find (yyvsp[0].acIdent) == _tObjectMap.end() )
                            {
			      yyerror ("trying to extend from non existing object");
			      exit (1);
                            }
                            _ptParent = _tObjectMap [yyvsp[0].acIdent];
			    strcpy (yyval.acIdent, _ptParent->className().c_str());
			  ;
    break;}
case 59:
#line 412 "parser.y"
{
			    _ptParent = NULL;
			    strcpy (yyval.acIdent, yyvsp[0].acIdent);
			  ;
    break;}
case 62:
#line 423 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptVector;
			    SetParameter (yyvsp[-1].acIdent, FX_VECTOR);
			  ;
    break;}
case 63:
#line 428 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptVector2;
			    SetParameter (yyvsp[-1].acIdent, FX_VECTOR2);
			  ;
    break;}
case 64:
#line 433 "parser.y"
{
			    _nAttrib.dValue = yyvsp[0].dValue;
			    SetParameter (yyvsp[-1].acIdent, FX_REAL);
			  ;
    break;}
case 65:
#line 438 "parser.y"
{
			    _nAttrib.gValue = yyvsp[0].gValue;
			    SetParameter (yyvsp[-1].acIdent, FX_BOOL);
			  ;
    break;}
case 66:
#line 443 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].acIdent;
			    SetParameter (yyvsp[-1].acIdent, FX_STRING);
			  ;
    break;}
case 67:
#line 448 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptColor;
			    SetParameter (yyvsp[-1].acIdent, FX_COLOR);
			  ;
    break;}
case 68:
#line 453 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptColor;
			    SetParameter ("color", FX_COLOR);
			  ;
    break;}
case 69:
#line 458 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptCamera;
			    SetParameter (yyvsp[-1].acIdent, FX_CAMERA);
			  ;
    break;}
case 70:
#line 463 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptCamera;
			    SetParameter ("camera", FX_CAMERA);
			  ;
    break;}
case 71:
#line 468 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptRenderer;
			    SetParameter (yyvsp[-1].acIdent, FX_RENDERER);
			  ;
    break;}
case 72:
#line 473 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptRenderer;
			    SetParameter ("renderer", FX_RENDERER);
			  ;
    break;}
case 73:
#line 478 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptBsdf;
			    SetParameter (yyvsp[-1].acIdent, FX_BSDF);
			  ;
    break;}
case 74:
#line 483 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptBsdf;
			    SetParameter ("bsdf", FX_BSDF);
			  ;
    break;}
case 77:
#line 494 "parser.y"
{
			    ENTITY->translate (*yyvsp[0].ptVector);
			  ;
    break;}
case 78:
#line 498 "parser.y"
{
			    ENTITY->rotate (*yyvsp[0].ptVector);
			  ;
    break;}
case 80:
#line 505 "parser.y"
{
			    VOLUME->scale (*yyvsp[0].ptVector, TVector (0, 0, 0));
			  ;
    break;}
case 84:
#line 516 "parser.y"
{
			    OBJECT->setMaterial (yyvsp[0].ptMaterial);
			  ;
    break;}
case 85:
#line 520 "parser.y"
{
			    OBJECT->addFilter (yyvsp[0].ptOFilter);
			  ;
    break;}
case 87:
#line 527 "parser.y"
{
                            if ( yyvsp[-1].acIdent == "" )
                            {
                              yyerror ("cannot define unnamed color");
                              exit (1);
                            }

                            if ( _tColorMap.find (yyvsp[-1].acIdent) != _tColorMap.end() )
                            {
                              yyerror ("cannot redefine an existing color");
                              exit (1);
                            }

                            _tColor = TColor::_black();

                            _ptParent = NULL;
			  ;
    break;}
case 88:
#line 545 "parser.y"
{
                            _tColorMap [yyvsp[-5].acIdent] = _tColor;
                            
                            yyval.ptColor = &_tColor;
			  ;
    break;}
case 89:
#line 553 "parser.y"
{
                            if ( yyvsp[0].acIdent == "" )
                            {
                              yyerror ("instanced object cannot be unnamed");
                              exit (1);
                            }

                            if ( _tColorMap.find (yyvsp[0].acIdent) == _tObjectMap.end() )
                            {
                              yyerror ("color does not exist");
                              exit (1);
                            }

                            yyval.ptColor = (TColor*) &(_tColorMap [yyvsp[0].acIdent]);
			  ;
    break;}
case 90:
#line 569 "parser.y"
{
                            _tColor = TColor::_black();
			  ;
    break;}
case 91:
#line 573 "parser.y"
{
			    yyval.ptColor = (TColor*) &_tColor;
			  ;
    break;}
case 94:
#line 583 "parser.y"
{
			    _tColor.setRed (yyvsp[0].dValue);
			  ;
    break;}
case 95:
#line 587 "parser.y"
{
			    _tColor.setGreen (yyvsp[0].dValue);
			  ;
    break;}
case 96:
#line 591 "parser.y"
{
			    _tColor.setBlue (yyvsp[0].dValue);
			  ;
    break;}
case 97:
#line 597 "parser.y"
{
                            _tDataStack.push (TImageManager::_getImageIO ("tga"));
                          ;
    break;}
case 98:
#line 601 "parser.y"
{
			    yyval.ptImageIO = (TImageIO*) _tDataStack.POP();
			  ;
    break;}
case 101:
#line 611 "parser.y"
{
                            _ptImageIO = (TImageIO*) _tDataStack.POP();
                            delete _ptImageIO;
                            
                            _ptImageIO = TImageManager::_getImageIO (yyvsp[0].acIdent);
                            _tDataStack.push (_ptImageIO);
			  ;
    break;}
case 103:
#line 622 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Scene");
			  ;
    break;}
case 104:
#line 626 "parser.y"
{
			    yyval.ptScene = (TScene*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 105:
#line 632 "parser.y"
{
			    yyval.ptScene = (TScene*) InstanceObject (yyvsp[0].acIdent);
			    TSceneRT::_ptParsedScene = yyval.ptScene;
			  ;
    break;}
case 106:
#line 637 "parser.y"
{
//			    CreateObject ($1, "Scene");
			    _ptData = TSceneRT::_ptParsedScene;
			    _tDataStack.push (_ptData);
			  ;
    break;}
case 107:
#line 643 "parser.y"
{
			    yyval.ptScene = (TScene*) _tDataStack.POP();
//			    $$ = &tScene;
			  ;
    break;}
case 110:
#line 654 "parser.y"
{
			    SCENE->addLight (yyvsp[0].ptLight);
			  ;
    break;}
case 111:
#line 658 "parser.y"
{
			    SCENE->addImageFilter (yyvsp[0].ptIFilter);
			  ;
    break;}
case 112:
#line 662 "parser.y"
{
			    SCENE->setImageOutput (yyvsp[0].ptImageIO);
			  ;
    break;}
case 114:
#line 669 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "PinholeCamera");
			  ;
    break;}
case 115:
#line 673 "parser.y"
{
			    yyval.ptCamera = (TCamera*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 116:
#line 679 "parser.y"
{
			    yyval.ptCamera = (TCamera*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 117:
#line 683 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "PinholeCamera");
			  ;
    break;}
case 118:
#line 687 "parser.y"
{
			    yyval.ptCamera = (TCamera*) _tDataStack.POP();
			  ;
    break;}
case 119:
#line 693 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "PointLight");
			  ;
    break;}
case 120:
#line 697 "parser.y"
{
			    yyval.ptLight = (TLight*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 121:
#line 703 "parser.y"
{
			    yyval.ptLight = (TLight*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 122:
#line 707 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "PointLight");
			  ;
    break;}
case 123:
#line 711 "parser.y"
{
			    yyval.ptLight = (TLight*) _tDataStack.POP();
			  ;
    break;}
case 124:
#line 717 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "BsdfPhong");
			  ;
    break;}
case 125:
#line 721 "parser.y"
{
			    yyval.ptBsdf = (TBsdf*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 126:
#line 727 "parser.y"
{
			    yyval.ptBsdf = (TBsdf*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 127:
#line 731 "parser.y"
{
                            CreateObject (yyvsp[0].acIdent, "BsdfPhong");
			  ;
    break;}
case 128:
#line 735 "parser.y"
{
                            yyval.ptBsdf = (TBsdf*) _tDataStack.POP();
			  ;
    break;}
case 129:
#line 741 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Raytracer");
			  ;
    break;}
case 130:
#line 745 "parser.y"
{
			    yyval.ptRenderer = (TRenderer*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 131:
#line 751 "parser.y"
{
			    yyval.ptRenderer = (TRenderer*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 132:
#line 755 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Raytracer");
			  ;
    break;}
case 133:
#line 759 "parser.y"
{
			    yyval.ptRenderer = (TRenderer*) _tDataStack.POP();
			  ;
    break;}
case 134:
#line 765 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Material");
			  ;
    break;}
case 135:
#line 769 "parser.y"
{
                            yyval.ptMaterial = (TMaterial*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 136:
#line 775 "parser.y"
{
			    yyval.ptMaterial = (TMaterial*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 137:
#line 779 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Material");
			  ;
    break;}
case 138:
#line 783 "parser.y"
{
			    yyval.ptMaterial = (TMaterial*) _tDataStack.POP();

			  ;
    break;}
case 139:
#line 790 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "");
			  ;
    break;}
case 140:
#line 794 "parser.y"
{
			    yyval.ptIFilter = (TImageFilter*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 141:
#line 800 "parser.y"
{
			    yyval.ptIFilter = (TImageFilter*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 142:
#line 804 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "");
			  ;
    break;}
case 143:
#line 808 "parser.y"
{
			    yyval.ptIFilter = (TImageFilter*) _tDataStack.POP();
			  ;
    break;}
case 144:
#line 814 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "");
			  ;
    break;}
case 145:
#line 818 "parser.y"
{
			    yyval.ptOFilter = (TObjectFilter*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 146:
#line 824 "parser.y"
{
			    yyval.ptOFilter = (TObjectFilter*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 147:
#line 828 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "");
			  ;
    break;}
case 148:
#line 832 "parser.y"
{
			    yyval.ptOFilter = (TObjectFilter*) _tDataStack.POP();
			  ;
    break;}
case 149:
#line 838 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "");
			  ;
    break;}
case 150:
#line 842 "parser.y"
{
			    yyval.ptObject = (TObject*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 151:
#line 848 "parser.y"
{
			    yyval.ptObject = (TObject*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 152:
#line 852 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "");
			  ;
    break;}
case 153:
#line 856 "parser.y"
{
			    yyval.ptObject = (TObject*) _tDataStack.POP();
			  ;
    break;}
case 154:
#line 862 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Plane");
			  ;
    break;}
case 155:
#line 866 "parser.y"
{
			    yyval.ptObject = (TPlane*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 156:
#line 872 "parser.y"
{
			    yyval.ptObject = (TPlane*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 157:
#line 876 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Plane");
			  ;
    break;}
case 158:
#line 880 "parser.y"
{
			    yyval.ptObject = (TPlane*) _tDataStack.POP();
			  ;
    break;}
case 159:
#line 886 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Sphere");
			  ;
    break;}
case 160:
#line 890 "parser.y"
{
			    yyval.ptObject = (TSphere*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 161:
#line 896 "parser.y"
{
			    yyval.ptObject = (TSphere*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 162:
#line 900 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Sphere");
			  ;
    break;}
case 163:
#line 904 "parser.y"
{
			    yyval.ptObject = (TSphere*) _tDataStack.POP();
			  ;
    break;}
case 164:
#line 910 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Triangle");
			    _bVertices = 0;
			  ;
    break;}
case 165:
#line 915 "parser.y"
{
			    if ( _bVertices != 3 )
			    {
			      yyerror ("wrong number of vertices in triangle");
			      exit (1);
			    }
			    yyval.ptObject = (TTriangle*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 166:
#line 926 "parser.y"
{
			    yyval.ptObject = (TTriangle*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 167:
#line 930 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Triangle");
			    _bVertices = 0;
			  ;
    break;}
case 168:
#line 935 "parser.y"
{
			    if ( _bVertices != 3 )
			    {
			      yyerror ("wrong number of vertices in triangle");
			      exit (1);
			    }
			    yyval.ptObject = (TTriangle*) _tDataStack.POP();
			  ;
    break;}
case 171:
#line 950 "parser.y"
{
			    TRIANGLE->setVertex (*yyvsp[0].ptVector);
			    _bVertices++;
			  ;
    break;}
case 173:
#line 958 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "PhongTriangle");
			    _bVertices = 0;
			  ;
    break;}
case 174:
#line 963 "parser.y"
{
			    if ( _bVertices != 3 )
			    {
			      yyerror ("wrong number of vertices in phong_triangle");
			      exit (1);
			    }
			    yyval.ptObject = (TPhongTriangle*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 175:
#line 974 "parser.y"
{
			    yyval.ptObject = (TPhongTriangle*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 176:
#line 978 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "PhongTriangle");
			    _bVertices = 0;
			  ;
    break;}
case 177:
#line 983 "parser.y"
{
			    if ( _bVertices != 3 )
			    {
			      yyerror ("wrong number of vertices in phong_triangle");
			      exit (1);
			    }
			    yyval.ptObject = (TPhongTriangle*) _tDataStack.POP();
			  ;
    break;}
case 180:
#line 998 "parser.y"
{
			    TRIANGLE->setVertex (*yyvsp[0].ptVector);
			    _bVertices++;
			  ;
    break;}
case 182:
#line 1006 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Rectangle");
			    _bVertices = 0;
			  ;
    break;}
case 183:
#line 1011 "parser.y"
{
			    if ( _bVertices != 4 )
			    {
			      yyerror ("wrong number of vertices in rectangle");
			      exit (1);
			    }
			    yyval.ptObject = (TRectangle*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 184:
#line 1022 "parser.y"
{
			    yyval.ptObject = (TRectangle*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 185:
#line 1026 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Rectangle");
			    _bVertices = 0;
			  ;
    break;}
case 186:
#line 1031 "parser.y"
{
			    if ( _bVertices != 4 )
			    {
			      yyerror ("wrong number of vertices in rectangle");
			      exit (1);
			    }
			    yyval.ptObject = (TRectangle*) _tDataStack.POP();
			  ;
    break;}
case 189:
#line 1046 "parser.y"
{
			    RECTANGLE->setVertex (*yyvsp[0].ptVector);
			    _bVertices++;
			  ;
    break;}
case 191:
#line 1054 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Circle");
			  ;
    break;}
case 192:
#line 1058 "parser.y"
{
			    yyval.ptObject = (TCircle*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 193:
#line 1064 "parser.y"
{
			    yyval.ptObject = (TCircle*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 194:
#line 1068 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Circle");
			  ;
    break;}
case 195:
#line 1072 "parser.y"
{
			    yyval.ptObject = (TCircle*) _tDataStack.POP();
			  ;
    break;}
case 198:
#line 1082 "parser.y"
{
			    AGGREGATE->add (yyvsp[0].ptObject);
			  ;
    break;}
case 200:
#line 1089 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Aggregate");
			  ;
    break;}
case 201:
#line 1093 "parser.y"
{
			    yyval.ptObject = (TAggregate*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 202:
#line 1099 "parser.y"
{
			    yyval.ptObject = (TAggregate*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 203:
#line 1103 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Aggregate");
			  ;
    break;}
case 204:
#line 1107 "parser.y"
{
			    yyval.ptObject = (TAggregate*) _tDataStack.POP();
			  ;
    break;}
case 205:
#line 1113 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "AtmConst");
			  ;
    break;}
case 206:
#line 1117 "parser.y"
{
			    yyval.ptAtmObject = (TAtmosphericObject*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 207:
#line 1123 "parser.y"
{
			    yyval.ptAtmObject = (TAtmosphericObject*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 208:
#line 1127 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "AtmConst");
			  ;
    break;}
case 209:
#line 1131 "parser.y"
{
			    yyval.ptAtmObject = (TAtmosphericObject*) _tDataStack.POP();
			  ;
    break;}
case 210:
#line 1137 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Box");
			  ;
    break;}
case 211:
#line 1141 "parser.y"
{
			    yyval.ptObject = (TBox*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 212:
#line 1147 "parser.y"
{
			    yyval.ptObject = (TBox*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 213:
#line 1151 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Box");
			  ;
    break;}
case 214:
#line 1155 "parser.y"
{
			    yyval.ptObject = (TBox*) _tDataStack.POP();
			  ;
    break;}
case 215:
#line 1161 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Cylinder");
			  ;
    break;}
case 216:
#line 1165 "parser.y"
{
			    yyval.ptObject = (TCylinder*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 217:
#line 1171 "parser.y"
{
			    yyval.ptObject = (TCylinder*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 218:
#line 1175 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Cylinder");
			  ;
    break;}
case 219:
#line 1179 "parser.y"
{
			    yyval.ptObject = (TCylinder*) _tDataStack.POP();
			  ;
    break;}
case 220:
#line 1185 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Cone");
			  ;
    break;}
case 221:
#line 1189 "parser.y"
{
			    yyval.ptObject = (TCone*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 222:
#line 1195 "parser.y"
{
			    yyval.ptObject = (TCone*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 223:
#line 1199 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Cone");
			  ;
    break;}
case 224:
#line 1203 "parser.y"
{
			    yyval.ptObject = (TCone*) _tDataStack.POP();
	       		  ;
    break;}
case 225:
#line 1209 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Torus");
			  ;
    break;}
case 226:
#line 1213 "parser.y"
{
			    yyval.ptObject = (TTorus*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 227:
#line 1219 "parser.y"
{
			    yyval.ptObject = (TTorus*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 228:
#line 1223 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Torus");
			  ;
    break;}
case 229:
#line 1227 "parser.y"
{
			    yyval.ptObject = (TTorus*) _tDataStack.POP();
			  ;
    break;}
case 230:
#line 1233 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Mesh");
			  ;
    break;}
case 231:
#line 1237 "parser.y"
{
			    yyval.ptObject = (TMeshObject*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 232:
#line 1243 "parser.y"
{
			    yyval.ptObject = (TMeshObject*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 233:
#line 1247 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Mesh");
			  ;
    break;}
case 234:
#line 1251 "parser.y"
{
			    yyval.ptObject = (TMeshObject*) _tDataStack.POP();
			  ;
    break;}
case 237:
#line 1261 "parser.y"
{
			    MESH->addTriangle ((TTriangle*) yyvsp[0].ptObject);
                            delete yyvsp[0].ptObject;
			  ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1268 "parser.y"


void yyerror (const char* pkcTEXT)
{

  cerr << endl << TSceneRT::_tInputFileName << "(" << TSceneRT::_dwLineNumber << ") Error: " << pkcTEXT << endl;

}  /* yyerror() */


void InitParser (void)
{

  InitObjects();
  InitFunctions();

  _ptWorld = new TAggregate();
  
  TSceneRT::_ptParsedScene->setWorld (_ptWorld);
  
}  /* InitParser() */


void CloseParser (void)
{

  _tObjectMap.clear();

}  /* CloseParser() */


void InitFunctions (void)
{

  _tFunctionMap ["rand"] = (double(*)(void)) &frand;

}  /* InitFunctions() */


void InitObjects (void)
{
}  /* InitObjects() */


TBaseClass* NewObject (const string& rktCLASS, const TBaseClass* pktPARENT)
{

  TBaseClass*   ptChild;

//  cout << "New object : \"" << rktCLASS << "\"" << endl;

  ptChild = TClassManager::_newObject (rktCLASS, pktPARENT);
  if ( !ptChild )
  {
    string   tMessage = string ("class ") + rktCLASS + " does not exist";
    yyerror (tMessage.c_str());
    exit (1);
  }

  return ptChild;

}  /* NewObject() */


void* InstanceObject (const string& rktNAME)
{

  void*   pvObject;

  if ( rktNAME == "" )
  {
    yyerror ("instanced object cannot be unnamed");
    exit (1);
  }

  if ( _tObjectMap.find (rktNAME) == _tObjectMap.end() )
  {
    yyerror ("object does not exist");
    exit (1);
  }

  pvObject = _tObjectMap [rktNAME];

  return pvObject;

}  /* InstanceObject() */


void* UpdateObject (const string& rktNAME)
{

  TBaseClass*   ptObject;

//  cout << "Updating object : \"" << rktNAME << "\"" << endl;

  ptObject = _tDataStack.POP();

  _tObjectMap [rktNAME] = ptObject;

  return ptObject;

}  /* UpdateObject() */


void DefineObject (const string& rktNAME, const string& rktCLASS, const string& rktDEF_CLASS)
{

//  cout << "Defining object : \"" << rktNAME << "\", \"" << rktCLASS << "\", \"" << rktDEF_CLASS << "\"" << endl;

  if ( rktNAME == "" )
  {
    yyerror ("defined object cannot be unnamed");
    exit (1);
  }

  if ( _tObjectMap.find (rktNAME) != _tObjectMap.end() )
  {
    yyerror ("cannot redefine an existing object");
    exit (1);
  }

  if ( rktCLASS == "" )
  {
    _ptData = NewObject (rktDEF_CLASS, _ptParent);
  }
  else
  {
    _ptData = NewObject (rktCLASS, _ptParent);
  }

  _tDataStack.push (_ptData);
  _ptParent = NULL;

}  /* DefineObject() */


void CreateObject (const string& rktCLASS, const string& rktDEF_CLASS)
{

//  cout << "Creating object : \"" << rktCLASS << "\", \"" << rktDEF_CLASS << "\"" << endl;
  
  if ( rktCLASS == "" )
  {
    _ptData = NewObject (rktDEF_CLASS, _ptParent);
  }
  else
  {
    _ptData = NewObject (rktCLASS, _ptParent);
  }

  _tDataStack.push (_ptData);
  _ptParent = NULL;

}  /* CreateObject() */


void SetParameter (const string& rktATTRIB, EAttribType eTYPE)
{

  int   iResult;

  iResult = DATA->setAttribute (rktATTRIB, _nAttrib, eTYPE);

  if ( iResult == FX_ATTRIB_WRONG_PARAM )
  {
    yyerror ("object does not have such parameter");
    exit (1);
  }
  else if ( iResult == FX_ATTRIB_WRONG_TYPE )
  {
    yyerror ("incorrect type in parameter value");
    exit (1);
  }
  else if ( iResult == FX_ATTRIB_USER_ERROR )
  {
    yyerror (TBaseClass::_tUserErrorMessage.c_str());
    exit (1);
  }

}  /* SetParameter() */
