
/*  A Bison parser, made from parser.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse rt_parse
#define yylex rt_lex
#define yyerror rt_error
#define yylval rt_lval
#define yychar rt_char
#define yydebug rt_debug
#define yynerrs rt_nerrs
#define	T_BOOL	257
#define	T_REAL	258
#define	T_IDENTIFIER	259
#define	T_QUOTED_STRING	260
#define	T_AGGREGATE	261
#define	T_ATM_OBJECT	262
#define	T_BLUE	263
#define	T_BOX	264
#define	T_BSDF	265
#define	T_CAMERA	266
#define	T_CIRCLE	267
#define	T_CLASS	268
#define	T_COLOR	269
#define	T_CONE	270
#define	T_CYLINDER	271
#define	T_DEFINE	272
#define	T_DIFFERENCE	273
#define	T_EXTENDS	274
#define	T_FILTER	275
#define	T_GREEN	276
#define	T_IMAGE_FILTER	277
#define	T_INTERSECTION	278
#define	T_LIGHT	279
#define	T_MATERIAL	280
#define	T_MESH	281
#define	T_OBJECT	282
#define	T_OBJECT_FILTER	283
#define	T_OUTPUT	284
#define	T_PATTERN	285
#define	T_PERTURBATION	286
#define	T_PHONG_TRIANGLE	287
#define	T_PLANE	288
#define	T_RECTANGLE	289
#define	T_RED	290
#define	T_RENDERER	291
#define	T_ROTATE	292
#define	T_SCALE	293
#define	T_SCENE	294
#define	T_SPHERE	295
#define	T_TORUS	296
#define	T_TRANSLATE	297
#define	T_TRIANGLE	298
#define	T_TYPE	299
#define	T_UNION	300
#define	T_VECTOR	301
#define	T_VERTEX	302
#define	T_X	303
#define	T_Y	304
#define	T_Z	305
#define	T_ATTR_LIST	306
#define	T_ATTR_TYPE	307
#define	UNARY_MINUS	308

#line 19 "parser.y"


#include <map>
#include <stack>
#include <string>
#include <iostream>
#include "llapi/llapi_all.h"
#include "hlapi/hlapi_all.h"
#include "hlapi/class_manager.h"
#include "hlapi/plugins_all.h"
#include "parser_defs.h"
#include "rt_io.h"

static map<string, TProcedural*, less<string> >       _tObjectMap;
static map<string, TColor, less<string> >             _tColorMap;
static map<string, TVector, less<string> >            _tVectorMap;
static map<string, double(*)(void), less<string> >    _tFunctionMap;
static map<string, EClass, less<string> >             _tTypeMap;
static stack<TProcedural*>                            _tDataStack;

static TProcedural*   _ptData;
static TProcedural*   _ptParent;
static Byte           _bVertices;
static TVector        _tVector;
static TVector2       _tVector2;
static TColor         _tColor;
static TAggregate*    _ptWorld;
static NAttribute     _nAttrib;
static TImageIO*      _ptImageIO;

static double (*_pfFunction)(void);

#define POP()           top(); _tDataStack.pop()            // Fix to STL's pop()

#define DATA		(_tDataStack.top())
#define ENTITY		((TEntity*) _tDataStack.top())
#define VOLUME		((TVolume*) _tDataStack.top())
#define VECTOR		((TVector*) _tDataStack.top())
#define COLOR		((TColor*) _tDataStack.top())
#define SCENE		(TSceneRT::_ptParsedScene)
#define MATERIAL	((TMaterial*) _tDataStack.top())
#define OBJECT		((TObject*) _tDataStack.top())
#define AGGREGATE	((TAggregate*) _tDataStack.top())
#define TRIANGLE	((TTriangle*) _tDataStack.top())
#define RECTANGLE	((TRectangle*) _tDataStack.top())
#define MESH		((TMeshObject*) _tDataStack.top())

#define YYDEBUG 1
#define YYERROR_VERBOSE 

static TProcedural* NewObject (const string& rktCLASS, const TProcedural* pktPARENT);
static void* InstanceObject (const string& rktNAME);
static void* UpdateObject (const string& rktNAME);
static void DefineObject (const string& rktNAME, const string& rktCLASS, const string& rktDEF_CLASS);
static void CreateObject (const string& rktCLASS, const string& rktDEF_CLASS);
static void SetParameter (const string& rktATTRIB, EAttribType eTYPE);

static void DefineColor (const string& rktNAME);
static TColor* InstanceColor (const string& rktNAME);

static void DefineVector (const string& rktNAME);
static TVector* InstanceVector (const string& rktNAME);

static void UpdateAttribute (const string& rktATTRIBUTE, const string& rktIDENT);

static void InitObjects (void);
static void InitFunctions (void);

static EAttribType MapClassToAttribute (const TBaseClass* pktClass);

static string EAttribType_to_str (EAttribType eat);
 

#line 93 "parser.y"
typedef union {
         char                  acIdent [200];
         double                dValue;
         bool                  gValue;
         TColor*               ptColor;
         TVector*              ptVector;
         TVector2*             ptVector2;
         TScene*               ptScene;
         TRenderer*            ptRenderer;
         TCamera*              ptCamera;
         TLight*               ptLight;
         TBsdf*                ptBsdf;
         TMaterial*            ptMaterial;
         TPattern*             ptPattern;
         TPerturbation*        ptPerturbation; 
         TObject*              ptObject;
         TImageFilter*         ptIFilter;
         TObjectFilter*        ptOFilter;
         TAtmosphericObject*   ptAtmObject;
         TImageIO*             ptImageIO;
       } YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		607
#define	YYFLAG		-32768
#define	YYNTBASE	67

#define YYTRANSLATE(x) ((unsigned)(x) <= 308 ? yytranslate[x] : 213)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    59,
    60,    56,    54,    64,    55,     2,    57,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    66,     2,    63,
     2,    65,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    61,     2,    62,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    58
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     4,     7,    10,    13,    15,    19,    23,    27,
    31,    35,    39,    43,    47,    51,    55,    59,    63,    67,
    71,    75,    79,    83,    87,    91,    95,    99,   103,   107,
   111,   115,   119,   123,   127,   131,   134,   137,   140,   143,
   146,   149,   152,   155,   158,   161,   164,   167,   170,   173,
   176,   179,   181,   185,   189,   193,   197,   201,   204,   208,
   217,   225,   231,   233,   236,   237,   239,   240,   244,   248,
   249,   252,   256,   261,   264,   267,   270,   273,   276,   279,
   282,   285,   288,   291,   294,   297,   300,   303,   306,   309,
   312,   313,   316,   319,   322,   325,   328,   330,   333,   335,
   336,   339,   342,   345,   347,   348,   355,   356,   359,   362,
   365,   368,   369,   376,   378,   379,   385,   386,   389,   392,
   395,   398,   399,   404,   405,   408,   411,   413,   414,   421,
   423,   424,   430,   431,   434,   437,   440,   443,   445,   446,
   453,   455,   456,   462,   463,   470,   472,   473,   479,   480,
   487,   489,   490,   496,   497,   504,   506,   507,   513,   514,
   521,   523,   524,   530,   531,   538,   540,   541,   547,   548,
   555,   557,   558,   564,   565,   572,   574,   575,   581,   582,
   589,   591,   592,   598,   599,   606,   608,   609,   615,   616,
   623,   625,   626,   632,   633,   640,   642,   643,   649,   650,
   657,   659,   660,   666,   667,   670,   672,   674,   675,   682,
   684,   685,   691,   692,   695,   697,   699,   700,   707,   709,
   710,   716,   717,   720,   722,   724,   725,   732,   734,   735,
   741,   742,   745,   747,   749,   750,   757,   759,   760,   766,
   767,   774,   776,   777,   783,   784,   791,   793,   794,   800,
   801,   808,   810,   811,   817,   818,   825,   827,   828,   834,
   835,   842,   844,   845,   851,   852,   859,   861,   862,   868,
   869,   872,   875,   877,   878,   885,   887,   888,   894,   896,
   898,   900,   902,   904,   906,   908,   910,   912,   914,   916,
   918,   920,   922,   924,   926,   928,   930,   932,   934,   936,
   938,   940,   942,   944,   946,   948,   950,   952,   954,   956,
   958,   960,   962,   964,   966,   968,   970,   972,   974,   976,
   978,   980,   982,   984,   986,   988,   990
};

static const short yyrhs[] = {    -1,
    67,    68,     0,    67,    69,     0,    40,   101,     0,     8,
   183,     0,    70,     0,    18,    15,    85,     0,    18,    47,
    89,     0,    18,    28,   141,     0,    18,    40,    99,     0,
    18,    12,   137,     0,    18,    25,   105,     0,    18,    11,
   109,     0,    18,    23,   129,     0,    18,    29,   133,     0,
    18,    37,   113,     0,    18,    26,   117,     0,    18,    31,
   121,     0,    18,    32,   125,     0,    18,    34,   145,     0,
    18,    41,   149,     0,    18,    44,   153,     0,    18,    33,
   159,     0,    18,    35,   165,     0,    18,    13,   171,     0,
    18,     7,   177,     0,    18,    10,   185,     0,    18,    17,
   189,     0,    18,    16,   193,     0,    18,    42,   197,     0,
    18,    27,   201,     0,    18,     8,   181,     0,    18,    46,
   207,     0,    18,    24,   207,     0,    18,    19,   207,     0,
    28,   143,     0,    34,   147,     0,    41,   151,     0,    44,
   155,     0,    33,   161,     0,    35,   167,     0,    13,   173,
     0,     7,   179,     0,    10,   187,     0,    17,   191,     0,
    16,   195,     0,    42,   199,     0,    27,   203,     0,    46,
   209,     0,    24,   209,     0,    19,   209,     0,     4,     0,
     5,    59,    60,     0,    71,    54,    71,     0,    71,    55,
    71,     0,    71,    56,    71,     0,    71,    57,    71,     0,
    55,    71,     0,    59,    71,    60,     0,    61,    36,    71,
    22,    71,     9,    71,    62,     0,    63,    71,    64,    71,
    64,    71,    65,     0,    63,    71,    64,    71,    65,     0,
    73,     0,    48,    73,     0,     0,     5,     0,     0,    66,
    20,     5,     0,    66,    14,     5,     0,     0,    78,    79,
     0,    52,    59,    60,     0,    53,    59,   211,    60,     0,
     5,    73,     0,     5,    74,     0,     5,    71,     0,     5,
     3,     0,     5,     6,     0,     5,   123,     0,     5,   127,
     0,     5,    72,     0,     5,    76,     0,    15,    76,     0,
    15,    71,     0,    15,    72,     0,    15,   123,     0,    47,
    91,     0,    12,   139,     0,    37,   115,     0,    11,   111,
     0,     0,    80,    81,     0,    43,    73,     0,    38,    73,
     0,    43,    91,     0,    38,    91,     0,    79,     0,    39,
    73,     0,    81,     0,     0,    83,    84,     0,    26,   119,
     0,    21,   135,     0,    82,     0,     0,    76,    77,    86,
    61,    87,    62,     0,     0,    87,    88,     0,    36,    71,
     0,    22,    71,     0,     9,    71,     0,     0,    76,    77,
    90,    61,    93,    62,     0,    76,     0,     0,    77,    92,
    61,    93,    62,     0,     0,    93,    94,     0,    49,    71,
     0,    50,    71,     0,    51,    71,     0,     0,    61,    96,
    97,    62,     0,     0,    97,    98,     0,    45,     6,     0,
    79,     0,     0,    76,    77,   100,    61,   103,    62,     0,
    76,     0,     0,    77,   102,    61,   103,    62,     0,     0,
   103,   104,     0,    25,   107,     0,    21,   131,     0,    30,
    95,     0,    79,     0,     0,    76,    77,   106,    61,    80,
    62,     0,    76,     0,     0,    77,   108,    61,    80,    62,
     0,     0,    76,    77,   110,    61,    78,    62,     0,    76,
     0,     0,    77,   112,    61,    78,    62,     0,     0,    76,
    77,   114,    61,    78,    62,     0,    76,     0,     0,    77,
   116,    61,    78,    62,     0,     0,    76,    77,   118,    61,
    78,    62,     0,    76,     0,     0,    77,   120,    61,    78,
    62,     0,     0,    76,    77,   122,    61,    78,    62,     0,
    76,     0,     0,    77,   124,    61,    78,    62,     0,     0,
    76,    77,   126,    61,    78,    62,     0,    76,     0,     0,
    77,   128,    61,    78,    62,     0,     0,    76,    77,   130,
    61,    78,    62,     0,    76,     0,     0,    77,   132,    61,
    78,    62,     0,     0,    76,    77,   134,    61,    78,    62,
     0,    76,     0,     0,    77,   136,    61,    78,    62,     0,
     0,    76,    77,   138,    61,    80,    62,     0,    76,     0,
     0,    77,   140,    61,    80,    62,     0,     0,    76,    77,
   142,    61,    83,    62,     0,    76,     0,     0,    77,   144,
    61,    83,    62,     0,     0,    76,    77,   146,    61,    83,
    62,     0,    76,     0,     0,    77,   148,    61,    83,    62,
     0,     0,    76,    77,   150,    61,    83,    62,     0,    76,
     0,     0,    77,   152,    61,    83,    62,     0,     0,    76,
    77,   154,    61,   157,    62,     0,    76,     0,     0,    77,
   156,    61,   157,    62,     0,     0,   157,   158,     0,    75,
     0,    84,     0,     0,    76,    77,   160,    61,   163,    62,
     0,    76,     0,     0,    77,   162,    61,   163,    62,     0,
     0,   163,   164,     0,    75,     0,    84,     0,     0,    76,
    77,   166,    61,   169,    62,     0,    76,     0,     0,    77,
   168,    61,   169,    62,     0,     0,   169,   170,     0,    75,
     0,    84,     0,     0,    76,    77,   172,    61,    83,    62,
     0,    76,     0,     0,    77,   174,    61,    83,    62,     0,
     0,   175,   176,     0,    70,     0,    84,     0,     0,    76,
    77,   178,    61,   175,    62,     0,    76,     0,     0,    77,
   180,    61,   175,    62,     0,     0,    76,    77,   182,    61,
    78,    62,     0,    76,     0,     0,    77,   184,    61,    78,
    62,     0,     0,    76,    77,   186,    61,    83,    62,     0,
    76,     0,     0,    77,   188,    61,    83,    62,     0,     0,
    76,    77,   190,    61,    83,    62,     0,    76,     0,     0,
    77,   192,    61,    83,    62,     0,     0,    76,    77,   194,
    61,    83,    62,     0,    76,     0,     0,    77,   196,    61,
    83,    62,     0,     0,    76,    77,   198,    61,    83,    62,
     0,    76,     0,     0,    77,   200,    61,    83,    62,     0,
     0,    76,    77,   202,    61,   205,    62,     0,    76,     0,
     0,    77,   204,    61,   205,    62,     0,     0,   205,   206,
     0,    44,   155,     0,    84,     0,     0,    76,    77,   208,
    61,   175,    62,     0,    76,     0,     0,    77,   210,    61,
   175,    62,     0,     5,     0,   212,     0,     7,     0,     8,
     0,     9,     0,    10,     0,    11,     0,    12,     0,    13,
     0,    14,     0,    15,     0,    16,     0,    17,     0,    18,
     0,    19,     0,    20,     0,    21,     0,    22,     0,    23,
     0,    24,     0,    25,     0,    26,     0,    27,     0,    28,
     0,    29,     0,    30,     0,    31,     0,    32,     0,    33,
     0,    34,     0,    35,     0,    36,     0,    37,     0,    38,
     0,    39,     0,    40,     0,    41,     0,    42,     0,    43,
     0,    44,     0,    45,     0,    46,     0,    47,     0,    48,
     0,    49,     0,    50,     0,    51,     0,    52,     0,    53,
     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   246,   247,   248,   251,   253,   257,   263,   265,   267,   269,
   271,   273,   275,   277,   279,   281,   283,   285,   287,   289,
   291,   293,   295,   297,   299,   301,   303,   305,   307,   309,
   311,   313,   315,   317,   319,   323,   327,   331,   335,   339,
   343,   347,   351,   355,   359,   363,   367,   371,   375,   380,
   385,   392,   396,   408,   412,   416,   420,   424,   428,   433,
   442,   449,   456,   460,   466,   470,   476,   480,   490,   497,
   498,   501,   522,   544,   549,   554,   559,   564,   569,   574,
   579,   584,   588,   592,   597,   602,   607,   612,   617,   622,
   629,   630,   633,   637,   641,   645,   649,   652,   656,   659,
   660,   663,   667,   671,   674,   678,   704,   705,   708,   712,
   716,   722,   726,   735,   739,   743,   749,   750,   753,   757,
   761,   767,   771,   777,   778,   781,   794,   797,   801,   807,
   812,   818,   825,   826,   829,   833,   837,   841,   844,   848,
   854,   858,   862,   868,   872,   878,   882,   886,   892,   896,
   902,   906,   910,   916,   920,   926,   930,   934,   940,   944,
   950,   954,   958,   964,   968,   974,   978,   982,   988,   992,
   998,  1002,  1006,  1012,  1016,  1022,  1026,  1030,  1036,  1040,
  1046,  1050,  1054,  1060,  1064,  1070,  1074,  1078,  1084,  1088,
  1094,  1098,  1102,  1108,  1112,  1118,  1122,  1126,  1132,  1137,
  1148,  1152,  1157,  1168,  1169,  1172,  1177,  1180,  1185,  1196,
  1200,  1205,  1216,  1217,  1220,  1225,  1228,  1233,  1244,  1248,
  1253,  1264,  1265,  1268,  1273,  1276,  1280,  1286,  1290,  1294,
  1300,  1301,  1304,  1308,  1311,  1315,  1321,  1325,  1329,  1335,
  1339,  1345,  1349,  1353,  1359,  1363,  1369,  1373,  1377,  1383,
  1387,  1393,  1397,  1401,  1407,  1411,  1417,  1421,  1425,  1431,
  1435,  1441,  1445,  1449,  1455,  1459,  1465,  1469,  1473,  1479,
  1480,  1483,  1488,  1491,  1495,  1501,  1505,  1509,  1515,  1516,
  1520,  1521,  1522,  1523,  1524,  1525,  1526,  1527,  1528,  1529,
  1530,  1531,  1532,  1533,  1534,  1535,  1536,  1537,  1538,  1539,
  1540,  1541,  1542,  1543,  1544,  1545,  1546,  1547,  1548,  1549,
  1550,  1551,  1552,  1553,  1554,  1555,  1556,  1557,  1558,  1559,
  1560,  1561,  1562,  1563,  1564,  1565,  1566
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","T_BOOL",
"T_REAL","T_IDENTIFIER","T_QUOTED_STRING","T_AGGREGATE","T_ATM_OBJECT","T_BLUE",
"T_BOX","T_BSDF","T_CAMERA","T_CIRCLE","T_CLASS","T_COLOR","T_CONE","T_CYLINDER",
"T_DEFINE","T_DIFFERENCE","T_EXTENDS","T_FILTER","T_GREEN","T_IMAGE_FILTER",
"T_INTERSECTION","T_LIGHT","T_MATERIAL","T_MESH","T_OBJECT","T_OBJECT_FILTER",
"T_OUTPUT","T_PATTERN","T_PERTURBATION","T_PHONG_TRIANGLE","T_PLANE","T_RECTANGLE",
"T_RED","T_RENDERER","T_ROTATE","T_SCALE","T_SCENE","T_SPHERE","T_TORUS","T_TRANSLATE",
"T_TRIANGLE","T_TYPE","T_UNION","T_VECTOR","T_VERTEX","T_X","T_Y","T_Z","T_ATTR_LIST",
"T_ATTR_TYPE","'+'","'-'","'*'","'/'","UNARY_MINUS","'('","')'","'{'","'}'",
"'<'","','","'>'","':'","everything","instance","definition","object","real_expr",
"color","vector3","vector2","vertex_instance","name","class","params","param",
"entity_params","entity_param","volume_param","object_params","object_param",
"color_def","@1","color_params","color_param","vector_def","@2","vector_instance",
"@3","vector_params","vector_param","image_io_instance","@4","image_io_params",
"image_io_param","scene_def","@5","scene_instance","@6","scene_params","scene_param",
"light_def","@7","light_instance","@8","bsdf_def","@9","bsdf_instance","@10",
"renderer_def","@11","renderer_instance","@12","material_def","@13","material_instance",
"@14","pattern_def","@15","pattern_instance","@16","perturbation_def","@17",
"perturbation_instance","@18","ifilter_def","@19","ifilter_instance","@20","ofilter_def",
"@21","ofilter_instance","@22","camera_def","@23","camera_instance","@24","object_def",
"@25","object_instance","@26","plane_def","@27","plane_instance","@28","sphere_def",
"@29","sphere_instance","@30","triangle_def","@31","triangle_instance","@32",
"triangle_params","triangle_param","phong_triangle_def","@33","phong_triangle_instance",
"@34","phong_triangle_params","phong_triangle_param","rectangle_def","@35","rectangle_instance",
"@36","rectangle_params","rectangle_param","circle_def","@37","circle_instance",
"@38","aggregate_params","aggregate_param","aggregate_def","@39","aggregate_instance",
"@40","atm_object_def","@41","atm_object_instance","@42","box_def","@43","box_instance",
"@44","cylinder_def","@45","cylinder_instance","@46","cone_def","@47","cone_instance",
"@48","torus_def","@49","torus_instance","@50","mesh_def","@51","mesh_instance",
"@52","mesh_params","mesh_param","csg_def","@53","csg_instance","@54","potential_string",
"reserved_words", NULL
};
#endif

static const short yyr1[] = {     0,
    67,    67,    67,    68,    68,    68,    69,    69,    69,    69,
    69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
    69,    69,    69,    69,    69,    69,    69,    69,    69,    69,
    69,    69,    69,    69,    69,    70,    70,    70,    70,    70,
    70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
    70,    71,    71,    71,    71,    71,    71,    71,    71,    72,
    73,    74,    75,    75,    76,    76,    77,    77,    77,    78,
    78,    79,    79,    79,    79,    79,    79,    79,    79,    79,
    79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
    80,    80,    81,    81,    81,    81,    81,    82,    82,    83,
    83,    84,    84,    84,    86,    85,    87,    87,    88,    88,
    88,    90,    89,    91,    92,    91,    93,    93,    94,    94,
    94,    96,    95,    97,    97,    98,    98,   100,    99,   101,
   102,   101,   103,   103,   104,   104,   104,   104,   106,   105,
   107,   108,   107,   110,   109,   111,   112,   111,   114,   113,
   115,   116,   115,   118,   117,   119,   120,   119,   122,   121,
   123,   124,   123,   126,   125,   127,   128,   127,   130,   129,
   131,   132,   131,   134,   133,   135,   136,   135,   138,   137,
   139,   140,   139,   142,   141,   143,   144,   143,   146,   145,
   147,   148,   147,   150,   149,   151,   152,   151,   154,   153,
   155,   156,   155,   157,   157,   158,   158,   160,   159,   161,
   162,   161,   163,   163,   164,   164,   166,   165,   167,   168,
   167,   169,   169,   170,   170,   172,   171,   173,   174,   173,
   175,   175,   176,   176,   178,   177,   179,   180,   179,   182,
   181,   183,   184,   183,   186,   185,   187,   188,   187,   190,
   189,   191,   192,   191,   194,   193,   195,   196,   195,   198,
   197,   199,   200,   199,   202,   201,   203,   204,   203,   205,
   205,   206,   206,   208,   207,   209,   210,   209,   211,   211,
   212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
   212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
   212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
   212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
   212,   212,   212,   212,   212,   212,   212
};

static const short yyr2[] = {     0,
     0,     2,     2,     2,     2,     1,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     1,     3,     3,     3,     3,     3,     2,     3,     8,
     7,     5,     1,     2,     0,     1,     0,     3,     3,     0,
     2,     3,     4,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     0,     2,     2,     2,     2,     2,     1,     2,     1,     0,
     2,     2,     2,     1,     0,     6,     0,     2,     2,     2,
     2,     0,     6,     1,     0,     5,     0,     2,     2,     2,
     2,     0,     4,     0,     2,     2,     1,     0,     6,     1,
     0,     5,     0,     2,     2,     2,     2,     1,     0,     6,
     1,     0,     5,     0,     6,     1,     0,     5,     0,     6,
     1,     0,     5,     0,     6,     1,     0,     5,     0,     6,
     1,     0,     5,     0,     6,     1,     0,     5,     0,     6,
     1,     0,     5,     0,     6,     1,     0,     5,     0,     6,
     1,     0,     5,     0,     6,     1,     0,     5,     0,     6,
     1,     0,     5,     0,     6,     1,     0,     5,     0,     6,
     1,     0,     5,     0,     2,     1,     1,     0,     6,     1,
     0,     5,     0,     2,     1,     1,     0,     6,     1,     0,
     5,     0,     2,     1,     1,     0,     6,     1,     0,     5,
     0,     2,     1,     1,     0,     6,     1,     0,     5,     0,
     6,     1,     0,     5,     0,     6,     1,     0,     5,     0,
     6,     1,     0,     5,     0,     6,     1,     0,     5,     0,
     6,     1,     0,     5,     0,     6,     1,     0,     5,     0,
     2,     2,     1,     0,     6,     1,     0,     5,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1
};

static const short yydefact[] = {     1,
     0,    65,    65,    65,    65,    65,    65,     0,    65,    65,
    65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
     2,     3,     6,    66,     0,   237,   238,    43,   242,   243,
     5,   247,   248,    44,   228,   229,    42,   257,   258,    46,
   252,   253,    45,    65,    65,    65,    65,    65,    65,    65,
    65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
    65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
    65,    65,   276,   277,    51,    50,   267,   268,    48,   186,
   187,    36,   210,   211,    40,   191,   192,    37,   219,   220,
    41,   130,   131,     4,   196,   197,    38,   262,   263,    47,
   201,   202,    39,    49,     0,     0,     0,     0,     0,     0,
     0,     0,    67,    26,    67,    32,    67,    27,    67,    13,
    67,    11,    67,    25,    67,     7,    67,    29,    67,    28,
    67,    35,    67,    14,    34,    67,    12,    67,    17,    67,
    31,    67,     9,    67,    15,    67,    18,    67,    19,    67,
    23,    67,    20,    67,    24,    67,    16,    67,    10,    67,
    21,    67,    30,    67,    22,    33,    67,     8,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    69,    68,
   231,    70,   100,   100,   100,   100,   235,   240,   245,   144,
   179,   226,   105,   255,   250,   274,   169,   139,   154,   265,
   184,   174,   159,   164,   208,   189,   217,   149,   128,   194,
   260,   199,   112,   231,   270,   100,   213,   100,   222,   133,
   100,   100,   204,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    65,    65,    65,    65,
    65,    65,    65,    65,     0,    65,    65,     0,     0,   239,
   233,    97,    99,   104,   234,   232,   244,    71,   249,   101,
   230,   259,   254,   231,    70,   100,    70,    91,   100,   107,
   100,   100,   231,    70,    91,    70,   270,   100,    70,    70,
    70,   213,   100,   222,    70,   133,   100,   100,   204,   117,
   278,    65,   269,   273,   271,   188,     0,   212,     0,    63,
   215,   216,   214,   193,   221,   224,   225,   223,    65,    65,
     0,   132,   138,   134,   198,   264,   203,   206,   207,   205,
    77,    52,    66,    78,     0,     0,     0,     0,    76,    81,
    74,    75,    82,   162,    79,    80,   146,   147,    90,   181,
   182,    88,    84,    85,    83,   162,    86,   176,   177,   103,
   156,   157,   102,   151,   152,    89,    94,   114,   115,    96,
    98,    93,    95,    87,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   272,    64,     0,     0,   171,   172,   136,
   141,   142,   135,   122,   137,     0,    58,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    72,   279,   281,   282,   283,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
   307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,     0,   280,   236,   241,   246,   145,   180,    92,   227,
     0,     0,     0,   106,   108,   256,   251,   275,   170,   140,
   155,   266,   185,   175,   160,   165,   209,   190,   218,   150,
   129,   195,   261,   200,     0,     0,     0,   113,   118,     0,
     0,     0,   124,    53,    59,     0,     0,    54,    55,    56,
    57,    70,    70,    70,    91,    70,    70,    70,   117,    73,
   111,   110,   109,   119,   120,   121,     0,    70,    91,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   123,   127,   125,     0,    62,   163,
   168,   148,   183,   178,   158,   153,   116,     0,   173,   143,
   126,     0,    61,     0,    60,     0,     0
};

static const short yydefgoto[] = {     1,
    21,    22,   281,   359,   360,   330,   362,   331,    73,    74,
   225,   282,   401,   283,   284,   226,   290,   126,   236,   403,
   515,   168,   256,   390,   452,   423,   539,   435,   543,   570,
   587,   159,   252,    94,   175,   263,   344,   137,   241,   433,
   542,   120,   233,   369,   447,   157,   251,   386,   451,   139,
   242,   383,   450,   147,   246,   365,   445,   149,   247,   366,
   446,   134,   240,   430,   541,   145,   245,   380,   449,   122,
   234,   372,   448,   143,   244,    82,   171,   153,   249,    88,
   173,   161,   253,    97,   176,   165,   255,   103,   178,   266,
   350,   151,   248,    85,   172,   260,   333,   155,   250,    91,
   174,   262,   338,   124,   235,    37,   110,   224,   286,   114,
   230,    28,   107,   116,   231,    31,   108,   118,   232,    34,
   109,   130,   238,    43,   112,   128,   237,    40,   111,   163,
   254,   100,   177,   141,   243,    79,   170,   258,   325,   132,
   239,    75,   169,   502,   503
};

static const short yypact[] = {-32768,
  1623,    25,    25,    25,    25,    25,    25,  1663,    25,    25,
    25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
-32768,-32768,-32768,-32768,   142,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    27,    32,   -22,    20,    23,    55,
    59,    72,    75,-32768,    75,-32768,    75,-32768,    75,-32768,
    75,-32768,    75,-32768,    75,-32768,    75,-32768,    75,-32768,
    75,-32768,    75,-32768,-32768,    75,-32768,    75,-32768,    75,
-32768,    75,-32768,    75,-32768,    75,-32768,    75,-32768,    75,
-32768,    75,-32768,    75,-32768,    75,-32768,    75,-32768,    75,
-32768,    75,-32768,    75,-32768,-32768,    75,-32768,    73,    77,
    81,    88,    94,    99,   102,   103,   109,   111,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   628,   114,   866,   886,   915,   935,   116,
   117,   119,   120,   122,   124,   125,   129,   130,   131,   134,
   137,   144,   146,   148,   150,   158,   160,   162,   169,   171,
   173,   175,   177,   179,   181,   183,   672,   803,   964,   397,
   984,   456,   106,  1013,  1033,   485,    69,    25,    25,    21,
    25,    25,    25,    22,    26,    22,    25,   187,   189,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,    25,-32768,-32768,-32768,-32768,    26,-32768,   110,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    25,    25,
   191,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   195,-32768,   110,   110,   214,   110,   370,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   370,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   157,  1569,   716,   385,  1062,  1333,
   332,  1082,   135,  1111,  1131,   760,  1341,   821,  1352,   823,
  1160,  1360,  1404,  1406,   515,  1180,   544,  1418,  1248,  1209,
  1229,   574,    28,-32768,-32768,   195,  1250,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   196,-32768,   273,   110,  1305,
   110,   110,   110,   110,   198,   203,   204,   219,   223,   225,
   226,   234,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   236,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   110,   110,   110,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   110,   110,   110,-32768,-32768,   110,
   243,   247,-32768,-32768,-32768,   235,   110,   -49,   -49,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   370,   370,   370,   370,   370,   370,  1370,-32768,-32768,  1321,
   110,   261,  1435,  1437,  1449,  1275,  1480,  1493,  1501,   151,
   110,  1513,  1287,   291,-32768,-32768,-32768,   206,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   424,-32768,-32768,
-32768,   110,-32768,   245,-32768,   306,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,   318,  -130,    50,  -175,-32768,  -243,    -1,    91,
  -275,  -225,  -281,  -380,-32768,   156,  -112,-32768,-32768,-32768,
-32768,-32768,-32768,  -235,-32768,  -237,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,     7,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    54,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,     9,-32768,    13,
-32768,-32768,-32768,-32768,-32768,    24,-32768,-32768,-32768,-32768,
-32768,    37,-32768,-32768,-32768,-32768,-32768,  -181,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,    39,-32768,    68,
-32768,   127,-32768,-32768,-32768
};


#define	YYLAST		1710


static const short yytable[] = {   288,
    26,    29,    32,    35,    38,    41,   443,   444,    24,    77,
    80,    83,    86,    89,    92,    95,    98,   101,   336,   398,
   509,   400,   348,   408,   352,   353,    24,   509,   407,    24,
   409,   179,   257,   412,   413,   414,   180,   343,   181,   418,
   393,   394,   113,   115,   117,   119,   121,   123,   125,   127,
   129,   131,   133,   131,   136,   138,   140,   142,   144,   146,
   148,   150,   152,   154,   156,   158,   160,   162,   164,   131,
   167,   351,   352,   353,   354,   355,   535,   536,   537,   356,
   182,   357,   -67,   183,   329,   -67,    25,    25,   329,   538,
    25,   361,    27,    30,    33,    36,    39,    42,   387,   391,
   392,    78,    81,    84,    87,    90,    93,    96,    99,   102,
   267,   285,   397,   352,   426,   184,   268,   269,   267,   185,
   270,   406,   135,   355,   268,   269,   339,   356,   270,   357,
   340,   358,   186,   214,    25,   341,    76,   215,   166,   373,
    25,   216,   273,   511,   285,   324,   104,   332,   217,   337,
   273,   425,   277,   349,   218,   105,   512,   278,   279,   219,
   277,   106,   220,   221,   355,   278,   279,   342,   356,   222,
   513,   223,   288,   336,   288,   287,   294,   295,   348,   296,
   297,   288,   298,   288,   299,   300,   288,   288,   288,   301,
   302,   303,   288,   343,   304,   509,   514,   305,   427,   535,
   536,   537,   509,   187,   306,   188,   307,   189,   308,   190,
   309,   191,   597,   192,   602,   193,   453,   194,   310,   195,
   311,   196,   312,   197,   437,   438,   198,   440,   199,   313,
   200,   314,   201,   315,   202,   316,   203,   317,   204,   318,
   205,   319,   206,   320,   207,   395,   208,   396,   209,   439,
   210,   434,   211,   436,   212,   544,   571,   213,   552,   441,
   442,   443,   444,   553,   554,   363,   367,   370,   375,   378,
   381,   384,   388,   576,   388,   388,   573,   574,   575,   555,
   577,   578,   579,   556,   285,   557,   558,   583,   441,   442,
   443,   444,   582,   285,   559,   560,   601,   324,   441,   442,
   443,   444,   332,   568,   337,   607,   605,   569,   546,   349,
   548,   549,   550,   551,   441,   442,   443,   444,    23,   374,
   101,   580,   419,   377,   581,   589,   441,   442,   443,   444,
   424,   422,   545,     0,     0,   415,   267,   428,   431,   227,
   228,   229,   268,   269,   586,   410,   270,   288,   288,   288,
   417,   288,   288,   288,     0,     0,   288,   364,   368,   371,
   376,   379,   382,   385,   389,     0,   389,   389,   273,   274,
     0,   259,     0,   261,   276,     0,   264,   265,   277,     0,
   561,   562,   563,   278,   279,     0,     0,     0,     0,   267,
     0,     0,     0,   508,     0,   268,   269,     0,     0,   270,
     0,   267,     0,     0,   564,   565,   566,   268,   269,   567,
     0,   270,   102,     0,     0,     0,   572,   271,     0,     0,
     0,   273,   272,   441,   442,   443,   444,     0,     0,   429,
   432,   277,     0,   273,   274,   275,   278,   279,     0,   276,
   588,     0,     0,   277,   327,     0,   505,     0,   278,   279,
   598,   399,     0,     0,   402,     0,   404,   405,   328,   329,
   267,     0,     0,   411,     0,     0,   268,   269,   416,     0,
   270,   604,   420,   421,     0,     0,   271,   441,   442,   443,
   444,   272,     0,     0,     0,     0,     0,     0,   603,   267,
     0,     0,   273,   274,   275,   268,   269,     0,   276,   270,
     0,     0,   277,   327,     0,   271,     0,   278,   279,     0,
   272,     0,     0,     0,     0,     0,     0,   335,   329,   267,
     0,   273,   274,   275,     0,   268,   269,   276,     0,   270,
     0,   277,   327,     0,     0,   271,   278,   279,     0,     0,
   272,     0,     0,     0,     0,     0,   347,   329,   267,     0,
     0,   273,   274,   275,   268,   269,     0,   276,   270,     0,
     0,   277,   327,     0,   271,     0,   278,   279,     0,   272,
     0,     0,     0,     0,     0,     0,   527,   329,   267,     0,
   273,   274,   275,     0,   268,   269,   276,     0,   270,     0,
   277,   327,     0,     0,   271,   278,   279,     0,     0,   272,
     0,     0,     0,     0,     0,   529,   329,     0,     0,     0,
   273,   274,   275,     0,     0,     0,   276,     0,     0,     0,
   277,   327,     0,     0,     0,   278,   279,     0,     0,     0,
     0,     0,   267,     0,     2,   534,   329,     4,   268,   269,
     5,     0,   270,     6,     7,     0,     9,     0,   271,     0,
     0,    10,     0,   272,    11,    12,     0,     0,     0,     0,
    13,    14,    15,     0,   273,   274,   275,     0,    17,    18,
   276,    19,     0,    20,   277,     0,   267,     0,     2,   278,
   279,     4,   268,   269,     5,     0,   270,     6,     7,   280,
     9,     0,   271,     0,     0,    10,     0,   272,    11,    12,
     0,     0,     0,     0,    13,    14,    15,     0,   273,   274,
   275,     0,    17,    18,   276,    19,     0,    20,   277,     0,
   267,     0,     2,   278,   279,     4,   268,   269,     5,     0,
   270,     6,     7,   321,     9,     0,   271,     0,     0,    10,
     0,   272,    11,    12,     0,     0,     0,     0,    13,    14,
    15,     0,   273,   274,   275,     0,    17,    18,   276,    19,
     0,    20,   277,     0,   267,     0,     2,   278,   279,     4,
   268,   269,     5,     0,   270,     6,     7,   504,     9,     0,
   271,     0,     0,    10,     0,   272,    11,    12,     0,     0,
     0,     0,    13,    14,    15,     0,   273,   274,   275,     0,
    17,    18,   276,    19,     0,    20,   277,   267,     0,     0,
     0,   278,   279,   268,   269,     0,     0,   270,     0,     0,
     0,   518,     0,   271,     0,   267,     0,   267,   272,     0,
     0,   268,   269,   268,   269,   270,     0,   270,     0,   273,
   274,   275,     0,   271,     0,   276,   322,     0,   272,   277,
     0,     0,     0,     0,   278,   279,     0,   273,   274,   273,
   274,   275,     0,   276,   323,   276,   322,   277,     0,   277,
   267,     0,   278,   279,   278,   279,   268,   269,     0,     0,
   270,     0,   520,     0,   522,     0,   271,     0,     0,     0,
   267,   272,     0,     0,     0,     0,   268,   269,     0,     0,
   270,     0,   273,   274,   275,     0,   271,     0,   276,     0,
     0,   272,   277,     0,     0,     0,     0,   278,   279,   267,
     0,     0,   273,   274,   275,   268,   269,   289,   276,   270,
     0,     0,   277,     0,     0,   271,     0,   278,   279,   267,
   272,     0,     0,     0,     0,   268,   269,   291,     0,   270,
     0,   273,   274,   275,     0,   271,     0,   276,     0,     0,
   272,   277,     0,     0,     0,     0,   278,   279,   267,     0,
     0,   273,   274,   275,   268,   269,   292,   276,   270,     0,
     0,   277,     0,     0,   271,     0,   278,   279,   267,   272,
     0,     0,     0,     0,   268,   269,   293,     0,   270,     0,
   273,   274,   275,     0,   271,     0,   276,     0,     0,   272,
   277,     0,     0,     0,     0,   278,   279,   267,     0,     0,
   273,   274,   275,   268,   269,   326,   276,   270,     0,     0,
   277,     0,     0,   271,     0,   278,   279,   267,   272,     0,
     0,     0,     0,   268,   269,   334,     0,   270,     0,   273,
   274,   275,     0,   271,     0,   276,     0,     0,   272,   277,
     0,     0,     0,     0,   278,   279,   267,     0,     0,   273,
   274,   275,   268,   269,   345,   276,   270,     0,     0,   277,
     0,     0,   271,     0,   278,   279,   267,   272,     0,     0,
     0,     0,   268,   269,   346,     0,   270,     0,   273,   274,
   275,     0,   271,     0,   276,     0,     0,   272,   277,     0,
     0,     0,     0,   278,   279,   267,     0,     0,   273,   274,
   275,   268,   269,   506,   276,   270,     0,     0,   277,     0,
     0,   271,     0,   278,   279,   267,   272,     0,     0,     0,
     0,   268,   269,   510,     0,   270,     0,   273,   274,   275,
     0,   271,     0,   276,     0,     0,   272,   277,     0,     0,
     0,     0,   278,   279,   267,     0,     0,   273,   274,   275,
   268,   269,   516,   276,   270,     0,     0,   277,     0,     0,
   271,     0,   278,   279,   267,   272,     0,     0,     0,     0,
   268,   269,   517,     0,   270,     0,   273,   274,   275,     0,
   271,     0,   276,     0,     0,   272,   277,     0,     0,     0,
     0,   278,   279,   267,     0,     0,   273,   274,   275,   268,
   269,   523,   276,   270,     0,     0,   277,     0,     0,   271,
     0,   278,   279,   267,   272,     0,     0,     0,     0,   268,
   269,   528,     0,   270,     0,   273,   274,   275,     0,   271,
     0,   276,   267,     0,   272,   277,     0,     0,   268,   269,
   278,   279,   270,     0,     0,   273,   274,   275,   339,     0,
   532,   276,   340,     0,     0,   277,     0,   341,     0,   267,
   278,   279,     0,     0,   273,   268,   269,     0,     0,   270,
   533,   267,     0,     0,   277,     0,     0,   268,   269,   278,
   279,   270,     0,   441,   442,   443,   444,     0,     0,   531,
     0,   273,   274,   540,     0,     0,     0,   276,     0,     0,
     0,   277,     0,   273,   274,   267,   278,   279,     0,   276,
     0,   268,   269,   277,     0,   270,   593,   267,   278,   279,
     0,     0,     0,   268,   269,   267,     0,   270,   600,     0,
     0,   268,   269,     0,     0,   270,   267,   273,   441,   442,
   443,   444,   268,   269,   267,   584,   270,   277,   547,   273,
   268,   269,   278,   279,   270,     0,     0,   273,     0,   277,
     0,     0,   585,     0,   278,   279,     0,   277,   273,     0,
     0,     0,   278,   279,   507,     0,   273,     0,   277,     0,
     0,     0,   519,   278,   279,     0,   277,     0,   267,     0,
   267,   278,   279,   521,   268,   269,   268,   269,   270,     0,
   270,   524,   267,   441,   442,   443,   444,     0,   268,   269,
     0,     0,   270,   581,     0,     0,     0,     0,     0,   267,
   273,   267,   273,     0,     0,   268,   269,   268,   269,   270,
   277,   270,   277,   267,   273,   278,   279,   278,   279,   268,
   269,     0,     0,   270,   277,   525,     0,   526,     0,   278,
   279,   273,     0,   273,     0,     0,     0,     0,     0,   530,
     0,   277,     0,   277,   267,   273,   278,   279,   278,   279,
   268,   269,     0,     0,   270,   277,   590,   267,   591,     0,
   278,   279,     0,   268,   269,   267,     0,   270,     0,     0,
   592,   268,   269,     0,     0,   270,   273,   267,     0,     0,
     0,     0,     0,   268,   269,     0,   277,   270,     0,   273,
     0,   278,   279,     0,     0,     0,     0,   273,     0,   277,
     0,   594,     0,     0,   278,   279,     0,   277,     0,   273,
     0,     0,   278,   279,   595,     0,     0,     0,     0,   277,
     0,     0,   596,     0,   278,   279,     0,     0,     0,     0,
     0,     0,     0,   454,   599,   455,   456,   457,   458,   459,
   460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
   470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
   480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
   490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
   500,   501,   606,     0,     0,     0,     0,     0,     0,     2,
     3,     0,     4,     0,     0,     5,     0,     0,     6,     7,
     8,     9,     0,     0,     0,     0,    10,     0,     0,    11,
    12,     0,     0,     0,     0,    13,    14,    15,     0,     0,
     0,     0,    16,    17,    18,     0,    19,     0,    20,    44,
    45,     0,    46,    47,    48,    49,     0,    50,    51,    52,
     0,    53,     0,     0,     0,    54,    55,    56,    57,    58,
    59,    60,     0,    61,    62,    63,    64,    65,     0,    66,
     0,     0,    67,    68,    69,     0,    70,     0,    71,    72
};

static const short yycheck[] = {   225,
     2,     3,     4,     5,     6,     7,    56,    57,     5,    11,
    12,    13,    14,    15,    16,    17,    18,    19,   262,   295,
   401,   297,   266,   305,     4,     5,     5,   408,   304,     5,
   306,     5,   214,   309,   310,   311,     5,   263,    61,   315,
   276,   277,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,     3,     4,     5,     6,    55,    49,    50,    51,    59,
    61,    61,    61,    61,    63,    61,    66,    66,    63,    62,
    66,   267,     2,     3,     4,     5,     6,     7,   274,   275,
   276,    11,    12,    13,    14,    15,    16,    17,    18,    19,
     5,   224,   294,     4,     5,    61,    11,    12,     5,    61,
    15,   303,    55,    55,    11,    12,    21,    59,    15,    61,
    25,    63,    61,    61,    66,    30,    10,    61,    71,   270,
    66,    61,    37,     9,   257,   258,    20,   260,    61,   262,
    37,   327,    47,   266,    61,    14,    22,    52,    53,    61,
    47,    20,    61,    61,    55,    52,    53,    62,    59,    61,
    36,    61,   398,   417,   400,    62,    61,    61,   422,    61,
    61,   407,    61,   409,    61,    61,   412,   413,   414,    61,
    61,    61,   418,   419,    61,   576,    62,    61,   329,    49,
    50,    51,   583,   113,    61,   115,    61,   117,    61,   119,
    61,   121,    62,   123,     9,   125,    60,   127,    61,   129,
    61,   131,    61,   133,   355,   356,   136,   358,   138,    61,
   140,    61,   142,    61,   144,    61,   146,    61,   148,    61,
   150,    61,   152,    61,   154,    59,   156,    59,   158,    36,
   160,    61,   162,    59,   164,    60,    22,   167,    61,    54,
    55,    56,    57,    61,    61,   267,   268,   269,   270,   271,
   272,   273,   274,   555,   276,   277,   552,   553,   554,    61,
   556,   557,   558,    61,   397,    61,    61,   569,    54,    55,
    56,    57,   568,   406,    61,    60,     6,   410,    54,    55,
    56,    57,   415,    61,   417,     0,    62,    61,   439,   422,
   441,   442,   443,   444,    54,    55,    56,    57,     1,   270,
   322,   559,   316,   270,    64,    65,    54,    55,    56,    57,
   322,   319,    60,    -1,    -1,   312,     5,   339,   340,   184,
   185,   186,    11,    12,   570,   307,    15,   573,   574,   575,
   314,   577,   578,   579,    -1,    -1,   582,   267,   268,   269,
   270,   271,   272,   273,   274,    -1,   276,   277,    37,    38,
    -1,   216,    -1,   218,    43,    -1,   221,   222,    47,    -1,
   511,   512,   513,    52,    53,    -1,    -1,    -1,    -1,     5,
    -1,    -1,    -1,    62,    -1,    11,    12,    -1,    -1,    15,
    -1,     5,    -1,    -1,   535,   536,   537,    11,    12,   540,
    -1,    15,   322,    -1,    -1,    -1,   547,    21,    -1,    -1,
    -1,    37,    26,    54,    55,    56,    57,    -1,    -1,   339,
   340,    47,    -1,    37,    38,    39,    52,    53,    -1,    43,
   571,    -1,    -1,    47,    48,    -1,    62,    -1,    52,    53,
   581,   296,    -1,    -1,   299,    -1,   301,   302,    62,    63,
     5,    -1,    -1,   308,    -1,    -1,    11,    12,   313,    -1,
    15,   602,   317,   318,    -1,    -1,    21,    54,    55,    56,
    57,    26,    -1,    -1,    -1,    -1,    -1,    -1,    65,     5,
    -1,    -1,    37,    38,    39,    11,    12,    -1,    43,    15,
    -1,    -1,    47,    48,    -1,    21,    -1,    52,    53,    -1,
    26,    -1,    -1,    -1,    -1,    -1,    -1,    62,    63,     5,
    -1,    37,    38,    39,    -1,    11,    12,    43,    -1,    15,
    -1,    47,    48,    -1,    -1,    21,    52,    53,    -1,    -1,
    26,    -1,    -1,    -1,    -1,    -1,    62,    63,     5,    -1,
    -1,    37,    38,    39,    11,    12,    -1,    43,    15,    -1,
    -1,    47,    48,    -1,    21,    -1,    52,    53,    -1,    26,
    -1,    -1,    -1,    -1,    -1,    -1,    62,    63,     5,    -1,
    37,    38,    39,    -1,    11,    12,    43,    -1,    15,    -1,
    47,    48,    -1,    -1,    21,    52,    53,    -1,    -1,    26,
    -1,    -1,    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,
    37,    38,    39,    -1,    -1,    -1,    43,    -1,    -1,    -1,
    47,    48,    -1,    -1,    -1,    52,    53,    -1,    -1,    -1,
    -1,    -1,     5,    -1,     7,    62,    63,    10,    11,    12,
    13,    -1,    15,    16,    17,    -1,    19,    -1,    21,    -1,
    -1,    24,    -1,    26,    27,    28,    -1,    -1,    -1,    -1,
    33,    34,    35,    -1,    37,    38,    39,    -1,    41,    42,
    43,    44,    -1,    46,    47,    -1,     5,    -1,     7,    52,
    53,    10,    11,    12,    13,    -1,    15,    16,    17,    62,
    19,    -1,    21,    -1,    -1,    24,    -1,    26,    27,    28,
    -1,    -1,    -1,    -1,    33,    34,    35,    -1,    37,    38,
    39,    -1,    41,    42,    43,    44,    -1,    46,    47,    -1,
     5,    -1,     7,    52,    53,    10,    11,    12,    13,    -1,
    15,    16,    17,    62,    19,    -1,    21,    -1,    -1,    24,
    -1,    26,    27,    28,    -1,    -1,    -1,    -1,    33,    34,
    35,    -1,    37,    38,    39,    -1,    41,    42,    43,    44,
    -1,    46,    47,    -1,     5,    -1,     7,    52,    53,    10,
    11,    12,    13,    -1,    15,    16,    17,    62,    19,    -1,
    21,    -1,    -1,    24,    -1,    26,    27,    28,    -1,    -1,
    -1,    -1,    33,    34,    35,    -1,    37,    38,    39,    -1,
    41,    42,    43,    44,    -1,    46,    47,     5,    -1,    -1,
    -1,    52,    53,    11,    12,    -1,    -1,    15,    -1,    -1,
    -1,    62,    -1,    21,    -1,     5,    -1,     5,    26,    -1,
    -1,    11,    12,    11,    12,    15,    -1,    15,    -1,    37,
    38,    39,    -1,    21,    -1,    43,    44,    -1,    26,    47,
    -1,    -1,    -1,    -1,    52,    53,    -1,    37,    38,    37,
    38,    39,    -1,    43,    62,    43,    44,    47,    -1,    47,
     5,    -1,    52,    53,    52,    53,    11,    12,    -1,    -1,
    15,    -1,    62,    -1,    62,    -1,    21,    -1,    -1,    -1,
     5,    26,    -1,    -1,    -1,    -1,    11,    12,    -1,    -1,
    15,    -1,    37,    38,    39,    -1,    21,    -1,    43,    -1,
    -1,    26,    47,    -1,    -1,    -1,    -1,    52,    53,     5,
    -1,    -1,    37,    38,    39,    11,    12,    62,    43,    15,
    -1,    -1,    47,    -1,    -1,    21,    -1,    52,    53,     5,
    26,    -1,    -1,    -1,    -1,    11,    12,    62,    -1,    15,
    -1,    37,    38,    39,    -1,    21,    -1,    43,    -1,    -1,
    26,    47,    -1,    -1,    -1,    -1,    52,    53,     5,    -1,
    -1,    37,    38,    39,    11,    12,    62,    43,    15,    -1,
    -1,    47,    -1,    -1,    21,    -1,    52,    53,     5,    26,
    -1,    -1,    -1,    -1,    11,    12,    62,    -1,    15,    -1,
    37,    38,    39,    -1,    21,    -1,    43,    -1,    -1,    26,
    47,    -1,    -1,    -1,    -1,    52,    53,     5,    -1,    -1,
    37,    38,    39,    11,    12,    62,    43,    15,    -1,    -1,
    47,    -1,    -1,    21,    -1,    52,    53,     5,    26,    -1,
    -1,    -1,    -1,    11,    12,    62,    -1,    15,    -1,    37,
    38,    39,    -1,    21,    -1,    43,    -1,    -1,    26,    47,
    -1,    -1,    -1,    -1,    52,    53,     5,    -1,    -1,    37,
    38,    39,    11,    12,    62,    43,    15,    -1,    -1,    47,
    -1,    -1,    21,    -1,    52,    53,     5,    26,    -1,    -1,
    -1,    -1,    11,    12,    62,    -1,    15,    -1,    37,    38,
    39,    -1,    21,    -1,    43,    -1,    -1,    26,    47,    -1,
    -1,    -1,    -1,    52,    53,     5,    -1,    -1,    37,    38,
    39,    11,    12,    62,    43,    15,    -1,    -1,    47,    -1,
    -1,    21,    -1,    52,    53,     5,    26,    -1,    -1,    -1,
    -1,    11,    12,    62,    -1,    15,    -1,    37,    38,    39,
    -1,    21,    -1,    43,    -1,    -1,    26,    47,    -1,    -1,
    -1,    -1,    52,    53,     5,    -1,    -1,    37,    38,    39,
    11,    12,    62,    43,    15,    -1,    -1,    47,    -1,    -1,
    21,    -1,    52,    53,     5,    26,    -1,    -1,    -1,    -1,
    11,    12,    62,    -1,    15,    -1,    37,    38,    39,    -1,
    21,    -1,    43,    -1,    -1,    26,    47,    -1,    -1,    -1,
    -1,    52,    53,     5,    -1,    -1,    37,    38,    39,    11,
    12,    62,    43,    15,    -1,    -1,    47,    -1,    -1,    21,
    -1,    52,    53,     5,    26,    -1,    -1,    -1,    -1,    11,
    12,    62,    -1,    15,    -1,    37,    38,    39,    -1,    21,
    -1,    43,     5,    -1,    26,    47,    -1,    -1,    11,    12,
    52,    53,    15,    -1,    -1,    37,    38,    39,    21,    -1,
    62,    43,    25,    -1,    -1,    47,    -1,    30,    -1,     5,
    52,    53,    -1,    -1,    37,    11,    12,    -1,    -1,    15,
    62,     5,    -1,    -1,    47,    -1,    -1,    11,    12,    52,
    53,    15,    -1,    54,    55,    56,    57,    -1,    -1,    62,
    -1,    37,    38,    64,    -1,    -1,    -1,    43,    -1,    -1,
    -1,    47,    -1,    37,    38,     5,    52,    53,    -1,    43,
    -1,    11,    12,    47,    -1,    15,    62,     5,    52,    53,
    -1,    -1,    -1,    11,    12,     5,    -1,    15,    62,    -1,
    -1,    11,    12,    -1,    -1,    15,     5,    37,    54,    55,
    56,    57,    11,    12,     5,    45,    15,    47,    64,    37,
    11,    12,    52,    53,    15,    -1,    -1,    37,    -1,    47,
    -1,    -1,    62,    -1,    52,    53,    -1,    47,    37,    -1,
    -1,    -1,    52,    53,    62,    -1,    37,    -1,    47,    -1,
    -1,    -1,    62,    52,    53,    -1,    47,    -1,     5,    -1,
     5,    52,    53,    62,    11,    12,    11,    12,    15,    -1,
    15,    62,     5,    54,    55,    56,    57,    -1,    11,    12,
    -1,    -1,    15,    64,    -1,    -1,    -1,    -1,    -1,     5,
    37,     5,    37,    -1,    -1,    11,    12,    11,    12,    15,
    47,    15,    47,     5,    37,    52,    53,    52,    53,    11,
    12,    -1,    -1,    15,    47,    62,    -1,    62,    -1,    52,
    53,    37,    -1,    37,    -1,    -1,    -1,    -1,    -1,    62,
    -1,    47,    -1,    47,     5,    37,    52,    53,    52,    53,
    11,    12,    -1,    -1,    15,    47,    62,     5,    62,    -1,
    52,    53,    -1,    11,    12,     5,    -1,    15,    -1,    -1,
    62,    11,    12,    -1,    -1,    15,    37,     5,    -1,    -1,
    -1,    -1,    -1,    11,    12,    -1,    47,    15,    -1,    37,
    -1,    52,    53,    -1,    -1,    -1,    -1,    37,    -1,    47,
    -1,    62,    -1,    -1,    52,    53,    -1,    47,    -1,    37,
    -1,    -1,    52,    53,    62,    -1,    -1,    -1,    -1,    47,
    -1,    -1,    62,    -1,    52,    53,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     5,    62,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,     0,    -1,    -1,    -1,    -1,    -1,    -1,     7,
     8,    -1,    10,    -1,    -1,    13,    -1,    -1,    16,    17,
    18,    19,    -1,    -1,    -1,    -1,    24,    -1,    -1,    27,
    28,    -1,    -1,    -1,    -1,    33,    34,    35,    -1,    -1,
    -1,    -1,    40,    41,    42,    -1,    44,    -1,    46,     7,
     8,    -1,    10,    11,    12,    13,    -1,    15,    16,    17,
    -1,    19,    -1,    -1,    -1,    23,    24,    25,    26,    27,
    28,    29,    -1,    31,    32,    33,    34,    35,    -1,    37,
    -1,    -1,    40,    41,    42,    -1,    44,    -1,    46,    47
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 252 "parser.y"
{;
    break;}
case 5:
#line 254 "parser.y"
{
                            SCENE->atmosphere()->addObject (yyvsp[0].ptAtmObject);
                          ;
    break;}
case 6:
#line 258 "parser.y"
{
                            _ptWorld->add (yyvsp[0].ptObject);
                          ;
    break;}
case 7:
#line 264 "parser.y"
{;
    break;}
case 8:
#line 266 "parser.y"
{;
    break;}
case 9:
#line 268 "parser.y"
{;
    break;}
case 10:
#line 270 "parser.y"
{;
    break;}
case 11:
#line 272 "parser.y"
{;
    break;}
case 12:
#line 274 "parser.y"
{;
    break;}
case 13:
#line 276 "parser.y"
{;
    break;}
case 14:
#line 278 "parser.y"
{;
    break;}
case 15:
#line 280 "parser.y"
{;
    break;}
case 16:
#line 282 "parser.y"
{;
    break;}
case 17:
#line 284 "parser.y"
{;
    break;}
case 18:
#line 286 "parser.y"
{;
    break;}
case 19:
#line 288 "parser.y"
{;
    break;}
case 20:
#line 290 "parser.y"
{;
    break;}
case 21:
#line 292 "parser.y"
{;
    break;}
case 22:
#line 294 "parser.y"
{;
    break;}
case 23:
#line 296 "parser.y"
{;
    break;}
case 24:
#line 298 "parser.y"
{;
    break;}
case 25:
#line 300 "parser.y"
{;
    break;}
case 26:
#line 302 "parser.y"
{;
    break;}
case 27:
#line 304 "parser.y"
{;
    break;}
case 28:
#line 306 "parser.y"
{;
    break;}
case 29:
#line 308 "parser.y"
{;
    break;}
case 30:
#line 310 "parser.y"
{;
    break;}
case 31:
#line 312 "parser.y"
{;
    break;}
case 32:
#line 314 "parser.y"
{;
    break;}
case 33:
#line 316 "parser.y"
{;
    break;}
case 34:
#line 318 "parser.y"
{;
    break;}
case 35:
#line 320 "parser.y"
{;
    break;}
case 36:
#line 324 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 37:
#line 328 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 38:
#line 332 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
			  ;
    break;}
case 39:
#line 336 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 40:
#line 340 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 41:
#line 344 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 42:
#line 348 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 43:
#line 352 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 44:
#line 356 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 45:
#line 360 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 46:
#line 364 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 47:
#line 368 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 48:
#line 372 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 49:
#line 376 "parser.y"
{
                            ((TCsg*) yyvsp[0].ptObject)->setOperation (FX_CSG_UNION);
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 50:
#line 381 "parser.y"
{
                            ((TCsg*) yyvsp[0].ptObject)->setOperation (FX_CSG_INTERSECTION);
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 51:
#line 386 "parser.y"
{
                            ((TCsg*) yyvsp[0].ptObject)->setOperation (FX_CSG_DIFFERENCE);
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 52:
#line 393 "parser.y"
{
			    yyval.dValue = yyvsp[0].dValue;
			  ;
    break;}
case 53:
#line 397 "parser.y"
{
                            if ( _tFunctionMap.find (yyvsp[-2].acIdent) == _tFunctionMap.end() )
                            {
			      yyerror ("function does not exist");
			      exit (1);
                            }

			    _pfFunction = _tFunctionMap [yyvsp[-2].acIdent];

			    yyval.dValue = (*_pfFunction)();
			  ;
    break;}
case 54:
#line 409 "parser.y"
{
			    yyval.dValue = yyvsp[-2].dValue + yyvsp[0].dValue;
			  ;
    break;}
case 55:
#line 413 "parser.y"
{
			    yyval.dValue = yyvsp[-2].dValue - yyvsp[0].dValue;
			  ;
    break;}
case 56:
#line 417 "parser.y"
{
			    yyval.dValue = yyvsp[-2].dValue * yyvsp[0].dValue;
			  ;
    break;}
case 57:
#line 421 "parser.y"
{
			    yyval.dValue = yyvsp[-2].dValue / yyvsp[0].dValue;
			  ;
    break;}
case 58:
#line 425 "parser.y"
{
			    yyval.dValue = -yyvsp[0].dValue;
			  ;
    break;}
case 59:
#line 429 "parser.y"
{
			    yyval.dValue = yyvsp[-1].dValue;
			  ;
    break;}
case 60:
#line 434 "parser.y"
{
			    _tColor.setRed (yyvsp[-5].dValue);
			    _tColor.setGreen (yyvsp[-3].dValue);
			    _tColor.setBlue (yyvsp[-1].dValue);
			    yyval.ptColor = (TColor*) &_tColor;
			  ;
    break;}
case 61:
#line 443 "parser.y"
{
			    _tVector.set (yyvsp[-5].dValue, yyvsp[-3].dValue, yyvsp[-1].dValue);
			    yyval.ptVector = &_tVector;
			  ;
    break;}
case 62:
#line 450 "parser.y"
{
			    _tVector2.set (yyvsp[-3].dValue, yyvsp[-1].dValue);
			    yyval.ptVector2 = &_tVector2;
			  ;
    break;}
case 63:
#line 457 "parser.y"
{
			    yyval.ptVector = yyvsp[0].ptVector;
			  ;
    break;}
case 64:
#line 461 "parser.y"
{
			    yyval.ptVector = yyvsp[0].ptVector;
			  ;
    break;}
case 65:
#line 467 "parser.y"
{
			    strcpy (yyval.acIdent, "");
			  ;
    break;}
case 66:
#line 471 "parser.y"
{
			    strcpy (yyval.acIdent, yyvsp[0].acIdent);
			  ;
    break;}
case 67:
#line 477 "parser.y"
{
			    strcpy (yyval.acIdent, "");
			  ;
    break;}
case 68:
#line 481 "parser.y"
{
                            if ( _tObjectMap.find (yyvsp[0].acIdent) == _tObjectMap.end() )
                            {
			      yyerror ("trying to extend from non existing object");
			      exit (1);
                            }
                            _ptParent = _tObjectMap [yyvsp[0].acIdent];
			    strcpy (yyval.acIdent, _ptParent->className().c_str());
			  ;
    break;}
case 69:
#line 491 "parser.y"
{
			    _ptParent = NULL;
			    strcpy (yyval.acIdent, yyvsp[0].acIdent);
			  ;
    break;}
case 72:
#line 502 "parser.y"
{
			    /* Print out an attribute list [names w/types] for
			       the current object */ 
			    TAttributeList   tal;
			  
			    DATA->getAttributeList (tal);
			    
			    cout << "Requested attribute list for \""
				 << DATA->className() << "\"" << endl;
			    
			    for(TAttributeList::const_iterator i = tal.begin();
				i != tal.end();
				++i)
			    {
			      cout << "  ("
				   << EAttribType_to_str (i->second)
				   << ") "
				   << i->first << endl;
			    }
			  ;
    break;}
case 73:
#line 523 "parser.y"
{
			    /* Print out the type of the given attribute */
			    TAttributeList                   tal;
			    TAttributeList::const_iterator   loc;
			    
			    DATA->getAttributeList (tal);
			    
			    loc = tal.find (string(yyvsp[-1].acIdent)); 
			    
			    cout << "Requested attribute type for \"" << yyvsp[-1].acIdent
				 << "\" in \"" << DATA->className() << "\": ";
			    
			    if ( loc != tal.end() )
			    {
			      cout << EAttribType_to_str (loc->second) << endl;
			    }
			    else
			    {
			      cout << "no such attribute" << endl;
			    }
			  ;
    break;}
case 74:
#line 545 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptVector;
			    SetParameter (yyvsp[-1].acIdent, FX_VECTOR);
                          ;
    break;}
case 75:
#line 550 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptVector2;
			    SetParameter (yyvsp[-1].acIdent, FX_VECTOR2);
			  ;
    break;}
case 76:
#line 555 "parser.y"
{
			    _nAttrib.dValue = yyvsp[0].dValue;
			    SetParameter (yyvsp[-1].acIdent, FX_REAL);
			  ;
    break;}
case 77:
#line 560 "parser.y"
{
			    _nAttrib.gValue = yyvsp[0].gValue;
			    SetParameter (yyvsp[-1].acIdent, FX_BOOL);
			  ;
    break;}
case 78:
#line 565 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].acIdent;
			    SetParameter (yyvsp[-1].acIdent, FX_STRING);
			  ;
    break;}
case 79:
#line 570 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptPattern;
			    SetParameter (yyvsp[-1].acIdent, MapClassToAttribute ((TBaseClass*) yyvsp[0].ptPattern));
                          ;
    break;}
case 80:
#line 575 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptPerturbation;
			    SetParameter (yyvsp[-1].acIdent, MapClassToAttribute ((TBaseClass*) yyvsp[0].ptPerturbation));
                          ;
    break;}
case 81:
#line 580 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptColor;
			    SetParameter (yyvsp[-1].acIdent, FX_COLOR);
			  ;
    break;}
case 82:
#line 585 "parser.y"
{
			    UpdateAttribute (yyvsp[-1].acIdent, yyvsp[0].acIdent);
			  ;
    break;}
case 83:
#line 589 "parser.y"
{
			    UpdateAttribute ("color", yyvsp[0].acIdent);
			  ;
    break;}
case 84:
#line 593 "parser.y"
{
			    _nAttrib.dValue = yyvsp[0].dValue;
			    SetParameter ("color", FX_REAL);
			  ;
    break;}
case 85:
#line 598 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptColor;
			    SetParameter ("color", FX_COLOR);
			  ;
    break;}
case 86:
#line 603 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptPattern;
			    SetParameter ("color", FX_PATTERN);
                          ;
    break;}
case 87:
#line 608 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptVector;
			    SetParameter ("vector", FX_VECTOR);
			  ;
    break;}
case 88:
#line 613 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptCamera;
			    SetParameter ("camera", FX_CAMERA);
			  ;
    break;}
case 89:
#line 618 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptRenderer;
			    SetParameter ("renderer", FX_RENDERER);
			  ;
    break;}
case 90:
#line 623 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptBsdf;
			    SetParameter ("bsdf", FX_BSDF);
			  ;
    break;}
case 93:
#line 634 "parser.y"
{
			    ENTITY->translate (*yyvsp[0].ptVector);
			  ;
    break;}
case 94:
#line 638 "parser.y"
{
			    ENTITY->rotate (*yyvsp[0].ptVector);
			  ;
    break;}
case 95:
#line 642 "parser.y"
{
			    ENTITY->translate (*yyvsp[0].ptVector);
			  ;
    break;}
case 96:
#line 646 "parser.y"
{
			    ENTITY->rotate (*yyvsp[0].ptVector);
			  ;
    break;}
case 98:
#line 653 "parser.y"
{
			    VOLUME->scale (*yyvsp[0].ptVector, TVector (0, 0, 0));
			  ;
    break;}
case 102:
#line 664 "parser.y"
{
			    OBJECT->setMaterial (yyvsp[0].ptMaterial);
			  ;
    break;}
case 103:
#line 668 "parser.y"
{
			    OBJECT->addFilter (yyvsp[0].ptOFilter);
			  ;
    break;}
case 105:
#line 675 "parser.y"
{
			    DefineColor (yyvsp[-1].acIdent);
			  ;
    break;}
case 106:
#line 679 "parser.y"
{
                            _tColorMap [yyvsp[-5].acIdent] = _tColor;
			    _tTypeMap  [yyvsp[-5].acIdent] = FX_COLOR_CLASS;
                            
                            yyval.ptColor = &_tColor;
			  ;
    break;}
case 109:
#line 709 "parser.y"
{
			    _tColor.setRed (yyvsp[0].dValue);
			  ;
    break;}
case 110:
#line 713 "parser.y"
{
			    _tColor.setGreen (yyvsp[0].dValue);
			  ;
    break;}
case 111:
#line 717 "parser.y"
{
			    _tColor.setBlue (yyvsp[0].dValue);
			  ;
    break;}
case 112:
#line 723 "parser.y"
{
			    DefineVector (yyvsp[-1].acIdent);
			  ;
    break;}
case 113:
#line 727 "parser.y"
{
                            _tVectorMap [yyvsp[-5].acIdent] = _tVector;
			    _tTypeMap   [yyvsp[-5].acIdent] = FX_VECTOR_CLASS;
                            
                            yyval.ptVector = &_tVector;
			  ;
    break;}
case 114:
#line 736 "parser.y"
{
			    yyval.ptVector = InstanceVector (yyvsp[0].acIdent);
			  ;
    break;}
case 115:
#line 740 "parser.y"
{
                            _tVector = TVector (0, 0, 0);
			  ;
    break;}
case 116:
#line 744 "parser.y"
{
			    yyval.ptVector = (TVector*) &_tVector;
			  ;
    break;}
case 119:
#line 754 "parser.y"
{
			    _tVector.setX (yyvsp[0].dValue);
			  ;
    break;}
case 120:
#line 758 "parser.y"
{
			    _tVector.setY (yyvsp[0].dValue);
			  ;
    break;}
case 121:
#line 762 "parser.y"
{
			    _tVector.setZ (yyvsp[0].dValue);
			  ;
    break;}
case 122:
#line 768 "parser.y"
{
                            _tDataStack.push (TImageManager::_getImageIO ("tga"));
                          ;
    break;}
case 123:
#line 772 "parser.y"
{
			    yyval.ptImageIO = (TImageIO*) _tDataStack.POP();
			  ;
    break;}
case 126:
#line 782 "parser.y"
{
                            _ptImageIO = (TImageIO*) _tDataStack.POP();
                            delete _ptImageIO;
                            
                            _ptImageIO = TImageManager::_getImageIO (yyvsp[0].acIdent);
                            if ( !_ptImageIO )
                            {
                              yyerror ("Image output type not available");
                              exit (1);
                            }
                            _tDataStack.push (_ptImageIO);
			  ;
    break;}
case 128:
#line 798 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Scene");
			  ;
    break;}
case 129:
#line 802 "parser.y"
{
			    yyval.ptScene = (TScene*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 130:
#line 808 "parser.y"
{
			    yyval.ptScene = (TScene*) InstanceObject (yyvsp[0].acIdent);
			    TSceneRT::_ptParsedScene = yyval.ptScene;
			  ;
    break;}
case 131:
#line 813 "parser.y"
{
//			    CreateObject ($1, "Scene");
			    _ptData = TSceneRT::_ptParsedScene;
			    _tDataStack.push (_ptData);
			  ;
    break;}
case 132:
#line 819 "parser.y"
{
			    yyval.ptScene = (TScene*) _tDataStack.POP();
//			    $$ = &tScene;
			  ;
    break;}
case 135:
#line 830 "parser.y"
{
			    SCENE->addLight (yyvsp[0].ptLight);
			  ;
    break;}
case 136:
#line 834 "parser.y"
{
			    SCENE->addImageFilter (yyvsp[0].ptIFilter);
			  ;
    break;}
case 137:
#line 838 "parser.y"
{
			    SCENE->setImageOutput (yyvsp[0].ptImageIO);
			  ;
    break;}
case 139:
#line 845 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "PointLight");
			  ;
    break;}
case 140:
#line 849 "parser.y"
{
			    yyval.ptLight = (TLight*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 141:
#line 855 "parser.y"
{
			    yyval.ptLight = (TLight*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 142:
#line 859 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "PointLight");
			  ;
    break;}
case 143:
#line 863 "parser.y"
{
			    yyval.ptLight = (TLight*) _tDataStack.POP();
			  ;
    break;}
case 144:
#line 869 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Bsdf");
			  ;
    break;}
case 145:
#line 873 "parser.y"
{
			    yyval.ptBsdf = (TBsdf*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 146:
#line 879 "parser.y"
{
			    yyval.ptBsdf = (TBsdf*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 147:
#line 883 "parser.y"
{
                            CreateObject (yyvsp[0].acIdent, "Bsdf");
			  ;
    break;}
case 148:
#line 887 "parser.y"
{
                            yyval.ptBsdf = (TBsdf*) _tDataStack.POP();
			  ;
    break;}
case 149:
#line 893 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Raytracer");
			  ;
    break;}
case 150:
#line 897 "parser.y"
{
			    yyval.ptRenderer = (TRenderer*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 151:
#line 903 "parser.y"
{
			    yyval.ptRenderer = (TRenderer*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 152:
#line 907 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Raytracer");
			  ;
    break;}
case 153:
#line 911 "parser.y"
{
			    yyval.ptRenderer = (TRenderer*) _tDataStack.POP();
			  ;
    break;}
case 154:
#line 917 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Material");
			  ;
    break;}
case 155:
#line 921 "parser.y"
{
                            yyval.ptMaterial = (TMaterial*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 156:
#line 927 "parser.y"
{
			    yyval.ptMaterial = (TMaterial*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 157:
#line 931 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Material");
			  ;
    break;}
case 158:
#line 935 "parser.y"
{
			    yyval.ptMaterial = (TMaterial*) _tDataStack.POP();
			  ;
    break;}
case 159:
#line 941 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Pattern");
			  ;
    break;}
case 160:
#line 945 "parser.y"
{
                            yyval.ptPattern = (TPattern*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 161:
#line 951 "parser.y"
{
			    yyval.ptPattern = (TPattern*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 162:
#line 955 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Pattern");
			  ;
    break;}
case 163:
#line 959 "parser.y"
{
			    yyval.ptPattern = (TPattern*) _tDataStack.POP();
			  ;
    break;}
case 164:
#line 965 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Perturbation");
			  ;
    break;}
case 165:
#line 969 "parser.y"
{
                            yyval.ptPerturbation = (TPerturbation*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 166:
#line 975 "parser.y"
{
			    yyval.ptPerturbation = (TPerturbation*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 167:
#line 979 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Perturbation");
			  ;
    break;}
case 168:
#line 983 "parser.y"
{
			    yyval.ptPerturbation = (TPerturbation*) _tDataStack.POP();
			  ;
    break;}
case 169:
#line 989 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "");
			  ;
    break;}
case 170:
#line 993 "parser.y"
{
			    yyval.ptIFilter = (TImageFilter*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 171:
#line 999 "parser.y"
{
			    yyval.ptIFilter = (TImageFilter*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 172:
#line 1003 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "");
			  ;
    break;}
case 173:
#line 1007 "parser.y"
{
			    yyval.ptIFilter = (TImageFilter*) _tDataStack.POP();
			  ;
    break;}
case 174:
#line 1013 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "");
			  ;
    break;}
case 175:
#line 1017 "parser.y"
{
			    yyval.ptOFilter = (TObjectFilter*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 176:
#line 1023 "parser.y"
{
			    yyval.ptOFilter = (TObjectFilter*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 177:
#line 1027 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "");
			  ;
    break;}
case 178:
#line 1031 "parser.y"
{
			    yyval.ptOFilter = (TObjectFilter*) _tDataStack.POP();
			  ;
    break;}
case 179:
#line 1037 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "PinholeCamera");
			  ;
    break;}
case 180:
#line 1041 "parser.y"
{
			    yyval.ptCamera = (TCamera*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 181:
#line 1047 "parser.y"
{
			    yyval.ptCamera = (TCamera*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 182:
#line 1051 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "PinholeCamera");
			  ;
    break;}
case 183:
#line 1055 "parser.y"
{
			    yyval.ptCamera = (TCamera*) _tDataStack.POP();
			  ;
    break;}
case 184:
#line 1061 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "");
			  ;
    break;}
case 185:
#line 1065 "parser.y"
{
			    yyval.ptObject = (TObject*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 186:
#line 1071 "parser.y"
{
			    yyval.ptObject = (TObject*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 187:
#line 1075 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "");
			  ;
    break;}
case 188:
#line 1079 "parser.y"
{
			    yyval.ptObject = (TObject*) _tDataStack.POP();
			  ;
    break;}
case 189:
#line 1085 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Plane");
			  ;
    break;}
case 190:
#line 1089 "parser.y"
{
			    yyval.ptObject = (TPlane*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 191:
#line 1095 "parser.y"
{
			    yyval.ptObject = (TPlane*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 192:
#line 1099 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Plane");
			  ;
    break;}
case 193:
#line 1103 "parser.y"
{
			    yyval.ptObject = (TPlane*) _tDataStack.POP();
			  ;
    break;}
case 194:
#line 1109 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Sphere");
			  ;
    break;}
case 195:
#line 1113 "parser.y"
{
			    yyval.ptObject = (TSphere*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 196:
#line 1119 "parser.y"
{
			    yyval.ptObject = (TSphere*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 197:
#line 1123 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Sphere");
			  ;
    break;}
case 198:
#line 1127 "parser.y"
{
			    yyval.ptObject = (TSphere*) _tDataStack.POP();
			  ;
    break;}
case 199:
#line 1133 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Triangle");
			    _bVertices = 0;
			  ;
    break;}
case 200:
#line 1138 "parser.y"
{
			    if ( _bVertices != 3 )
			    {
			      yyerror ("wrong number of vertices in triangle");
			      exit (1);
			    }
			    yyval.ptObject = (TTriangle*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 201:
#line 1149 "parser.y"
{
			    yyval.ptObject = (TTriangle*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 202:
#line 1153 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Triangle");
			    _bVertices = 0;
			  ;
    break;}
case 203:
#line 1158 "parser.y"
{
			    if ( _bVertices != 3 )
			    {
			      yyerror ("wrong number of vertices in triangle");
			      exit (1);
			    }
			    yyval.ptObject = (TTriangle*) _tDataStack.POP();
			  ;
    break;}
case 206:
#line 1173 "parser.y"
{
			    TRIANGLE->setVertex (*yyvsp[0].ptVector);
			    _bVertices++;
			  ;
    break;}
case 208:
#line 1181 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "PhongTriangle");
			    _bVertices = 0;
			  ;
    break;}
case 209:
#line 1186 "parser.y"
{
			    if ( _bVertices != 3 )
			    {
			      yyerror ("wrong number of vertices in phong_triangle");
			      exit (1);
			    }
			    yyval.ptObject = (TPhongTriangle*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 210:
#line 1197 "parser.y"
{
			    yyval.ptObject = (TPhongTriangle*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 211:
#line 1201 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "PhongTriangle");
			    _bVertices = 0;
			  ;
    break;}
case 212:
#line 1206 "parser.y"
{
			    if ( _bVertices != 3 )
			    {
			      yyerror ("wrong number of vertices in phong_triangle");
			      exit (1);
			    }
			    yyval.ptObject = (TPhongTriangle*) _tDataStack.POP();
			  ;
    break;}
case 215:
#line 1221 "parser.y"
{
			    TRIANGLE->setVertex (*yyvsp[0].ptVector);
			    _bVertices++;
			  ;
    break;}
case 217:
#line 1229 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Rectangle");
			    _bVertices = 0;
			  ;
    break;}
case 218:
#line 1234 "parser.y"
{
			    if ( _bVertices != 4 )
			    {
			      yyerror ("wrong number of vertices in rectangle");
			      exit (1);
			    }
			    yyval.ptObject = (TRectangle*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 219:
#line 1245 "parser.y"
{
			    yyval.ptObject = (TRectangle*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 220:
#line 1249 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Rectangle");
			    _bVertices = 0;
			  ;
    break;}
case 221:
#line 1254 "parser.y"
{
			    if ( _bVertices != 4 )
			    {
			      yyerror ("wrong number of vertices in rectangle");
			      exit (1);
			    }
			    yyval.ptObject = (TRectangle*) _tDataStack.POP();
			  ;
    break;}
case 224:
#line 1269 "parser.y"
{
			    RECTANGLE->setVertex (*yyvsp[0].ptVector);
			    _bVertices++;
			  ;
    break;}
case 226:
#line 1277 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Circle");
			  ;
    break;}
case 227:
#line 1281 "parser.y"
{
			    yyval.ptObject = (TCircle*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 228:
#line 1287 "parser.y"
{
			    yyval.ptObject = (TCircle*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 229:
#line 1291 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Circle");
			  ;
    break;}
case 230:
#line 1295 "parser.y"
{
			    yyval.ptObject = (TCircle*) _tDataStack.POP();
			  ;
    break;}
case 233:
#line 1305 "parser.y"
{
			    AGGREGATE->add (yyvsp[0].ptObject);
			  ;
    break;}
case 235:
#line 1312 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Aggregate");
			  ;
    break;}
case 236:
#line 1316 "parser.y"
{
			    yyval.ptObject = (TAggregate*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 237:
#line 1322 "parser.y"
{
			    yyval.ptObject = (TAggregate*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 238:
#line 1326 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Aggregate");
			  ;
    break;}
case 239:
#line 1330 "parser.y"
{
			    yyval.ptObject = (TAggregate*) _tDataStack.POP();
			  ;
    break;}
case 240:
#line 1336 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "AtmConst");
			  ;
    break;}
case 241:
#line 1340 "parser.y"
{
			    yyval.ptAtmObject = (TAtmosphericObject*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 242:
#line 1346 "parser.y"
{
			    yyval.ptAtmObject = (TAtmosphericObject*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 243:
#line 1350 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "AtmConst");
			  ;
    break;}
case 244:
#line 1354 "parser.y"
{
			    yyval.ptAtmObject = (TAtmosphericObject*) _tDataStack.POP();
			  ;
    break;}
case 245:
#line 1360 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Box");
			  ;
    break;}
case 246:
#line 1364 "parser.y"
{
			    yyval.ptObject = (TBox*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 247:
#line 1370 "parser.y"
{
			    yyval.ptObject = (TBox*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 248:
#line 1374 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Box");
			  ;
    break;}
case 249:
#line 1378 "parser.y"
{
			    yyval.ptObject = (TBox*) _tDataStack.POP();
			  ;
    break;}
case 250:
#line 1384 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Cylinder");
			  ;
    break;}
case 251:
#line 1388 "parser.y"
{
			    yyval.ptObject = (TCylinder*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 252:
#line 1394 "parser.y"
{
			    yyval.ptObject = (TCylinder*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 253:
#line 1398 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Cylinder");
			  ;
    break;}
case 254:
#line 1402 "parser.y"
{
			    yyval.ptObject = (TCylinder*) _tDataStack.POP();
			  ;
    break;}
case 255:
#line 1408 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Cone");
			  ;
    break;}
case 256:
#line 1412 "parser.y"
{
			    yyval.ptObject = (TCone*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 257:
#line 1418 "parser.y"
{
			    yyval.ptObject = (TCone*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 258:
#line 1422 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Cone");
			  ;
    break;}
case 259:
#line 1426 "parser.y"
{
			    yyval.ptObject = (TCone*) _tDataStack.POP();
	       		  ;
    break;}
case 260:
#line 1432 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Torus");
			  ;
    break;}
case 261:
#line 1436 "parser.y"
{
			    yyval.ptObject = (TTorus*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 262:
#line 1442 "parser.y"
{
			    yyval.ptObject = (TTorus*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 263:
#line 1446 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Torus");
			  ;
    break;}
case 264:
#line 1450 "parser.y"
{
			    yyval.ptObject = (TTorus*) _tDataStack.POP();
			  ;
    break;}
case 265:
#line 1456 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Mesh");
			  ;
    break;}
case 266:
#line 1460 "parser.y"
{
			    yyval.ptObject = (TMeshObject*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 267:
#line 1466 "parser.y"
{
			    yyval.ptObject = (TMeshObject*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 268:
#line 1470 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Mesh");
			  ;
    break;}
case 269:
#line 1474 "parser.y"
{
			    yyval.ptObject = (TMeshObject*) _tDataStack.POP();
			  ;
    break;}
case 272:
#line 1484 "parser.y"
{
			    MESH->addTriangle ((TTriangle*) yyvsp[0].ptObject);
                            delete yyvsp[0].ptObject;
			  ;
    break;}
case 274:
#line 1492 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Csg");
			  ;
    break;}
case 275:
#line 1496 "parser.y"
{
			    yyval.ptObject = (TCsg*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 276:
#line 1502 "parser.y"
{
			    yyval.ptObject = (TCsg*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 277:
#line 1506 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Csg");
			  ;
    break;}
case 278:
#line 1510 "parser.y"
{
			    yyval.ptObject = (TCsg*) _tDataStack.POP();
			  ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1569 "parser.y"


void rt_error (const char* pkcTEXT)
{

  cerr << endl << TSceneRT::_tInputFileName << "(" << TSceneRT::_dwLineNumber << ") Error: " << pkcTEXT << endl;

}  /* rt_error() */


void RT_InitParser (void)
{

  InitObjects();
  InitFunctions();

  _ptWorld = new TAggregate();
  
  TSceneRT::_ptParsedScene->setWorld (_ptWorld);
  
}  /* RT_InitParser() */


void RT_CloseParser (void)
{

  _tObjectMap.clear();

}  /* RT_CloseParser() */


void InitFunctions (void)
{

  _tFunctionMap ["rand"] = (double(*)(void)) &frand;

}  /* InitFunctions() */


void InitObjects (void)
{
}  /* InitObjects() */


TProcedural* NewObject (const string& rktCLASS, const TProcedural* pktPARENT)
{

  TProcedural*   ptChild;

  //  cout << "New object : \"" << rktCLASS << "\"" << endl;

  ptChild = (TProcedural*) TClassManager::_newObject (rktCLASS, pktPARENT);
  if ( !ptChild )
  {
    string   tMessage = string ("class ") + rktCLASS + " does not exist";
    yyerror (tMessage.c_str());
    exit (1);
  }

  return ptChild;

}  /* NewObject() */


void* InstanceObject (const string& rktNAME)
{

  void*   pvObject;

  if ( rktNAME == "" )
  {
    yyerror ("instanced object cannot be unnamed");
    exit (1);
  }

  if ( _tObjectMap.find (rktNAME) == _tObjectMap.end() )
  {
    yyerror ("object does not exist");
    exit (1);
  }

  pvObject = _tObjectMap [rktNAME];

  return pvObject;

}  /* InstanceObject() */


void* UpdateObject (const string& rktNAME)
{

  TProcedural*   ptObject;

  // cout << "Updating object : \"" << rktNAME << "\"" << endl;

  ptObject = _tDataStack.POP();

  _tObjectMap [rktNAME] = ptObject;
  _tTypeMap   [rktNAME] = ptObject->classType();

  return ptObject;

}  /* UpdateObject() */


void DefineObject (const string& rktNAME, const string& rktCLASS, const string& rktDEF_CLASS)
{

  // cout << "Defining object : \"" << rktNAME << "\", \"" << rktCLASS << "\", \"" << rktDEF_CLASS << "\"" << endl;

  if ( rktNAME == "" )
  {
    yyerror ("defined object cannot be unnamed");
    exit (1);
  }

  if ( _tTypeMap.find (rktNAME) != _tTypeMap.end() )
  {
    yyerror ("cannot redefine an existing object");
    exit (1);
  }

  if ( ( _tObjectMap.find (rktNAME) != _tObjectMap.end() ) ||
       ( _tTypeMap  .find (rktNAME) != _tTypeMap.  end() ) )
  {
    yyerror ("cannot redefine an existing object");
    exit (1);
  }

  if ( rktCLASS == "" )
  {
    _ptData = NewObject (rktDEF_CLASS, _ptParent);
  }
  else
  {
    _ptData = NewObject (rktCLASS, _ptParent);
  }

  _tDataStack.push (_ptData);
  _ptParent = NULL;

}  /* DefineObject() */


void CreateObject (const string& rktCLASS, const string& rktDEF_CLASS)
{

  // cout << "Creating object : \"" << rktCLASS << "\", \"" << rktDEF_CLASS << "\"" << endl;
  
  if ( rktCLASS == "" )
  {
    _ptData = NewObject (rktDEF_CLASS, _ptParent);
  }
  else
  {
    _ptData = NewObject (rktCLASS, _ptParent);
  }

  _tDataStack.push (_ptData);
  _ptParent = NULL;

}  /* CreateObject() */


void DefineColor (const string& rktNAME)
{

  if ( rktNAME == "" )
  {
    yyerror ("cannot define unnamed color");
    exit (1);
  }

  if ( _tColorMap.find (rktNAME) != _tColorMap.end() )
  {
    yyerror ("cannot redefine an existing color");
    exit (1);
  }

  if ( _tTypeMap.find (rktNAME) != _tTypeMap.end() )
  {
    yyerror ("cannot redefine an existing object");
    exit (1);
  }

  _tColor = TColor::_black();
  
  _ptParent = NULL;

}  /* DefineColor() */


TColor* InstanceColor (const string& rktNAME)
{

  TColor*   ptColor;

  if ( rktNAME == "" )
  {
    yyerror ("instanced object cannot be unnamed");
    exit (1);
  }
  
  if ( _tColorMap.find (rktNAME) == _tColorMap.end() )
  {
    yyerror ("pattern/color does not exist");
    exit (1);
  }
  
  ptColor = (TColor*) &(_tColorMap [rktNAME]);
  
  return ptColor;

}  /* InstanceColor() */


void DefineVector (const string& rktNAME)
{

  if ( rktNAME == "" )
  {
    yyerror ("cannot define unnamed vector");
    exit (1);
  }
  
  if ( _tVectorMap.find (rktNAME) != _tVectorMap.end() )
  {
    yyerror ("cannot redefine an existing vector");
    exit (1);
  }

  if ( _tTypeMap.find (rktNAME) != _tTypeMap.end() )
  {
    yyerror ("cannot redefine an existing object");
    exit (1);
  }
  
  _tVector = TVector (0, 0, 0);
  
  _ptParent = NULL;

}  /* DefineVector() */


TVector* InstanceVector (const string& rktNAME)
{

  TVector*   ptVector;

  if ( rktNAME == "" )
  {
    yyerror ("instanced object cannot be unnamed");
    exit (1);
  }
  
  if ( _tVectorMap.find (rktNAME) == _tVectorMap.end() )
  {
    yyerror ("vector does not exist");
    exit (1);
  }
  
  ptVector = (TVector*) &(_tVectorMap [rktNAME]);
  
  return ptVector;

}  /* InstanceVector() */


EAttribType MapClassToAttribute (const TBaseClass* pktClass)
{

  EClass   eIdentifierClass = pktClass->classType();

  switch (eIdentifierClass) 
  {
    case FX_PATTERN_CLASS:
      return FX_PATTERN;

    case FX_PERTURBATION_CLASS:
      return FX_PERTURBATION;

    default:
      return FX_NONE;
  }

}  /* MapClassToAttribute() */


void UpdateAttribute (const string& rktATTRIBUTE, const string& rktIDENT)
{

  EClass        eIdentifierClass = _tTypeMap [rktIDENT];
  EAttribType   eAttribute;
  void*         vpInstance;
  
  switch (eIdentifierClass) 
  {
    case FX_COLOR_CLASS:
      vpInstance = InstanceColor (rktIDENT);
      eAttribute = FX_COLOR;
      break;

    case FX_VECTOR_CLASS:
      vpInstance = InstanceVector (rktIDENT);
      eAttribute = FX_VECTOR;
      break;
      
    case FX_BSDF_CLASS:
      vpInstance = InstanceObject (rktIDENT);
      eAttribute = FX_BSDF;
      break;

    case FX_PATTERN_CLASS:
      vpInstance = InstanceObject (rktIDENT);
      eAttribute = FX_PATTERN;
      break;

    case FX_PERTURBATION_CLASS:
      vpInstance = InstanceObject (rktIDENT);
      eAttribute = FX_PERTURBATION;
      break;

    default:
      vpInstance = NULL;
      eAttribute = FX_NONE;

      cerr << "Warning: identifier class not recognized." << endl;
  }
  
  _nAttrib.pvValue = vpInstance;
  SetParameter (rktATTRIBUTE, eAttribute);
  
}  /* UpdateAttribute() */


void SetParameter (const string& rktATTRIB, EAttribType eTYPE)
{

  int   iResult;

  iResult = DATA->setAttribute (rktATTRIB, _nAttrib, eTYPE);

  if ( iResult == FX_ATTRIB_WRONG_PARAM )
  {
    yyerror ("object does not have such attribute");
    exit (1);
  }
  else if ( iResult == FX_ATTRIB_WRONG_TYPE )
  {
    yyerror ("incorrect type in attribute value");
    exit (1);
  }
  else if ( iResult == FX_ATTRIB_WRONG_VALUE )
  {
    yyerror ("value not accepted for this attribute");
    exit (1);
  }
  else if ( iResult == FX_ATTRIB_USER_ERROR )
  {
    yyerror (TProcedural::_tUserErrorMessage.c_str());
    exit (1);
  }

}  /* SetParameter() */


string EAttribType_to_str (EAttribType eTYPE)
{

  /* This function is pretty dumb, but I (KH) couldn't find another one
     anywhere else.  Added on 07Aug2000  */ 

  switch ( eTYPE )
  {
    case FX_NONE: 
      return "none";

    case FX_REAL: 
      return "real";

    case FX_BOOL: 
      return "bool";

    case FX_STRING: 
      return "string";

    case FX_COLOR: 
      return "color";

    case FX_VECTOR: 
      return "vector";

    case FX_VECTOR2: 
      return "2d_vector";

    case FX_IMAGE: 
      return "image";

    case FX_BSDF: 
      return "bsdf";

    case FX_CAMERA: 
      return "camera";

    case FX_LIGHT: 
      return "light";

    case FX_MATERIAL: 
      return "material";

    case FX_PATTERN: 
      return "pattern";

    case FX_PERTURBATION: 
      return "perturbation";

    case FX_RENDERER: 
      return "renderer";

    case FX_OBJECT: 
      return "object";

    case FX_OBJECT_FILTER: 
      return "object_filter";

    case FX_IMAGE_FILTER: 
      return "image_filter";

    default: 
      return "unknown";
  }

}  /* EAttribType_to_str() */
