
/*  A Bison parser, made from parser.y
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse rt_parse
#define yylex rt_lex
#define yyerror rt_error
#define yylval rt_lval
#define yychar rt_char
#define yydebug rt_debug
#define yynerrs rt_nerrs
#define	T_BOOL	258
#define	T_REAL	259
#define	T_IDENTIFIER	260
#define	T_QUOTED_STRING	261
#define	T_AGGREGATE	262
#define	T_ATM_OBJECT	263
#define	T_BLUE	264
#define	T_BOX	265
#define	T_BSDF	266
#define	T_CAMERA	267
#define	T_CIRCLE	268
#define	T_CLASS	269
#define	T_COLOR	270
#define	T_CONE	271
#define	T_CYLINDER	272
#define	T_DEFINE	273
#define	T_DIFFERENCE	274
#define	T_EXTENDS	275
#define	T_FILTER	276
#define	T_GREEN	277
#define	T_IMAGE_FILTER	278
#define	T_INTERSECTION	279
#define	T_LIGHT	280
#define	T_MATERIAL	281
#define	T_MESH	282
#define	T_OBJECT	283
#define	T_OBJECT_FILTER	284
#define	T_OUTPUT	285
#define	T_PHONG_TRIANGLE	286
#define	T_PLANE	287
#define	T_RECTANGLE	288
#define	T_RED	289
#define	T_RENDERER	290
#define	T_ROTATE	291
#define	T_SCALE	292
#define	T_SCENE	293
#define	T_SPHERE	294
#define	T_TORUS	295
#define	T_TRANSLATE	296
#define	T_TRIANGLE	297
#define	T_TYPE	298
#define	T_UNION	299
#define	T_VECTOR	300
#define	T_VERTEX	301
#define	T_X	302
#define	T_Y	303
#define	T_Z	304
#define	UNARY_MINUS	305

#line 19 "parser.y"


#include <map>
#include <stack>
#include <string>
#include <iostream>
#include "llapi/llapi_all.h"
#include "hlapi/hlapi_all.h"
#include "hlapi/class_manager.h"
#include "parser_defs.h"
#include "rt_io.h"

static map<string, TProcedural*, less<string> >       _tObjectMap;
static map<string, TColor, less<string> >             _tColorMap;
static map<string, TVector, less<string> >            _tVectorMap;
static map<string, double(*)(void), less<string> >    _tFunctionMap;
static stack<TProcedural*>                            _tDataStack;

static TProcedural*   _ptData;
static TProcedural*   _ptParent;
static Byte           _bVertices;
static TVector        _tVector;
static TVector2       _tVector2;
static TColor         _tColor;
static TAggregate*    _ptWorld;
static NAttribute     _nAttrib;
static TImageIO*      _ptImageIO;

static double (*_pfFunction)(void);

#define POP()           top(); _tDataStack.pop()            // Fix to STL's pop()

#define DATA		(_tDataStack.top())
#define ENTITY		((TEntity*) _tDataStack.top())
#define VOLUME		((TVolume*) _tDataStack.top())
#define VECTOR		((TVector*) _tDataStack.top())
#define COLOR		((TColor*) _tDataStack.top())
#define SCENE		(TSceneRT::_ptParsedScene)
#define MATERIAL	((TMaterial*) _tDataStack.top())
#define OBJECT		((TObject*) _tDataStack.top())
#define AGGREGATE	((TAggregate*) _tDataStack.top())
#define TRIANGLE	((TTriangle*) _tDataStack.top())
#define RECTANGLE	((TRectangle*) _tDataStack.top())
#define MESH		((TMeshObject*) _tDataStack.top())

#define YYDEBUG 1

static TProcedural* NewObject (const string& rktCLASS, const TProcedural* pktPARENT);
static void* InstanceObject (const string& rktNAME);
static void* UpdateObject (const string& rktNAME);
static void DefineObject (const string& rktNAME, const string& rktCLASS, const string& rktDEF_CLASS);
static void CreateObject (const string& rktCLASS, const string& rktDEF_CLASS);
static void SetParameter (const string& rktATTRIB, EAttribType eTYPE);

static void InitObjects (void);
static void InitFunctions (void);


#line 78 "parser.y"
typedef union {
         char                  acIdent [200];
         double                dValue;
         bool                  gValue;
         TColor*               ptColor;
         TVector*              ptVector;
         TVector2*             ptVector2;
         TScene*               ptScene;
         TRenderer*            ptRenderer;
         TCamera*              ptCamera;
         TLight*               ptLight;
         TBsdf*                ptBsdf;
         TMaterial*            ptMaterial;
         TObject*              ptObject;
         TImageFilter*         ptIFilter;
         TObjectFilter*        ptOFilter;
         TAtmosphericObject*   ptAtmObject;
         TImageIO*             ptImageIO;
       } YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		499
#define	YYFLAG		-32768
#define	YYNTBASE	63

#define YYTRANSLATE(x) ((unsigned)(x) <= 305 ? yytranslate[x] : 196)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    55,
    56,    52,    50,    58,    51,     2,    53,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    60,     2,    57,
     2,    59,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    61,     2,    62,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    54
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     4,     7,    10,    13,    15,    19,    23,    27,
    31,    35,    39,    43,    47,    51,    55,    59,    63,    67,
    71,    75,    79,    83,    87,    91,    95,    99,   103,   107,
   111,   114,   117,   120,   123,   126,   129,   132,   135,   138,
   141,   144,   147,   150,   152,   156,   160,   164,   168,   172,
   175,   179,   187,   193,   195,   198,   199,   201,   202,   206,
   210,   211,   214,   217,   220,   223,   226,   229,   232,   235,
   238,   241,   244,   247,   250,   253,   256,   259,   260,   263,
   266,   269,   272,   275,   277,   280,   282,   283,   286,   289,
   292,   294,   295,   302,   304,   305,   311,   312,   315,   318,
   321,   324,   325,   332,   334,   335,   341,   342,   345,   348,
   351,   354,   355,   360,   361,   364,   367,   369,   370,   377,
   379,   380,   386,   387,   390,   393,   396,   399,   401,   402,
   409,   411,   412,   418,   419,   426,   428,   429,   435,   436,
   443,   445,   446,   452,   453,   460,   462,   463,   469,   470,
   477,   479,   480,   486,   487,   494,   496,   497,   503,   504,
   511,   513,   514,   520,   521,   528,   530,   531,   537,   538,
   545,   547,   548,   554,   555,   562,   564,   565,   571,   572,
   579,   581,   582,   588,   589,   592,   594,   596,   597,   604,
   606,   607,   613,   614,   617,   619,   621,   622,   629,   631,
   632,   638,   639,   642,   644,   646,   647,   654,   656,   657,
   663,   664,   667,   669,   671,   672,   679,   681,   682,   688,
   689,   696,   698,   699,   705,   706,   713,   715,   716,   722,
   723,   730,   732,   733,   739,   740,   747,   749,   750,   756,
   757,   764,   766,   767,   773,   774,   781,   783,   784,   790,
   791,   794,   797
};

static const short yyrhs[] = {    -1,
    63,    64,     0,    63,    65,     0,    38,    98,     0,     8,
   172,     0,    66,     0,    18,    15,    80,     0,    18,    45,
    86,     0,    18,    28,   130,     0,    18,    38,    96,     0,
    18,    12,   102,     0,    18,    25,   106,     0,    18,    11,
   110,     0,    18,    23,   122,     0,    18,    29,   126,     0,
    18,    35,   114,     0,    18,    26,   118,     0,    18,    32,
   134,     0,    18,    39,   138,     0,    18,    42,   142,     0,
    18,    31,   148,     0,    18,    33,   154,     0,    18,    13,
   160,     0,    18,     7,   166,     0,    18,    10,   174,     0,
    18,    17,   178,     0,    18,    16,   182,     0,    18,    40,
   186,     0,    18,    27,   190,     0,    18,     8,   170,     0,
    28,   132,     0,    32,   136,     0,    39,   140,     0,    42,
   144,     0,    31,   150,     0,    33,   156,     0,    13,   162,
     0,     7,   168,     0,    10,   176,     0,    17,   180,     0,
    16,   184,     0,    40,   188,     0,    27,   192,     0,     4,
     0,     5,    55,    56,     0,    67,    50,    67,     0,    67,
    51,    67,     0,    67,    52,    67,     0,    67,    53,    67,
     0,    51,    67,     0,    55,    67,    56,     0,    57,    67,
    58,    67,    58,    67,    59,     0,    57,    67,    58,    67,
    59,     0,    68,     0,    46,    68,     0,     0,     5,     0,
     0,    60,    20,     5,     0,    60,    14,     5,     0,     0,
    73,    74,     0,     5,    68,     0,     5,    69,     0,     5,
    67,     0,     5,     3,     0,     5,     6,     0,     5,    82,
     0,    15,    82,     0,    45,    88,     0,     5,    88,     0,
     5,   104,     0,    12,   104,     0,     5,   116,     0,    35,
   116,     0,     5,   112,     0,    11,   112,     0,     0,    75,
    76,     0,    41,    68,     0,    36,    68,     0,    41,    88,
     0,    36,    88,     0,    74,     0,    37,    68,     0,    76,
     0,     0,    78,    79,     0,    26,   120,     0,    21,   128,
     0,    77,     0,     0,    71,    72,    81,    61,    84,    62,
     0,    71,     0,     0,    72,    83,    61,    84,    62,     0,
     0,    84,    85,     0,    34,    67,     0,    22,    67,     0,
     9,    67,     0,     0,    71,    72,    87,    61,    90,    62,
     0,    71,     0,     0,    72,    89,    61,    90,    62,     0,
     0,    90,    91,     0,    47,    67,     0,    48,    67,     0,
    49,    67,     0,     0,    61,    93,    94,    62,     0,     0,
    94,    95,     0,    43,     6,     0,    74,     0,     0,    71,
    72,    97,    61,   100,    62,     0,    71,     0,     0,    72,
    99,    61,   100,    62,     0,     0,   100,   101,     0,    25,
   108,     0,    21,   124,     0,    30,    92,     0,    74,     0,
     0,    71,    72,   103,    61,    75,    62,     0,    71,     0,
     0,    72,   105,    61,    75,    62,     0,     0,    71,    72,
   107,    61,    75,    62,     0,    71,     0,     0,    72,   109,
    61,    75,    62,     0,     0,    71,    72,   111,    61,    73,
    62,     0,    71,     0,     0,    72,   113,    61,    73,    62,
     0,     0,    71,    72,   115,    61,    73,    62,     0,    71,
     0,     0,    72,   117,    61,    73,    62,     0,     0,    71,
    72,   119,    61,    73,    62,     0,    71,     0,     0,    72,
   121,    61,    73,    62,     0,     0,    71,    72,   123,    61,
    73,    62,     0,    71,     0,     0,    72,   125,    61,    73,
    62,     0,     0,    71,    72,   127,    61,    73,    62,     0,
    71,     0,     0,    72,   129,    61,    73,    62,     0,     0,
    71,    72,   131,    61,    78,    62,     0,    71,     0,     0,
    72,   133,    61,    78,    62,     0,     0,    71,    72,   135,
    61,    78,    62,     0,    71,     0,     0,    72,   137,    61,
    78,    62,     0,     0,    71,    72,   139,    61,    78,    62,
     0,    71,     0,     0,    72,   141,    61,    78,    62,     0,
     0,    71,    72,   143,    61,   146,    62,     0,    71,     0,
     0,    72,   145,    61,   146,    62,     0,     0,   146,   147,
     0,    70,     0,    79,     0,     0,    71,    72,   149,    61,
   152,    62,     0,    71,     0,     0,    72,   151,    61,   152,
    62,     0,     0,   152,   153,     0,    70,     0,    79,     0,
     0,    71,    72,   155,    61,   158,    62,     0,    71,     0,
     0,    72,   157,    61,   158,    62,     0,     0,   158,   159,
     0,    70,     0,    79,     0,     0,    71,    72,   161,    61,
    78,    62,     0,    71,     0,     0,    72,   163,    61,    78,
    62,     0,     0,   164,   165,     0,    66,     0,    79,     0,
     0,    71,    72,   167,    61,   164,    62,     0,    71,     0,
     0,    72,   169,    61,   164,    62,     0,     0,    71,    72,
   171,    61,    73,    62,     0,    71,     0,     0,    72,   173,
    61,    73,    62,     0,     0,    71,    72,   175,    61,    78,
    62,     0,    71,     0,     0,    72,   177,    61,    78,    62,
     0,     0,    71,    72,   179,    61,    78,    62,     0,    71,
     0,     0,    72,   181,    61,    78,    62,     0,     0,    71,
    72,   183,    61,    78,    62,     0,    71,     0,     0,    72,
   185,    61,    78,    62,     0,     0,    71,    72,   187,    61,
    78,    62,     0,    71,     0,     0,    72,   189,    61,    78,
    62,     0,     0,    71,    72,   191,    61,   194,    62,     0,
    71,     0,     0,    72,   193,    61,   194,    62,     0,     0,
   194,   195,     0,    42,   144,     0,    79,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   212,   213,   214,   217,   219,   223,   229,   231,   233,   235,
   237,   239,   241,   243,   245,   247,   249,   251,   253,   255,
   257,   259,   261,   263,   265,   267,   269,   271,   273,   275,
   279,   283,   287,   291,   295,   299,   303,   307,   311,   315,
   319,   323,   327,   333,   337,   347,   351,   355,   359,   363,
   367,   373,   380,   387,   391,   397,   401,   407,   411,   421,
   428,   429,   432,   437,   442,   447,   452,   457,   462,   467,
   472,   477,   482,   487,   492,   497,   502,   509,   510,   513,
   517,   521,   525,   529,   532,   536,   539,   540,   543,   547,
   551,   554,   572,   580,   596,   600,   606,   607,   610,   614,
   618,   624,   642,   650,   666,   670,   676,   677,   680,   684,
   688,   694,   698,   704,   705,   708,   721,   724,   728,   734,
   739,   745,   752,   753,   756,   760,   764,   768,   771,   775,
   781,   785,   789,   795,   799,   805,   809,   813,   819,   823,
   829,   833,   837,   843,   847,   853,   857,   861,   867,   871,
   877,   881,   885,   892,   896,   902,   906,   910,   916,   920,
   926,   930,   934,   940,   944,   950,   954,   958,   964,   968,
   974,   978,   982,   988,   992,   998,  1002,  1006,  1012,  1017,
  1028,  1032,  1037,  1048,  1049,  1052,  1057,  1060,  1065,  1076,
  1080,  1085,  1096,  1097,  1100,  1105,  1108,  1113,  1124,  1128,
  1133,  1144,  1145,  1148,  1153,  1156,  1160,  1166,  1170,  1174,
  1180,  1181,  1184,  1188,  1191,  1195,  1201,  1205,  1209,  1215,
  1219,  1225,  1229,  1233,  1239,  1243,  1249,  1253,  1257,  1263,
  1267,  1273,  1277,  1281,  1287,  1291,  1297,  1301,  1305,  1311,
  1315,  1321,  1325,  1329,  1335,  1339,  1345,  1349,  1353,  1359,
  1360,  1363,  1368
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","T_BOOL",
"T_REAL","T_IDENTIFIER","T_QUOTED_STRING","T_AGGREGATE","T_ATM_OBJECT","T_BLUE",
"T_BOX","T_BSDF","T_CAMERA","T_CIRCLE","T_CLASS","T_COLOR","T_CONE","T_CYLINDER",
"T_DEFINE","T_DIFFERENCE","T_EXTENDS","T_FILTER","T_GREEN","T_IMAGE_FILTER",
"T_INTERSECTION","T_LIGHT","T_MATERIAL","T_MESH","T_OBJECT","T_OBJECT_FILTER",
"T_OUTPUT","T_PHONG_TRIANGLE","T_PLANE","T_RECTANGLE","T_RED","T_RENDERER","T_ROTATE",
"T_SCALE","T_SCENE","T_SPHERE","T_TORUS","T_TRANSLATE","T_TRIANGLE","T_TYPE",
"T_UNION","T_VECTOR","T_VERTEX","T_X","T_Y","T_Z","'+'","'-'","'*'","'/'","UNARY_MINUS",
"'('","')'","'<'","','","'>'","':'","'{'","'}'","everything","instance","definition",
"object","real_expr","vector3","vector2","vertex_instance","name","class","params",
"param","entity_params","entity_param","volume_param","object_params","object_param",
"color_def","@1","color_instance","@2","color_params","color_param","vector_def",
"@3","vector_instance","@4","vector_params","vector_param","image_io_instance",
"@5","image_io_params","image_io_param","scene_def","@6","scene_instance","@7",
"scene_params","scene_param","camera_def","@8","camera_instance","@9","light_def",
"@10","light_instance","@11","bsdf_def","@12","bsdf_instance","@13","renderer_def",
"@14","renderer_instance","@15","material_def","@16","material_instance","@17",
"ifilter_def","@18","ifilter_instance","@19","ofilter_def","@20","ofilter_instance",
"@21","object_def","@22","object_instance","@23","plane_def","@24","plane_instance",
"@25","sphere_def","@26","sphere_instance","@27","triangle_def","@28","triangle_instance",
"@29","triangle_params","triangle_param","phong_triangle_def","@30","phong_triangle_instance",
"@31","phong_triangle_params","phong_triangle_param","rectangle_def","@32","rectangle_instance",
"@33","rectangle_params","rectangle_param","circle_def","@34","circle_instance",
"@35","aggregate_params","aggregate_param","aggregate_def","@36","aggregate_instance",
"@37","atm_object_def","@38","atm_object_instance","@39","box_def","@40","box_instance",
"@41","cylinder_def","@42","cylinder_instance","@43","cone_def","@44","cone_instance",
"@45","torus_def","@46","torus_instance","@47","mesh_def","@48","mesh_instance",
"@49","mesh_params","mesh_param", NULL
};
#endif

static const short yyr1[] = {     0,
    63,    63,    63,    64,    64,    64,    65,    65,    65,    65,
    65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
    65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
    66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
    66,    66,    66,    67,    67,    67,    67,    67,    67,    67,
    67,    68,    69,    70,    70,    71,    71,    72,    72,    72,
    73,    73,    74,    74,    74,    74,    74,    74,    74,    74,
    74,    74,    74,    74,    74,    74,    74,    75,    75,    76,
    76,    76,    76,    76,    77,    77,    78,    78,    79,    79,
    79,    81,    80,    82,    83,    82,    84,    84,    85,    85,
    85,    87,    86,    88,    89,    88,    90,    90,    91,    91,
    91,    93,    92,    94,    94,    95,    95,    97,    96,    98,
    99,    98,   100,   100,   101,   101,   101,   101,   103,   102,
   104,   105,   104,   107,   106,   108,   109,   108,   111,   110,
   112,   113,   112,   115,   114,   116,   117,   116,   119,   118,
   120,   121,   120,   123,   122,   124,   125,   124,   127,   126,
   128,   129,   128,   131,   130,   132,   133,   132,   135,   134,
   136,   137,   136,   139,   138,   140,   141,   140,   143,   142,
   144,   145,   144,   146,   146,   147,   147,   149,   148,   150,
   151,   150,   152,   152,   153,   153,   155,   154,   156,   157,
   156,   158,   158,   159,   159,   161,   160,   162,   163,   162,
   164,   164,   165,   165,   167,   166,   168,   169,   168,   171,
   170,   172,   173,   172,   175,   174,   176,   177,   176,   179,
   178,   180,   181,   180,   183,   182,   184,   185,   184,   187,
   186,   188,   189,   188,   191,   190,   192,   193,   192,   194,
   194,   195,   195
};

static const short yyr2[] = {     0,
     0,     2,     2,     2,     2,     1,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     1,     3,     3,     3,     3,     3,     2,
     3,     7,     5,     1,     2,     0,     1,     0,     3,     3,
     0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     0,     2,     2,
     2,     2,     2,     1,     2,     1,     0,     2,     2,     2,
     1,     0,     6,     1,     0,     5,     0,     2,     2,     2,
     2,     0,     6,     1,     0,     5,     0,     2,     2,     2,
     2,     0,     4,     0,     2,     2,     1,     0,     6,     1,
     0,     5,     0,     2,     2,     2,     2,     1,     0,     6,
     1,     0,     5,     0,     6,     1,     0,     5,     0,     6,
     1,     0,     5,     0,     6,     1,     0,     5,     0,     6,
     1,     0,     5,     0,     6,     1,     0,     5,     0,     6,
     1,     0,     5,     0,     6,     1,     0,     5,     0,     6,
     1,     0,     5,     0,     6,     1,     0,     5,     0,     6,
     1,     0,     5,     0,     2,     1,     1,     0,     6,     1,
     0,     5,     0,     2,     1,     1,     0,     6,     1,     0,
     5,     0,     2,     1,     1,     0,     6,     1,     0,     5,
     0,     2,     1,     1,     0,     6,     1,     0,     5,     0,
     6,     1,     0,     5,     0,     6,     1,     0,     5,     0,
     6,     1,     0,     5,     0,     6,     1,     0,     5,     0,
     6,     1,     0,     5,     0,     6,     1,     0,     5,     0,
     2,     2,     1
};

static const short yydefact[] = {     1,
     0,    56,    56,    56,    56,    56,    56,     0,    56,    56,
    56,    56,    56,    56,    56,    56,    56,     2,     3,     6,
    57,     0,   217,   218,    38,   222,   223,     5,   227,   228,
    39,   208,   209,    37,   237,   238,    41,   232,   233,    40,
    56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
    56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
    56,    56,    56,    56,   247,   248,    43,   166,   167,    31,
   190,   191,    35,   171,   172,    32,   199,   200,    36,   120,
   121,     4,   176,   177,    33,   242,   243,    42,   181,   182,
    34,     0,     0,     0,     0,     0,     0,     0,     0,    58,
    24,    58,    30,    58,    25,    58,    13,    58,    11,    58,
    23,    58,     7,    58,    27,    58,    26,    58,    14,    58,
    12,    58,    17,    58,    29,    58,     9,    58,    15,    58,
    21,    58,    18,    58,    22,    58,    16,    58,    10,    58,
    19,    58,    28,    58,    20,    58,     8,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    60,    59,   211,    61,
    87,    87,    87,    87,   215,   220,   225,   139,   129,   206,
    92,   235,   230,   154,   134,   149,   245,   164,   159,   188,
   169,   197,   144,   118,   174,   240,   179,   102,   250,    87,
   193,    87,   202,   123,    87,    87,   184,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    56,    56,    56,    56,
    56,    56,    56,    56,     0,    56,    56,   219,   213,    84,
    86,    91,   214,   212,   224,    62,   229,    88,   210,   239,
   234,   211,    61,    87,    61,    78,    87,    97,    87,    87,
    61,    78,    61,   250,    87,    61,   193,    87,   202,    61,
   123,    87,    87,   184,   107,    56,   249,   253,   251,   168,
     0,     0,   192,    54,   195,   196,   194,   173,   201,   204,
   205,   203,    56,    56,     0,   122,   128,   124,   178,   244,
   183,   186,   187,   185,    66,    44,    57,    67,     0,     0,
     0,    65,    63,    64,    94,    95,    68,    71,    72,    76,
    74,   141,   142,    77,   131,   132,    73,    94,    95,    69,
   161,   162,    90,   151,   152,    89,   146,   147,    75,    81,
   104,   105,    83,    85,    80,    82,    70,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   252,    55,     0,     0,   156,   157,   126,   136,   137,
   125,   112,   127,     0,    50,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   216,   221,
   226,   140,   130,    79,   207,     0,     0,     0,    93,    98,
   236,   231,   155,   135,   150,   246,   165,   160,   189,   170,
   198,   145,   119,   175,   241,   180,     0,     0,     0,   103,
   108,     0,     0,     0,   114,    45,    51,     0,    46,    47,
    48,    49,    97,   107,    78,    61,    61,    61,    61,   101,
   100,    99,   109,   110,   111,     0,    61,    78,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   113,   117,   115,    53,    96,   106,   133,   143,   148,
   163,   153,     0,   158,   138,   116,    52,     0,     0
};

static const short yydefgoto[] = {     1,
    18,    19,   249,   322,   294,   324,   295,   351,   352,   199,
   250,   362,   251,   252,   200,   258,   113,   210,   327,   402,
   364,   420,   147,   227,   328,   403,   381,   441,   393,   445,
   469,   484,   139,   223,    82,   153,   233,   308,   109,   208,
   329,   404,   121,   214,   391,   444,   107,   207,   330,   405,
   137,   222,   331,   406,   123,   215,   346,   408,   119,   213,
   388,   443,   129,   218,   343,   407,   127,   217,    70,   149,
   133,   220,    76,   151,   141,   224,    85,   154,   145,   226,
    91,   156,   236,   314,   131,   219,    73,   150,   230,   297,
   135,   221,    79,   152,   232,   302,   111,   209,    34,    97,
   198,   254,   101,   204,    25,    94,   103,   205,    28,    95,
   105,   206,    31,    96,   117,   212,    40,    99,   115,   211,
    37,    98,   143,   225,    88,   155,   125,   216,    67,   148,
   228,   289
};

static const short yypact[] = {-32768,
  1261,    17,    17,    17,    17,    17,    17,  1297,    17,    17,
    17,    17,    17,    17,    17,    17,    17,-32768,-32768,-32768,
-32768,    49,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
    32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
    32,    32,    32,    32,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,    59,    65,    24,    25,    33,    34,    36,    41,    15,
-32768,    15,-32768,    15,-32768,    15,-32768,    15,-32768,    15,
-32768,    15,-32768,    15,-32768,    15,-32768,    15,-32768,    15,
-32768,    15,-32768,    15,-32768,    15,-32768,    15,-32768,    15,
-32768,    15,-32768,    15,-32768,    15,-32768,    15,-32768,    15,
-32768,    15,-32768,    15,-32768,    15,-32768,    54,    56,    58,
    64,    68,    70,    84,    86,    94,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   326,   159,   622,
   634,   671,   683,   100,   104,   111,   112,   126,   127,   129,
   130,   131,   139,   144,   146,   147,   148,   151,   152,   166,
   168,   169,   172,   182,   184,   185,   188,   568,   720,   403,
   732,   421,   261,   769,   781,   458,   102,    17,    17,    17,
    17,    17,    17,    27,   163,    27,    17,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    17,-32768,-32768,-32768,-32768,
   163,    88,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    17,    17,   189,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   179,-32768,    88,    88,
    88,   400,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   365,  1093,   818,
  1111,  1021,   830,    87,   867,   879,  1137,  1056,  1139,   580,
   916,  1148,   476,   928,   513,  1174,  1019,   965,   977,   531,
    42,-32768,-32768,   179,   237,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   208,-32768,   424,   298,    88,    88,    88,
    88,   204,   206,   207,   210,   213,   216,   218,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    88,    88,    88,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,    88,    88,    88,-32768,
-32768,    88,   220,   222,-32768,-32768,-32768,    88,   -17,   -17,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   400,
   400,   400,   400,   400,   400,   370,-32768,-32768,  1102,   173,
    89,   137,  1058,  1176,  1185,  1211,  1213,    88,  1222,  1074,
   263,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   116,-32768,-32768,-32768,-32768,   292,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,   293,  -220,  -164,-32768,  -198,    -2,    14,  -197,
  -166,  -266,  -297,-32768,    52,   -95,-32768,-32768,    53,-32768,
  -156,-32768,-32768,-32768,  -134,-32768,  -155,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,    23,-32768,-32768,-32768,
    66,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    60,-32768,
-32768,-32768,    69,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    21,-32768,    30,-32768,-32768,-32768,-32768,-32768,    38,-32768,
-32768,-32768,-32768,-32768,    45,-32768,-32768,-32768,-32768,-32768,
    63,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    46,-32768
};


#define	YYLAST		1342


static const short yytable[] = {    23,
    26,    29,    32,    35,    38,   368,    65,    68,    71,    74,
    77,    80,    83,    86,    89,    24,    27,    30,    33,    36,
    39,    21,    66,    69,    72,    75,    78,    81,    84,    87,
    90,    21,   256,   300,   400,   401,    21,   312,   100,   102,
   104,   106,   108,   110,   112,   114,   116,   118,   120,   122,
   124,   126,   128,   130,   132,   134,   136,   138,   140,   142,
   144,   146,    92,   157,   414,   359,   307,   361,    93,   158,
   414,   385,   323,   367,    22,   369,    22,   -58,   372,   350,
   354,   355,   376,   292,   159,   160,    22,   -58,   437,   438,
   439,   316,   384,   161,   162,   416,   163,   416,   395,   396,
   397,   164,   253,   440,   315,   316,   317,   318,   417,   353,
   417,   356,   357,   165,   189,   166,   190,   167,   191,   168,
   418,   169,   418,   170,   192,   171,   383,   172,   193,   173,
   194,   174,   288,   175,   296,   176,   301,   177,   319,   178,
   313,   179,   320,   180,   195,   181,   196,   182,   419,   183,
   486,   184,   319,   185,   197,   186,   320,   187,   321,   188,
   262,    22,   -58,   237,   263,   398,   399,   400,   401,   238,
   239,   264,   265,   240,   497,   414,   300,   449,   450,   451,
   452,   312,   414,   437,   438,   439,   266,   267,   473,   268,
   269,   270,   256,   243,   256,   460,   461,   462,   487,   271,
   256,   480,   256,   247,   272,   256,   273,   274,   275,   256,
   307,   276,   277,   201,   202,   203,   463,   464,   465,   292,
   255,   466,   398,   399,   400,   401,   278,   470,   279,   280,
   478,   485,   281,   394,   325,   332,   335,   338,   341,   344,
   347,   229,   282,   231,   283,   284,   234,   235,   285,   392,
   326,   333,   336,   339,   342,   345,   348,   493,   474,   475,
   476,   477,   253,   446,   453,   237,   454,   455,   496,   479,
   456,   238,   239,   457,   288,   240,   458,   296,   459,   301,
   467,   303,   468,    89,   313,   304,   398,   399,   400,   401,
   305,   499,   340,    20,   442,   243,   471,   334,   472,    90,
   386,   389,   483,   377,   337,   247,   382,   256,   256,   256,
   256,   349,   256,   380,   373,   360,   387,   390,   363,   370,
   365,   366,   306,   375,   358,     0,   371,     0,     0,   374,
   237,     0,     2,   378,   379,     4,   238,   239,     5,     0,
   240,     6,     7,     0,     0,     0,   241,   398,   399,   400,
   401,   242,     9,    10,     0,   448,    11,    12,    13,     0,
   243,   244,   245,     0,    15,    16,   246,    17,     0,   237,
   247,     2,     0,     0,     4,   238,   239,     5,     0,   240,
     6,     7,     0,     0,     0,   241,     0,   248,     0,     0,
   242,     9,    10,     0,     0,    11,    12,    13,     0,   243,
   244,   245,     0,    15,    16,   246,    17,   237,     0,   247,
     0,     0,     0,   238,   239,     0,     0,   240,     0,   398,
   399,   400,   401,   241,     0,   237,   409,   478,   242,     0,
     0,   238,   239,     0,     0,   240,     0,   243,   244,   245,
     0,   241,     0,   246,     0,     0,   242,   247,   291,   398,
   399,   400,   401,     0,     0,   243,   244,   245,     0,   292,
     0,   246,   237,     0,   293,   247,   291,     0,   238,   239,
     0,     0,   240,   398,   399,   400,   401,   292,   241,   447,
   237,     0,   299,   242,     0,     0,   238,   239,     0,     0,
   240,     0,   243,   244,   245,     0,   241,     0,   246,     0,
     0,   242,   247,   291,     0,     0,     0,     0,     0,     0,
   243,   244,   245,     0,   292,     0,   246,   237,     0,   311,
   247,   291,     0,   238,   239,     0,     0,   240,     0,     0,
     0,     0,   292,   241,     0,   237,     0,   429,   242,     0,
     0,   238,   239,     0,     0,   240,     0,   243,   244,   245,
     0,   241,     0,   246,     0,     0,   242,   247,   291,     0,
     0,     0,     0,     0,     0,   243,   244,   245,     0,   292,
     0,   246,   237,     0,   431,   247,   291,     0,   238,   239,
     0,     0,   240,     0,   237,     0,     0,   292,   241,     0,
   238,   239,   436,   242,   240,     0,     0,     0,     0,     0,
   241,     0,   243,   244,   245,   242,     0,     0,   246,   286,
     0,     0,   247,     0,   243,   244,   245,     0,     0,     0,
   246,   286,     0,     0,   247,     0,   237,     0,     0,   287,
     0,     0,   238,   239,     0,     0,   240,     0,   237,     0,
     0,   426,   241,     0,   238,   239,     0,   242,   240,     0,
     0,     0,     0,     0,   241,     0,   243,   244,   245,   242,
     0,     0,   246,     0,     0,     0,   247,     0,   243,   244,
   245,     0,     0,     0,   246,   237,     0,     0,   247,     0,
     0,   238,   239,   257,     0,   240,     0,   237,     0,     0,
     0,   241,     0,   238,   239,   259,   242,   240,     0,     0,
     0,     0,     0,   241,     0,   243,   244,   245,   242,     0,
     0,   246,     0,     0,     0,   247,     0,   243,   244,   245,
     0,     0,     0,   246,   237,     0,     0,   247,     0,     0,
   238,   239,   260,     0,   240,     0,   237,     0,     0,     0,
   241,     0,   238,   239,   261,   242,   240,     0,     0,     0,
     0,     0,   241,     0,   243,   244,   245,   242,     0,     0,
   246,     0,     0,     0,   247,     0,   243,   244,   245,     0,
     0,     0,   246,   237,     0,     0,   247,     0,     0,   238,
   239,   290,     0,   240,     0,   237,     0,     0,     0,   241,
     0,   238,   239,   298,   242,   240,     0,     0,     0,     0,
     0,   241,     0,   243,   244,   245,   242,     0,     0,   246,
     0,     0,     0,   247,     0,   243,   244,   245,     0,     0,
     0,   246,   237,     0,     0,   247,     0,     0,   238,   239,
   309,     0,   240,     0,   237,     0,     0,     0,   241,     0,
   238,   239,   310,   242,   240,     0,     0,     0,     0,     0,
   241,     0,   243,   244,   245,   242,     0,     0,   246,     0,
     0,     0,   247,     0,   243,   244,   245,     0,     0,     0,
   246,   237,     0,     0,   247,     0,     0,   238,   239,   411,
     0,   240,     0,   237,     0,     0,     0,   241,     0,   238,
   239,   415,   242,   240,     0,     0,     0,     0,     0,   241,
     0,   243,   244,   245,   242,     0,     0,   246,     0,     0,
     0,   247,     0,   243,   244,   245,     0,     0,     0,   246,
   237,     0,     0,   247,     0,     0,   238,   239,   421,     0,
   240,     0,   237,     0,     0,     0,   241,     0,   238,   239,
   422,   242,   240,     0,     0,     0,     0,     0,   241,     0,
   243,   244,   245,   242,     0,     0,   246,     0,     0,     0,
   247,     0,   243,   244,   245,     0,     0,     0,   246,   237,
     0,     0,   247,     0,     0,   238,   239,   427,     0,   240,
     0,   237,     0,     0,     0,   241,     0,   238,   239,   430,
   242,   240,     0,     0,     0,     0,     0,   241,     0,   243,
   244,   245,   242,     0,     0,   246,     0,     0,     0,   247,
     0,   243,   244,   245,     0,     0,     0,   246,     0,     0,
     0,   247,     0,   237,     0,   237,   434,     0,     0,   238,
   239,   238,   239,   240,     0,   240,     0,     0,   435,   303,
     0,     0,     0,   304,     0,     0,     0,     0,   305,     0,
     0,     0,     0,   243,     0,   243,   244,     0,     0,     0,
   237,   246,   237,   247,     0,   247,   238,   239,   238,   239,
   240,     0,   240,     0,     0,     0,     0,     0,   237,     0,
   433,     0,   413,     0,   238,   239,     0,     0,   240,     0,
   243,   244,   243,   244,     0,     0,   246,   237,   246,     0,
   247,     0,   247,   238,   239,     0,   237,   240,   243,   244,
     0,     0,   238,   239,   246,   237,   240,   424,   247,   488,
     0,   238,   239,     0,     0,   240,     0,   243,     0,     0,
     0,     0,     0,     0,     0,   495,   243,   247,     0,     0,
     0,   237,     0,   237,   481,   243,   247,   238,   239,   238,
   239,   240,   237,   240,   410,   247,     0,     0,   238,   239,
     0,     0,   240,   482,     0,     0,     0,     0,     0,     0,
     0,   243,   412,   243,     0,     0,     0,     0,   237,     0,
   237,   247,   243,   247,   238,   239,   238,   239,   240,   237,
   240,     0,   247,     0,     0,   238,   239,     0,   423,   240,
   425,     0,     0,     0,     0,     0,     0,     0,   243,   428,
   243,     0,     0,     0,     0,   237,     0,   237,   247,   243,
   247,   238,   239,   238,   239,   240,   237,   240,     0,   247,
     0,     0,   238,   239,     0,   432,   240,   489,     0,     0,
     0,     0,     0,     0,     0,   243,   490,   243,     0,     0,
     0,     0,     0,     0,     0,   247,   243,   247,     0,     0,
   498,     0,     0,     0,     0,     0,   247,     2,     3,     0,
     4,     0,   491,     5,   492,     0,     6,     7,     8,     0,
     0,     0,     0,   494,     0,     0,     0,     9,    10,     0,
     0,    11,    12,    13,     0,     0,     0,     0,    14,    15,
    16,     0,    17,    41,    42,     0,    43,    44,    45,    46,
     0,    47,    48,    49,     0,     0,     0,     0,     0,    50,
     0,    51,    52,    53,    54,    55,     0,    56,    57,    58,
     0,    59,     0,     0,    60,    61,    62,     0,    63,     0,
     0,    64
};

static const short yycheck[] = {     2,
     3,     4,     5,     6,     7,   272,     9,    10,    11,    12,
    13,    14,    15,    16,    17,     2,     3,     4,     5,     6,
     7,     5,     9,    10,    11,    12,    13,    14,    15,    16,
    17,     5,   199,   232,    52,    53,     5,   236,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    14,     5,   362,   263,   233,   265,    20,     5,
   368,   292,   237,   271,    60,   273,    60,    61,   276,   244,
   245,   246,   280,    57,    61,    61,    60,    61,    47,    48,
    49,     4,     5,    61,    61,     9,    61,     9,   319,   320,
   321,    61,   198,    62,     3,     4,     5,     6,    22,   244,
    22,   246,   247,   100,    61,   102,    61,   104,    61,   106,
    34,   108,    34,   110,    61,   112,   291,   114,    61,   116,
    61,   118,   228,   120,   230,   122,   232,   124,    51,   126,
   236,   128,    55,   130,    61,   132,    61,   134,    62,   136,
    62,   138,    51,   140,    61,   142,    55,   144,    57,   146,
    61,    60,    61,     5,    61,    50,    51,    52,    53,    11,
    12,    61,    61,    15,    59,   473,   375,   398,   399,   400,
   401,   380,   480,    47,    48,    49,    61,    61,   455,    61,
    61,    61,   359,    35,   361,   416,   417,   418,    62,    61,
   367,   468,   369,    45,    61,   372,    61,    61,    61,   376,
   377,    61,    61,   162,   163,   164,   437,   438,   439,    57,
    62,   442,    50,    51,    52,    53,    61,   448,    61,    61,
    58,    59,    61,    55,   237,   238,   239,   240,   241,   242,
   243,   190,    61,   192,    61,    61,   195,   196,    61,    61,
   237,   238,   239,   240,   241,   242,   243,   478,   456,   457,
   458,   459,   358,    56,    61,     5,    61,    61,     6,   467,
    61,    11,    12,    61,   370,    15,    61,   373,    61,   375,
    61,    21,    61,   286,   380,    25,    50,    51,    52,    53,
    30,     0,   240,     1,    58,    35,   453,   238,   454,   286,
   303,   304,   469,   281,   239,    45,   286,   474,   475,   476,
   477,   243,   479,   284,   277,   264,   303,   304,   267,   274,
   269,   270,    62,   279,   262,    -1,   275,    -1,    -1,   278,
     5,    -1,     7,   282,   283,    10,    11,    12,    13,    -1,
    15,    16,    17,    -1,    -1,    -1,    21,    50,    51,    52,
    53,    26,    27,    28,    -1,    58,    31,    32,    33,    -1,
    35,    36,    37,    -1,    39,    40,    41,    42,    -1,     5,
    45,     7,    -1,    -1,    10,    11,    12,    13,    -1,    15,
    16,    17,    -1,    -1,    -1,    21,    -1,    62,    -1,    -1,
    26,    27,    28,    -1,    -1,    31,    32,    33,    -1,    35,
    36,    37,    -1,    39,    40,    41,    42,     5,    -1,    45,
    -1,    -1,    -1,    11,    12,    -1,    -1,    15,    -1,    50,
    51,    52,    53,    21,    -1,     5,    62,    58,    26,    -1,
    -1,    11,    12,    -1,    -1,    15,    -1,    35,    36,    37,
    -1,    21,    -1,    41,    -1,    -1,    26,    45,    46,    50,
    51,    52,    53,    -1,    -1,    35,    36,    37,    -1,    57,
    -1,    41,     5,    -1,    62,    45,    46,    -1,    11,    12,
    -1,    -1,    15,    50,    51,    52,    53,    57,    21,    56,
     5,    -1,    62,    26,    -1,    -1,    11,    12,    -1,    -1,
    15,    -1,    35,    36,    37,    -1,    21,    -1,    41,    -1,
    -1,    26,    45,    46,    -1,    -1,    -1,    -1,    -1,    -1,
    35,    36,    37,    -1,    57,    -1,    41,     5,    -1,    62,
    45,    46,    -1,    11,    12,    -1,    -1,    15,    -1,    -1,
    -1,    -1,    57,    21,    -1,     5,    -1,    62,    26,    -1,
    -1,    11,    12,    -1,    -1,    15,    -1,    35,    36,    37,
    -1,    21,    -1,    41,    -1,    -1,    26,    45,    46,    -1,
    -1,    -1,    -1,    -1,    -1,    35,    36,    37,    -1,    57,
    -1,    41,     5,    -1,    62,    45,    46,    -1,    11,    12,
    -1,    -1,    15,    -1,     5,    -1,    -1,    57,    21,    -1,
    11,    12,    62,    26,    15,    -1,    -1,    -1,    -1,    -1,
    21,    -1,    35,    36,    37,    26,    -1,    -1,    41,    42,
    -1,    -1,    45,    -1,    35,    36,    37,    -1,    -1,    -1,
    41,    42,    -1,    -1,    45,    -1,     5,    -1,    -1,    62,
    -1,    -1,    11,    12,    -1,    -1,    15,    -1,     5,    -1,
    -1,    62,    21,    -1,    11,    12,    -1,    26,    15,    -1,
    -1,    -1,    -1,    -1,    21,    -1,    35,    36,    37,    26,
    -1,    -1,    41,    -1,    -1,    -1,    45,    -1,    35,    36,
    37,    -1,    -1,    -1,    41,     5,    -1,    -1,    45,    -1,
    -1,    11,    12,    62,    -1,    15,    -1,     5,    -1,    -1,
    -1,    21,    -1,    11,    12,    62,    26,    15,    -1,    -1,
    -1,    -1,    -1,    21,    -1,    35,    36,    37,    26,    -1,
    -1,    41,    -1,    -1,    -1,    45,    -1,    35,    36,    37,
    -1,    -1,    -1,    41,     5,    -1,    -1,    45,    -1,    -1,
    11,    12,    62,    -1,    15,    -1,     5,    -1,    -1,    -1,
    21,    -1,    11,    12,    62,    26,    15,    -1,    -1,    -1,
    -1,    -1,    21,    -1,    35,    36,    37,    26,    -1,    -1,
    41,    -1,    -1,    -1,    45,    -1,    35,    36,    37,    -1,
    -1,    -1,    41,     5,    -1,    -1,    45,    -1,    -1,    11,
    12,    62,    -1,    15,    -1,     5,    -1,    -1,    -1,    21,
    -1,    11,    12,    62,    26,    15,    -1,    -1,    -1,    -1,
    -1,    21,    -1,    35,    36,    37,    26,    -1,    -1,    41,
    -1,    -1,    -1,    45,    -1,    35,    36,    37,    -1,    -1,
    -1,    41,     5,    -1,    -1,    45,    -1,    -1,    11,    12,
    62,    -1,    15,    -1,     5,    -1,    -1,    -1,    21,    -1,
    11,    12,    62,    26,    15,    -1,    -1,    -1,    -1,    -1,
    21,    -1,    35,    36,    37,    26,    -1,    -1,    41,    -1,
    -1,    -1,    45,    -1,    35,    36,    37,    -1,    -1,    -1,
    41,     5,    -1,    -1,    45,    -1,    -1,    11,    12,    62,
    -1,    15,    -1,     5,    -1,    -1,    -1,    21,    -1,    11,
    12,    62,    26,    15,    -1,    -1,    -1,    -1,    -1,    21,
    -1,    35,    36,    37,    26,    -1,    -1,    41,    -1,    -1,
    -1,    45,    -1,    35,    36,    37,    -1,    -1,    -1,    41,
     5,    -1,    -1,    45,    -1,    -1,    11,    12,    62,    -1,
    15,    -1,     5,    -1,    -1,    -1,    21,    -1,    11,    12,
    62,    26,    15,    -1,    -1,    -1,    -1,    -1,    21,    -1,
    35,    36,    37,    26,    -1,    -1,    41,    -1,    -1,    -1,
    45,    -1,    35,    36,    37,    -1,    -1,    -1,    41,     5,
    -1,    -1,    45,    -1,    -1,    11,    12,    62,    -1,    15,
    -1,     5,    -1,    -1,    -1,    21,    -1,    11,    12,    62,
    26,    15,    -1,    -1,    -1,    -1,    -1,    21,    -1,    35,
    36,    37,    26,    -1,    -1,    41,    -1,    -1,    -1,    45,
    -1,    35,    36,    37,    -1,    -1,    -1,    41,    -1,    -1,
    -1,    45,    -1,     5,    -1,     5,    62,    -1,    -1,    11,
    12,    11,    12,    15,    -1,    15,    -1,    -1,    62,    21,
    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,    30,    -1,
    -1,    -1,    -1,    35,    -1,    35,    36,    -1,    -1,    -1,
     5,    41,     5,    45,    -1,    45,    11,    12,    11,    12,
    15,    -1,    15,    -1,    -1,    -1,    -1,    -1,     5,    -1,
    62,    -1,    62,    -1,    11,    12,    -1,    -1,    15,    -1,
    35,    36,    35,    36,    -1,    -1,    41,     5,    41,    -1,
    45,    -1,    45,    11,    12,    -1,     5,    15,    35,    36,
    -1,    -1,    11,    12,    41,     5,    15,    62,    45,    62,
    -1,    11,    12,    -1,    -1,    15,    -1,    35,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    62,    35,    45,    -1,    -1,
    -1,     5,    -1,     5,    43,    35,    45,    11,    12,    11,
    12,    15,     5,    15,    62,    45,    -1,    -1,    11,    12,
    -1,    -1,    15,    62,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    35,    62,    35,    -1,    -1,    -1,    -1,     5,    -1,
     5,    45,    35,    45,    11,    12,    11,    12,    15,     5,
    15,    -1,    45,    -1,    -1,    11,    12,    -1,    62,    15,
    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    62,
    35,    -1,    -1,    -1,    -1,     5,    -1,     5,    45,    35,
    45,    11,    12,    11,    12,    15,     5,    15,    -1,    45,
    -1,    -1,    11,    12,    -1,    62,    15,    62,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    35,    62,    35,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    45,    35,    45,    -1,    -1,
     0,    -1,    -1,    -1,    -1,    -1,    45,     7,     8,    -1,
    10,    -1,    62,    13,    62,    -1,    16,    17,    18,    -1,
    -1,    -1,    -1,    62,    -1,    -1,    -1,    27,    28,    -1,
    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,    39,
    40,    -1,    42,     7,     8,    -1,    10,    11,    12,    13,
    -1,    15,    16,    17,    -1,    -1,    -1,    -1,    -1,    23,
    -1,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
    -1,    35,    -1,    -1,    38,    39,    40,    -1,    42,    -1,
    -1,    45
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 218 "parser.y"
{;
    break;}
case 5:
#line 220 "parser.y"
{
                            SCENE->atmosphere()->addObject (yyvsp[0].ptAtmObject);
                          ;
    break;}
case 6:
#line 224 "parser.y"
{
                            _ptWorld->add (yyvsp[0].ptObject);
                          ;
    break;}
case 7:
#line 230 "parser.y"
{;
    break;}
case 8:
#line 232 "parser.y"
{;
    break;}
case 9:
#line 234 "parser.y"
{;
    break;}
case 10:
#line 236 "parser.y"
{;
    break;}
case 11:
#line 238 "parser.y"
{;
    break;}
case 12:
#line 240 "parser.y"
{;
    break;}
case 13:
#line 242 "parser.y"
{;
    break;}
case 14:
#line 244 "parser.y"
{;
    break;}
case 15:
#line 246 "parser.y"
{;
    break;}
case 16:
#line 248 "parser.y"
{;
    break;}
case 17:
#line 250 "parser.y"
{;
    break;}
case 18:
#line 252 "parser.y"
{;
    break;}
case 19:
#line 254 "parser.y"
{;
    break;}
case 20:
#line 256 "parser.y"
{;
    break;}
case 21:
#line 258 "parser.y"
{;
    break;}
case 22:
#line 260 "parser.y"
{;
    break;}
case 23:
#line 262 "parser.y"
{;
    break;}
case 24:
#line 264 "parser.y"
{;
    break;}
case 25:
#line 266 "parser.y"
{;
    break;}
case 26:
#line 268 "parser.y"
{;
    break;}
case 27:
#line 270 "parser.y"
{;
    break;}
case 28:
#line 272 "parser.y"
{;
    break;}
case 29:
#line 274 "parser.y"
{;
    break;}
case 30:
#line 276 "parser.y"
{;
    break;}
case 31:
#line 280 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 32:
#line 284 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 33:
#line 288 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
			  ;
    break;}
case 34:
#line 292 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 35:
#line 296 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 36:
#line 300 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 37:
#line 304 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 38:
#line 308 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 39:
#line 312 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 40:
#line 316 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 41:
#line 320 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 42:
#line 324 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 43:
#line 328 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 44:
#line 334 "parser.y"
{
			    yyval.dValue = yyvsp[0].dValue;
			  ;
    break;}
case 45:
#line 338 "parser.y"
{
                            if ( _tFunctionMap.find (yyvsp[-2].acIdent) == _tFunctionMap.end() )
                            {
			      yyerror ("function does not exist");
			      exit (1);
                            }
			    _pfFunction = _tFunctionMap [yyvsp[-2].acIdent];
			    yyval.dValue = (*_pfFunction)();
			  ;
    break;}
case 46:
#line 348 "parser.y"
{
			    yyval.dValue = yyvsp[-2].dValue + yyvsp[0].dValue;
			  ;
    break;}
case 47:
#line 352 "parser.y"
{
			    yyval.dValue = yyvsp[-2].dValue - yyvsp[0].dValue;
			  ;
    break;}
case 48:
#line 356 "parser.y"
{
			    yyval.dValue = yyvsp[-2].dValue * yyvsp[0].dValue;
			  ;
    break;}
case 49:
#line 360 "parser.y"
{
			    yyval.dValue = yyvsp[-2].dValue / yyvsp[0].dValue;
			  ;
    break;}
case 50:
#line 364 "parser.y"
{
			    yyval.dValue = -yyvsp[0].dValue;
			  ;
    break;}
case 51:
#line 368 "parser.y"
{
			    yyval.dValue = yyvsp[-1].dValue;
			  ;
    break;}
case 52:
#line 374 "parser.y"
{
			    _tVector.set (yyvsp[-5].dValue, yyvsp[-3].dValue, yyvsp[-1].dValue);
			    yyval.ptVector = &_tVector;
			  ;
    break;}
case 53:
#line 381 "parser.y"
{
			    _tVector2.set (yyvsp[-3].dValue, yyvsp[-1].dValue);
			    yyval.ptVector2 = &_tVector2;
			  ;
    break;}
case 54:
#line 388 "parser.y"
{
			    yyval.ptVector = yyvsp[0].ptVector;
			  ;
    break;}
case 55:
#line 392 "parser.y"
{
			    yyval.ptVector = yyvsp[0].ptVector;
			  ;
    break;}
case 56:
#line 398 "parser.y"
{
			    strcpy (yyval.acIdent, "");
			  ;
    break;}
case 57:
#line 402 "parser.y"
{
			    strcpy (yyval.acIdent, yyvsp[0].acIdent);
			  ;
    break;}
case 58:
#line 408 "parser.y"
{
			    strcpy (yyval.acIdent, "");
			  ;
    break;}
case 59:
#line 412 "parser.y"
{
                            if ( _tObjectMap.find (yyvsp[0].acIdent) == _tObjectMap.end() )
                            {
			      yyerror ("trying to extend from non existing object");
			      exit (1);
                            }
                            _ptParent = _tObjectMap [yyvsp[0].acIdent];
			    strcpy (yyval.acIdent, _ptParent->className().c_str());
			  ;
    break;}
case 60:
#line 422 "parser.y"
{
			    _ptParent = NULL;
			    strcpy (yyval.acIdent, yyvsp[0].acIdent);
			  ;
    break;}
case 63:
#line 433 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptVector;
			    SetParameter (yyvsp[-1].acIdent, FX_VECTOR);
			  ;
    break;}
case 64:
#line 438 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptVector2;
			    SetParameter (yyvsp[-1].acIdent, FX_VECTOR2);
			  ;
    break;}
case 65:
#line 443 "parser.y"
{
			    _nAttrib.dValue = yyvsp[0].dValue;
			    SetParameter (yyvsp[-1].acIdent, FX_REAL);
			  ;
    break;}
case 66:
#line 448 "parser.y"
{
			    _nAttrib.gValue = yyvsp[0].gValue;
			    SetParameter (yyvsp[-1].acIdent, FX_BOOL);
			  ;
    break;}
case 67:
#line 453 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].acIdent;
			    SetParameter (yyvsp[-1].acIdent, FX_STRING);
			  ;
    break;}
case 68:
#line 458 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptColor;
			    SetParameter (yyvsp[-1].acIdent, FX_COLOR);
			  ;
    break;}
case 69:
#line 463 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptColor;
			    SetParameter ("color", FX_COLOR);
			  ;
    break;}
case 70:
#line 468 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptVector;
			    SetParameter ("vector", FX_VECTOR);
			  ;
    break;}
case 71:
#line 473 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptVector;
			    SetParameter (yyvsp[-1].acIdent, FX_VECTOR);
			  ;
    break;}
case 72:
#line 478 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptCamera;
			    SetParameter (yyvsp[-1].acIdent, FX_CAMERA);
			  ;
    break;}
case 73:
#line 483 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptCamera;
			    SetParameter ("camera", FX_CAMERA);
			  ;
    break;}
case 74:
#line 488 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptRenderer;
			    SetParameter (yyvsp[-1].acIdent, FX_RENDERER);
			  ;
    break;}
case 75:
#line 493 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptRenderer;
			    SetParameter ("renderer", FX_RENDERER);
			  ;
    break;}
case 76:
#line 498 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptBsdf;
			    SetParameter (yyvsp[-1].acIdent, FX_BSDF);
			  ;
    break;}
case 77:
#line 503 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptBsdf;
			    SetParameter ("bsdf", FX_BSDF);
			  ;
    break;}
case 80:
#line 514 "parser.y"
{
			    ENTITY->translate (*yyvsp[0].ptVector);
			  ;
    break;}
case 81:
#line 518 "parser.y"
{
			    ENTITY->rotate (*yyvsp[0].ptVector);
			  ;
    break;}
case 82:
#line 522 "parser.y"
{
			    ENTITY->translate (*yyvsp[0].ptVector);
			  ;
    break;}
case 83:
#line 526 "parser.y"
{
			    ENTITY->rotate (*yyvsp[0].ptVector);
			  ;
    break;}
case 85:
#line 533 "parser.y"
{
			    VOLUME->scale (*yyvsp[0].ptVector, TVector (0, 0, 0));
			  ;
    break;}
case 89:
#line 544 "parser.y"
{
			    OBJECT->setMaterial (yyvsp[0].ptMaterial);
			  ;
    break;}
case 90:
#line 548 "parser.y"
{
			    OBJECT->addFilter (yyvsp[0].ptOFilter);
			  ;
    break;}
case 92:
#line 555 "parser.y"
{
                            if ( yyvsp[-1].acIdent == "" )
                            {
                              yyerror ("cannot define unnamed color");
                              exit (1);
                            }

                            if ( _tColorMap.find (yyvsp[-1].acIdent) != _tColorMap.end() )
                            {
                              yyerror ("cannot redefine an existing color");
                              exit (1);
                            }

                            _tColor = TColor::_black();

                            _ptParent = NULL;
			  ;
    break;}
case 93:
#line 573 "parser.y"
{
                            _tColorMap [yyvsp[-5].acIdent] = _tColor;
                            
                            yyval.ptColor = &_tColor;
			  ;
    break;}
case 94:
#line 581 "parser.y"
{
                            if ( yyvsp[0].acIdent == "" )
                            {
                              yyerror ("instanced object cannot be unnamed");
                              exit (1);
                            }

                            if ( _tColorMap.find (yyvsp[0].acIdent) == _tObjectMap.end() )
                            {
                              yyerror ("color does not exist");
                              exit (1);
                            }

                            yyval.ptColor = (TColor*) &(_tColorMap [yyvsp[0].acIdent]);
			  ;
    break;}
case 95:
#line 597 "parser.y"
{
                            _tColor = TColor::_black();
			  ;
    break;}
case 96:
#line 601 "parser.y"
{
			    yyval.ptColor = (TColor*) &_tColor;
			  ;
    break;}
case 99:
#line 611 "parser.y"
{
			    _tColor.setRed (yyvsp[0].dValue);
			  ;
    break;}
case 100:
#line 615 "parser.y"
{
			    _tColor.setGreen (yyvsp[0].dValue);
			  ;
    break;}
case 101:
#line 619 "parser.y"
{
			    _tColor.setBlue (yyvsp[0].dValue);
			  ;
    break;}
case 102:
#line 625 "parser.y"
{
                            if ( yyvsp[-1].acIdent == "" )
                            {
                              yyerror ("cannot define unnamed vector");
                              exit (1);
                            }

                            if ( _tVectorMap.find (yyvsp[-1].acIdent) != _tVectorMap.end() )
                            {
                              yyerror ("cannot redefine an existing vector");
                              exit (1);
                            }

                            _tVector = TVector (0, 0, 0);

                            _ptParent = NULL;
			  ;
    break;}
case 103:
#line 643 "parser.y"
{
                            _tVectorMap [yyvsp[-5].acIdent] = _tVector;
                            
                            yyval.ptVector = &_tVector;
			  ;
    break;}
case 104:
#line 651 "parser.y"
{
                            if ( yyvsp[0].acIdent == "" )
                            {
                              yyerror ("instanced object cannot be unnamed");
                              exit (1);
                            }

                            if ( _tVectorMap.find (yyvsp[0].acIdent) == _tVectorMap.end() )
                            {
                              yyerror ("vector does not exist");
                              exit (1);
                            }

                            yyval.ptVector = (TVector*) &(_tVectorMap [yyvsp[0].acIdent]);
			  ;
    break;}
case 105:
#line 667 "parser.y"
{
                            _tVector = TVector (0, 0, 0);
			  ;
    break;}
case 106:
#line 671 "parser.y"
{
			    yyval.ptVector = (TVector*) &_tVector;
			  ;
    break;}
case 109:
#line 681 "parser.y"
{
			    _tVector.setX (yyvsp[0].dValue);
			  ;
    break;}
case 110:
#line 685 "parser.y"
{
			    _tVector.setY (yyvsp[0].dValue);
			  ;
    break;}
case 111:
#line 689 "parser.y"
{
			    _tVector.setZ (yyvsp[0].dValue);
			  ;
    break;}
case 112:
#line 695 "parser.y"
{
                            _tDataStack.push (TImageManager::_getImageIO ("tga"));
                          ;
    break;}
case 113:
#line 699 "parser.y"
{
			    yyval.ptImageIO = (TImageIO*) _tDataStack.POP();
			  ;
    break;}
case 116:
#line 709 "parser.y"
{
                            _ptImageIO = (TImageIO*) _tDataStack.POP();
                            delete _ptImageIO;
                            
                            _ptImageIO = TImageManager::_getImageIO (yyvsp[0].acIdent);
                            if ( !_ptImageIO )
                            {
                              yyerror ("Image output type not available");
                              exit (1);
                            }
                            _tDataStack.push (_ptImageIO);
			  ;
    break;}
case 118:
#line 725 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Scene");
			  ;
    break;}
case 119:
#line 729 "parser.y"
{
			    yyval.ptScene = (TScene*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 120:
#line 735 "parser.y"
{
			    yyval.ptScene = (TScene*) InstanceObject (yyvsp[0].acIdent);
			    TSceneRT::_ptParsedScene = yyval.ptScene;
			  ;
    break;}
case 121:
#line 740 "parser.y"
{
//			    CreateObject ($1, "Scene");
			    _ptData = TSceneRT::_ptParsedScene;
			    _tDataStack.push (_ptData);
			  ;
    break;}
case 122:
#line 746 "parser.y"
{
			    yyval.ptScene = (TScene*) _tDataStack.POP();
//			    $$ = &tScene;
			  ;
    break;}
case 125:
#line 757 "parser.y"
{
			    SCENE->addLight (yyvsp[0].ptLight);
			  ;
    break;}
case 126:
#line 761 "parser.y"
{
			    SCENE->addImageFilter (yyvsp[0].ptIFilter);
			  ;
    break;}
case 127:
#line 765 "parser.y"
{
			    SCENE->setImageOutput (yyvsp[0].ptImageIO);
			  ;
    break;}
case 129:
#line 772 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "PinholeCamera");
			  ;
    break;}
case 130:
#line 776 "parser.y"
{
			    yyval.ptCamera = (TCamera*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 131:
#line 782 "parser.y"
{
			    yyval.ptCamera = (TCamera*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 132:
#line 786 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "PinholeCamera");
			  ;
    break;}
case 133:
#line 790 "parser.y"
{
			    yyval.ptCamera = (TCamera*) _tDataStack.POP();
			  ;
    break;}
case 134:
#line 796 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "PointLight");
			  ;
    break;}
case 135:
#line 800 "parser.y"
{
			    yyval.ptLight = (TLight*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 136:
#line 806 "parser.y"
{
			    yyval.ptLight = (TLight*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 137:
#line 810 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "PointLight");
			  ;
    break;}
case 138:
#line 814 "parser.y"
{
			    yyval.ptLight = (TLight*) _tDataStack.POP();
			  ;
    break;}
case 139:
#line 820 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "BsdfPhong");
			  ;
    break;}
case 140:
#line 824 "parser.y"
{
			    yyval.ptBsdf = (TBsdf*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 141:
#line 830 "parser.y"
{
			    yyval.ptBsdf = (TBsdf*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 142:
#line 834 "parser.y"
{
                            CreateObject (yyvsp[0].acIdent, "BsdfPhong");
			  ;
    break;}
case 143:
#line 838 "parser.y"
{
                            yyval.ptBsdf = (TBsdf*) _tDataStack.POP();
			  ;
    break;}
case 144:
#line 844 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Raytracer");
			  ;
    break;}
case 145:
#line 848 "parser.y"
{
			    yyval.ptRenderer = (TRenderer*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 146:
#line 854 "parser.y"
{
			    yyval.ptRenderer = (TRenderer*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 147:
#line 858 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Raytracer");
			  ;
    break;}
case 148:
#line 862 "parser.y"
{
			    yyval.ptRenderer = (TRenderer*) _tDataStack.POP();
			  ;
    break;}
case 149:
#line 868 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Material");
			  ;
    break;}
case 150:
#line 872 "parser.y"
{
                            yyval.ptMaterial = (TMaterial*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 151:
#line 878 "parser.y"
{
			    yyval.ptMaterial = (TMaterial*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 152:
#line 882 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Material");
			  ;
    break;}
case 153:
#line 886 "parser.y"
{
			    yyval.ptMaterial = (TMaterial*) _tDataStack.POP();

			  ;
    break;}
case 154:
#line 893 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "");
			  ;
    break;}
case 155:
#line 897 "parser.y"
{
			    yyval.ptIFilter = (TImageFilter*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 156:
#line 903 "parser.y"
{
			    yyval.ptIFilter = (TImageFilter*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 157:
#line 907 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "");
			  ;
    break;}
case 158:
#line 911 "parser.y"
{
			    yyval.ptIFilter = (TImageFilter*) _tDataStack.POP();
			  ;
    break;}
case 159:
#line 917 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "");
			  ;
    break;}
case 160:
#line 921 "parser.y"
{
			    yyval.ptOFilter = (TObjectFilter*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 161:
#line 927 "parser.y"
{
			    yyval.ptOFilter = (TObjectFilter*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 162:
#line 931 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "");
			  ;
    break;}
case 163:
#line 935 "parser.y"
{
			    yyval.ptOFilter = (TObjectFilter*) _tDataStack.POP();
			  ;
    break;}
case 164:
#line 941 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "");
			  ;
    break;}
case 165:
#line 945 "parser.y"
{
			    yyval.ptObject = (TObject*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 166:
#line 951 "parser.y"
{
			    yyval.ptObject = (TObject*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 167:
#line 955 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "");
			  ;
    break;}
case 168:
#line 959 "parser.y"
{
			    yyval.ptObject = (TObject*) _tDataStack.POP();
			  ;
    break;}
case 169:
#line 965 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Plane");
			  ;
    break;}
case 170:
#line 969 "parser.y"
{
			    yyval.ptObject = (TPlane*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 171:
#line 975 "parser.y"
{
			    yyval.ptObject = (TPlane*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 172:
#line 979 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Plane");
			  ;
    break;}
case 173:
#line 983 "parser.y"
{
			    yyval.ptObject = (TPlane*) _tDataStack.POP();
			  ;
    break;}
case 174:
#line 989 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Sphere");
			  ;
    break;}
case 175:
#line 993 "parser.y"
{
			    yyval.ptObject = (TSphere*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 176:
#line 999 "parser.y"
{
			    yyval.ptObject = (TSphere*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 177:
#line 1003 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Sphere");
			  ;
    break;}
case 178:
#line 1007 "parser.y"
{
			    yyval.ptObject = (TSphere*) _tDataStack.POP();
			  ;
    break;}
case 179:
#line 1013 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Triangle");
			    _bVertices = 0;
			  ;
    break;}
case 180:
#line 1018 "parser.y"
{
			    if ( _bVertices != 3 )
			    {
			      yyerror ("wrong number of vertices in triangle");
			      exit (1);
			    }
			    yyval.ptObject = (TTriangle*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 181:
#line 1029 "parser.y"
{
			    yyval.ptObject = (TTriangle*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 182:
#line 1033 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Triangle");
			    _bVertices = 0;
			  ;
    break;}
case 183:
#line 1038 "parser.y"
{
			    if ( _bVertices != 3 )
			    {
			      yyerror ("wrong number of vertices in triangle");
			      exit (1);
			    }
			    yyval.ptObject = (TTriangle*) _tDataStack.POP();
			  ;
    break;}
case 186:
#line 1053 "parser.y"
{
			    TRIANGLE->setVertex (*yyvsp[0].ptVector);
			    _bVertices++;
			  ;
    break;}
case 188:
#line 1061 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "PhongTriangle");
			    _bVertices = 0;
			  ;
    break;}
case 189:
#line 1066 "parser.y"
{
			    if ( _bVertices != 3 )
			    {
			      yyerror ("wrong number of vertices in phong_triangle");
			      exit (1);
			    }
			    yyval.ptObject = (TPhongTriangle*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 190:
#line 1077 "parser.y"
{
			    yyval.ptObject = (TPhongTriangle*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 191:
#line 1081 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "PhongTriangle");
			    _bVertices = 0;
			  ;
    break;}
case 192:
#line 1086 "parser.y"
{
			    if ( _bVertices != 3 )
			    {
			      yyerror ("wrong number of vertices in phong_triangle");
			      exit (1);
			    }
			    yyval.ptObject = (TPhongTriangle*) _tDataStack.POP();
			  ;
    break;}
case 195:
#line 1101 "parser.y"
{
			    TRIANGLE->setVertex (*yyvsp[0].ptVector);
			    _bVertices++;
			  ;
    break;}
case 197:
#line 1109 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Rectangle");
			    _bVertices = 0;
			  ;
    break;}
case 198:
#line 1114 "parser.y"
{
			    if ( _bVertices != 4 )
			    {
			      yyerror ("wrong number of vertices in rectangle");
			      exit (1);
			    }
			    yyval.ptObject = (TRectangle*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 199:
#line 1125 "parser.y"
{
			    yyval.ptObject = (TRectangle*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 200:
#line 1129 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Rectangle");
			    _bVertices = 0;
			  ;
    break;}
case 201:
#line 1134 "parser.y"
{
			    if ( _bVertices != 4 )
			    {
			      yyerror ("wrong number of vertices in rectangle");
			      exit (1);
			    }
			    yyval.ptObject = (TRectangle*) _tDataStack.POP();
			  ;
    break;}
case 204:
#line 1149 "parser.y"
{
			    RECTANGLE->setVertex (*yyvsp[0].ptVector);
			    _bVertices++;
			  ;
    break;}
case 206:
#line 1157 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Circle");
			  ;
    break;}
case 207:
#line 1161 "parser.y"
{
			    yyval.ptObject = (TCircle*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 208:
#line 1167 "parser.y"
{
			    yyval.ptObject = (TCircle*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 209:
#line 1171 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Circle");
			  ;
    break;}
case 210:
#line 1175 "parser.y"
{
			    yyval.ptObject = (TCircle*) _tDataStack.POP();
			  ;
    break;}
case 213:
#line 1185 "parser.y"
{
			    AGGREGATE->add (yyvsp[0].ptObject);
			  ;
    break;}
case 215:
#line 1192 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Aggregate");
			  ;
    break;}
case 216:
#line 1196 "parser.y"
{
			    yyval.ptObject = (TAggregate*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 217:
#line 1202 "parser.y"
{
			    yyval.ptObject = (TAggregate*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 218:
#line 1206 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Aggregate");
			  ;
    break;}
case 219:
#line 1210 "parser.y"
{
			    yyval.ptObject = (TAggregate*) _tDataStack.POP();
			  ;
    break;}
case 220:
#line 1216 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "AtmConst");
			  ;
    break;}
case 221:
#line 1220 "parser.y"
{
			    yyval.ptAtmObject = (TAtmosphericObject*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 222:
#line 1226 "parser.y"
{
			    yyval.ptAtmObject = (TAtmosphericObject*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 223:
#line 1230 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "AtmConst");
			  ;
    break;}
case 224:
#line 1234 "parser.y"
{
			    yyval.ptAtmObject = (TAtmosphericObject*) _tDataStack.POP();
			  ;
    break;}
case 225:
#line 1240 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Box");
			  ;
    break;}
case 226:
#line 1244 "parser.y"
{
			    yyval.ptObject = (TBox*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 227:
#line 1250 "parser.y"
{
			    yyval.ptObject = (TBox*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 228:
#line 1254 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Box");
			  ;
    break;}
case 229:
#line 1258 "parser.y"
{
			    yyval.ptObject = (TBox*) _tDataStack.POP();
			  ;
    break;}
case 230:
#line 1264 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Cylinder");
			  ;
    break;}
case 231:
#line 1268 "parser.y"
{
			    yyval.ptObject = (TCylinder*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 232:
#line 1274 "parser.y"
{
			    yyval.ptObject = (TCylinder*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 233:
#line 1278 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Cylinder");
			  ;
    break;}
case 234:
#line 1282 "parser.y"
{
			    yyval.ptObject = (TCylinder*) _tDataStack.POP();
			  ;
    break;}
case 235:
#line 1288 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Cone");
			  ;
    break;}
case 236:
#line 1292 "parser.y"
{
			    yyval.ptObject = (TCone*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 237:
#line 1298 "parser.y"
{
			    yyval.ptObject = (TCone*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 238:
#line 1302 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Cone");
			  ;
    break;}
case 239:
#line 1306 "parser.y"
{
			    yyval.ptObject = (TCone*) _tDataStack.POP();
	       		  ;
    break;}
case 240:
#line 1312 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Torus");
			  ;
    break;}
case 241:
#line 1316 "parser.y"
{
			    yyval.ptObject = (TTorus*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 242:
#line 1322 "parser.y"
{
			    yyval.ptObject = (TTorus*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 243:
#line 1326 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Torus");
			  ;
    break;}
case 244:
#line 1330 "parser.y"
{
			    yyval.ptObject = (TTorus*) _tDataStack.POP();
			  ;
    break;}
case 245:
#line 1336 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Mesh");
			  ;
    break;}
case 246:
#line 1340 "parser.y"
{
			    yyval.ptObject = (TMeshObject*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 247:
#line 1346 "parser.y"
{
			    yyval.ptObject = (TMeshObject*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 248:
#line 1350 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Mesh");
			  ;
    break;}
case 249:
#line 1354 "parser.y"
{
			    yyval.ptObject = (TMeshObject*) _tDataStack.POP();
			  ;
    break;}
case 252:
#line 1364 "parser.y"
{
			    MESH->addTriangle ((TTriangle*) yyvsp[0].ptObject);
                            delete yyvsp[0].ptObject;
			  ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1371 "parser.y"


void rt_error (const char* pkcTEXT)
{

  cerr << endl << TSceneRT::_tInputFileName << "(" << TSceneRT::_dwLineNumber << ") Error: " << pkcTEXT << endl;

}  /* rt_error() */


void RT_InitParser (void)
{

  InitObjects();
  InitFunctions();

  _ptWorld = new TAggregate();
  
  TSceneRT::_ptParsedScene->setWorld (_ptWorld);
  
}  /* RT_InitParser() */


void RT_CloseParser (void)
{

  _tObjectMap.clear();

}  /* RT_CloseParser() */


void InitFunctions (void)
{

  _tFunctionMap ["rand"] = (double(*)(void)) &frand;

}  /* InitFunctions() */


void InitObjects (void)
{
}  /* InitObjects() */


TProcedural* NewObject (const string& rktCLASS, const TProcedural* pktPARENT)
{

  TProcedural*   ptChild;

//  cout << "New object : \"" << rktCLASS << "\"" << endl;

  ptChild = (TProcedural*) TClassManager::_newObject (rktCLASS, pktPARENT);
  if ( !ptChild )
  {
    string   tMessage = string ("class ") + rktCLASS + " does not exist";
    yyerror (tMessage.c_str());
    exit (1);
  }

  return ptChild;

}  /* NewObject() */


void* InstanceObject (const string& rktNAME)
{

  void*   pvObject;

  if ( rktNAME == "" )
  {
    yyerror ("instanced object cannot be unnamed");
    exit (1);
  }

  if ( _tObjectMap.find (rktNAME) == _tObjectMap.end() )
  {
    yyerror ("object does not exist");
    exit (1);
  }

  pvObject = _tObjectMap [rktNAME];

  return pvObject;

}  /* InstanceObject() */


void* UpdateObject (const string& rktNAME)
{

  TProcedural*   ptObject;

//  cout << "Updating object : \"" << rktNAME << "\"" << endl;

  ptObject = _tDataStack.POP();

  _tObjectMap [rktNAME] = ptObject;

  return ptObject;

}  /* UpdateObject() */


void DefineObject (const string& rktNAME, const string& rktCLASS, const string& rktDEF_CLASS)
{

//  cout << "Defining object : \"" << rktNAME << "\", \"" << rktCLASS << "\", \"" << rktDEF_CLASS << "\"" << endl;

  if ( rktNAME == "" )
  {
    yyerror ("defined object cannot be unnamed");
    exit (1);
  }

  if ( _tObjectMap.find (rktNAME) != _tObjectMap.end() )
  {
    yyerror ("cannot redefine an existing object");
    exit (1);
  }

  if ( rktCLASS == "" )
  {
    _ptData = NewObject (rktDEF_CLASS, _ptParent);
  }
  else
  {
    _ptData = NewObject (rktCLASS, _ptParent);
  }

  _tDataStack.push (_ptData);
  _ptParent = NULL;

}  /* DefineObject() */


void CreateObject (const string& rktCLASS, const string& rktDEF_CLASS)
{

//  cout << "Creating object : \"" << rktCLASS << "\", \"" << rktDEF_CLASS << "\"" << endl;
  
  if ( rktCLASS == "" )
  {
    _ptData = NewObject (rktDEF_CLASS, _ptParent);
  }
  else
  {
    _ptData = NewObject (rktCLASS, _ptParent);
  }

  _tDataStack.push (_ptData);
  _ptParent = NULL;

}  /* CreateObject() */


void SetParameter (const string& rktATTRIB, EAttribType eTYPE)
{

  int   iResult;

  iResult = DATA->setAttribute (rktATTRIB, _nAttrib, eTYPE);

  if ( iResult == FX_ATTRIB_WRONG_PARAM )
  {
    yyerror ("object does not have such parameter");
    exit (1);
  }
  else if ( iResult == FX_ATTRIB_WRONG_TYPE )
  {
    yyerror ("incorrect type in parameter value");
    exit (1);
  }
  else if ( iResult == FX_ATTRIB_USER_ERROR )
  {
    yyerror (TProcedural::_tUserErrorMessage.c_str());
    exit (1);
  }

}  /* SetParameter() */
