
/*  A Bison parser, made from parser.y
 by  GNU Bison version 1.27
  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse rt_parse
#define yylex rt_lex
#define yyerror rt_error
#define yylval rt_lval
#define yychar rt_char
#define yydebug rt_debug
#define yynerrs rt_nerrs
#define	T_BOOL	257
#define	T_REAL	258
#define	T_IDENTIFIER	259
#define	T_QUOTED_STRING	260
#define	T_AGGREGATE	261
#define	T_ATM_OBJECT	262
#define	T_BLUE	263
#define	T_BOX	264
#define	T_BSDF	265
#define	T_CAMERA	266
#define	T_CIRCLE	267
#define	T_CLASS	268
#define	T_COLOR	269
#define	T_CONE	270
#define	T_CYLINDER	271
#define	T_DEFINE	272
#define	T_DIFFERENCE	273
#define	T_EXTENDS	274
#define	T_FILTER	275
#define	T_GREEN	276
#define	T_IMAGE_FILTER	277
#define	T_INTERSECTION	278
#define	T_LIGHT	279
#define	T_MATERIAL	280
#define	T_MESH	281
#define	T_OBJECT	282
#define	T_OBJECT_FILTER	283
#define	T_OUTPUT	284
#define	T_PHONG_TRIANGLE	285
#define	T_PLANE	286
#define	T_RECTANGLE	287
#define	T_RED	288
#define	T_RENDERER	289
#define	T_ROTATE	290
#define	T_SCALE	291
#define	T_SCENE	292
#define	T_SPHERE	293
#define	T_TORUS	294
#define	T_TRANSLATE	295
#define	T_TRIANGLE	296
#define	T_TYPE	297
#define	T_UNION	298
#define	T_VECTOR	299
#define	T_VERTEX	300
#define	T_X	301
#define	T_Y	302
#define	T_Z	303
#define	UNARY_MINUS	304

#line 19 "parser.y"


#include <map>
#include <stack>
#include <string>
#include <iostream>
#include "llapi/llapi_all.h"
#include "hlapi/hlapi_all.h"
#include "hlapi/class_manager.h"
#include "parser_defs.h"
#include "rt_io.h"

static map<string, TProcedural*, less<string> >       _tObjectMap;
static map<string, TColor, less<string> >             _tColorMap;
static map<string, TVector, less<string> >            _tVectorMap;
static map<string, double(*)(void), less<string> >    _tFunctionMap;
static stack<TProcedural*>                            _tDataStack;

static TProcedural*   _ptData;
static TProcedural*   _ptParent;
static Byte           _bVertices;
static TVector        _tVector;
static TVector2       _tVector2;
static TColor         _tColor;
static TAggregate*    _ptWorld;
static NAttribute     _nAttrib;
static TImageIO*      _ptImageIO;

static double (*_pfFunction)(void);

#define POP()           top(); _tDataStack.pop()            // Fix to STL's pop()

#define DATA		(_tDataStack.top())
#define ENTITY		((TEntity*) _tDataStack.top())
#define VOLUME		((TVolume*) _tDataStack.top())
#define VECTOR		((TVector*) _tDataStack.top())
#define COLOR		((TColor*) _tDataStack.top())
#define SCENE		(TSceneRT::_ptParsedScene)
#define MATERIAL	((TMaterial*) _tDataStack.top())
#define OBJECT		((TObject*) _tDataStack.top())
#define AGGREGATE	((TAggregate*) _tDataStack.top())
#define TRIANGLE	((TTriangle*) _tDataStack.top())
#define RECTANGLE	((TRectangle*) _tDataStack.top())
#define MESH		((TMeshObject*) _tDataStack.top())

#define YYDEBUG 1

static TProcedural* NewObject (const string& rktCLASS, const TProcedural* pktPARENT);
static void* InstanceObject (const string& rktNAME);
static void* UpdateObject (const string& rktNAME);
static void DefineObject (const string& rktNAME, const string& rktCLASS, const string& rktDEF_CLASS);
static void CreateObject (const string& rktCLASS, const string& rktDEF_CLASS);
static void SetParameter (const string& rktATTRIB, EAttribType eTYPE);

static void InitObjects (void);
static void InitFunctions (void);


#line 78 "parser.y"
typedef union {
         char                  acIdent [200];
         double                dValue;
         bool                  gValue;
         TColor*               ptColor;
         TVector*              ptVector;
         TVector2*             ptVector2;
         TScene*               ptScene;
         TRenderer*            ptRenderer;
         TCamera*              ptCamera;
         TLight*               ptLight;
         TBsdf*                ptBsdf;
         TMaterial*            ptMaterial;
         TObject*              ptObject;
         TImageFilter*         ptIFilter;
         TObjectFilter*        ptOFilter;
         TAtmosphericObject*   ptAtmObject;
         TImageIO*             ptImageIO;
       } YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		523
#define	YYFLAG		-32768
#define	YYNTBASE	63

#define YYTRANSLATE(x) ((unsigned)(x) <= 304 ? yytranslate[x] : 200)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    55,
    56,    52,    50,    58,    51,     2,    53,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    60,     2,    57,
     2,    59,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    61,     2,    62,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    54
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     4,     7,    10,    13,    15,    19,    23,    27,
    31,    35,    39,    43,    47,    51,    55,    59,    63,    67,
    71,    75,    79,    83,    87,    91,    95,    99,   103,   107,
   111,   115,   119,   123,   126,   129,   132,   135,   138,   141,
   144,   147,   150,   153,   156,   159,   162,   165,   168,   171,
   173,   177,   181,   185,   189,   193,   196,   200,   208,   214,
   216,   219,   220,   222,   223,   227,   231,   232,   235,   238,
   241,   244,   247,   250,   253,   256,   259,   262,   265,   268,
   271,   274,   277,   280,   281,   284,   287,   290,   293,   296,
   298,   301,   303,   304,   307,   310,   313,   315,   316,   323,
   325,   326,   332,   333,   336,   339,   342,   345,   346,   353,
   355,   356,   362,   363,   366,   369,   372,   375,   376,   381,
   382,   385,   388,   390,   391,   398,   400,   401,   407,   408,
   411,   414,   417,   420,   422,   423,   430,   432,   433,   439,
   440,   447,   449,   450,   456,   457,   464,   466,   467,   473,
   474,   481,   483,   484,   490,   491,   498,   500,   501,   507,
   508,   515,   517,   518,   524,   525,   532,   534,   535,   541,
   542,   549,   551,   552,   558,   559,   566,   568,   569,   575,
   576,   583,   585,   586,   592,   593,   600,   602,   603,   609,
   610,   613,   615,   617,   618,   625,   627,   628,   634,   635,
   638,   640,   642,   643,   650,   652,   653,   659,   660,   663,
   665,   667,   668,   675,   677,   678,   684,   685,   688,   690,
   692,   693,   700,   702,   703,   709,   710,   717,   719,   720,
   726,   727,   734,   736,   737,   743,   744,   751,   753,   754,
   760,   761,   768,   770,   771,   777,   778,   785,   787,   788,
   794,   795,   802,   804,   805,   811,   812,   815,   818,   820,
   821,   828,   830,   831
};

static const short yyrhs[] = {    -1,
    63,    64,     0,    63,    65,     0,    38,    98,     0,     8,
   172,     0,    66,     0,    18,    15,    80,     0,    18,    45,
    86,     0,    18,    28,   130,     0,    18,    38,    96,     0,
    18,    12,   102,     0,    18,    25,   106,     0,    18,    11,
   110,     0,    18,    23,   122,     0,    18,    29,   126,     0,
    18,    35,   114,     0,    18,    26,   118,     0,    18,    32,
   134,     0,    18,    39,   138,     0,    18,    42,   142,     0,
    18,    31,   148,     0,    18,    33,   154,     0,    18,    13,
   160,     0,    18,     7,   166,     0,    18,    10,   174,     0,
    18,    17,   178,     0,    18,    16,   182,     0,    18,    40,
   186,     0,    18,    27,   190,     0,    18,     8,   170,     0,
    18,    44,   196,     0,    18,    24,   196,     0,    18,    19,
   196,     0,    28,   132,     0,    32,   136,     0,    39,   140,
     0,    42,   144,     0,    31,   150,     0,    33,   156,     0,
    13,   162,     0,     7,   168,     0,    10,   176,     0,    17,
   180,     0,    16,   184,     0,    40,   188,     0,    27,   192,
     0,    44,   198,     0,    24,   198,     0,    19,   198,     0,
     4,     0,     5,    55,    56,     0,    67,    50,    67,     0,
    67,    51,    67,     0,    67,    52,    67,     0,    67,    53,
    67,     0,    51,    67,     0,    55,    67,    56,     0,    57,
    67,    58,    67,    58,    67,    59,     0,    57,    67,    58,
    67,    59,     0,    68,     0,    46,    68,     0,     0,     5,
     0,     0,    60,    20,     5,     0,    60,    14,     5,     0,
     0,    73,    74,     0,     5,    68,     0,     5,    69,     0,
     5,    67,     0,     5,     3,     0,     5,     6,     0,     5,
    82,     0,    15,    82,     0,    45,    88,     0,     5,    88,
     0,     5,   104,     0,    12,   104,     0,     5,   116,     0,
    35,   116,     0,     5,   112,     0,    11,   112,     0,     0,
    75,    76,     0,    41,    68,     0,    36,    68,     0,    41,
    88,     0,    36,    88,     0,    74,     0,    37,    68,     0,
    76,     0,     0,    78,    79,     0,    26,   120,     0,    21,
   128,     0,    77,     0,     0,    71,    72,    81,    61,    84,
    62,     0,    71,     0,     0,    72,    83,    61,    84,    62,
     0,     0,    84,    85,     0,    34,    67,     0,    22,    67,
     0,     9,    67,     0,     0,    71,    72,    87,    61,    90,
    62,     0,    71,     0,     0,    72,    89,    61,    90,    62,
     0,     0,    90,    91,     0,    47,    67,     0,    48,    67,
     0,    49,    67,     0,     0,    61,    93,    94,    62,     0,
     0,    94,    95,     0,    43,     6,     0,    74,     0,     0,
    71,    72,    97,    61,   100,    62,     0,    71,     0,     0,
    72,    99,    61,   100,    62,     0,     0,   100,   101,     0,
    25,   108,     0,    21,   124,     0,    30,    92,     0,    74,
     0,     0,    71,    72,   103,    61,    75,    62,     0,    71,
     0,     0,    72,   105,    61,    75,    62,     0,     0,    71,
    72,   107,    61,    75,    62,     0,    71,     0,     0,    72,
   109,    61,    75,    62,     0,     0,    71,    72,   111,    61,
    73,    62,     0,    71,     0,     0,    72,   113,    61,    73,
    62,     0,     0,    71,    72,   115,    61,    73,    62,     0,
    71,     0,     0,    72,   117,    61,    73,    62,     0,     0,
    71,    72,   119,    61,    73,    62,     0,    71,     0,     0,
    72,   121,    61,    73,    62,     0,     0,    71,    72,   123,
    61,    73,    62,     0,    71,     0,     0,    72,   125,    61,
    73,    62,     0,     0,    71,    72,   127,    61,    73,    62,
     0,    71,     0,     0,    72,   129,    61,    73,    62,     0,
     0,    71,    72,   131,    61,    78,    62,     0,    71,     0,
     0,    72,   133,    61,    78,    62,     0,     0,    71,    72,
   135,    61,    78,    62,     0,    71,     0,     0,    72,   137,
    61,    78,    62,     0,     0,    71,    72,   139,    61,    78,
    62,     0,    71,     0,     0,    72,   141,    61,    78,    62,
     0,     0,    71,    72,   143,    61,   146,    62,     0,    71,
     0,     0,    72,   145,    61,   146,    62,     0,     0,   146,
   147,     0,    70,     0,    79,     0,     0,    71,    72,   149,
    61,   152,    62,     0,    71,     0,     0,    72,   151,    61,
   152,    62,     0,     0,   152,   153,     0,    70,     0,    79,
     0,     0,    71,    72,   155,    61,   158,    62,     0,    71,
     0,     0,    72,   157,    61,   158,    62,     0,     0,   158,
   159,     0,    70,     0,    79,     0,     0,    71,    72,   161,
    61,    78,    62,     0,    71,     0,     0,    72,   163,    61,
    78,    62,     0,     0,   164,   165,     0,    66,     0,    79,
     0,     0,    71,    72,   167,    61,   164,    62,     0,    71,
     0,     0,    72,   169,    61,   164,    62,     0,     0,    71,
    72,   171,    61,    73,    62,     0,    71,     0,     0,    72,
   173,    61,    73,    62,     0,     0,    71,    72,   175,    61,
    78,    62,     0,    71,     0,     0,    72,   177,    61,    78,
    62,     0,     0,    71,    72,   179,    61,    78,    62,     0,
    71,     0,     0,    72,   181,    61,    78,    62,     0,     0,
    71,    72,   183,    61,    78,    62,     0,    71,     0,     0,
    72,   185,    61,    78,    62,     0,     0,    71,    72,   187,
    61,    78,    62,     0,    71,     0,     0,    72,   189,    61,
    78,    62,     0,     0,    71,    72,   191,    61,   194,    62,
     0,    71,     0,     0,    72,   193,    61,   194,    62,     0,
     0,   194,   195,     0,    42,   144,     0,    79,     0,     0,
    71,    72,   197,    61,   164,    62,     0,    71,     0,     0,
    72,   199,    61,   164,    62,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   214,   215,   216,   219,   221,   225,   231,   233,   235,   237,
   239,   241,   243,   245,   247,   249,   251,   253,   255,   257,
   259,   261,   263,   265,   267,   269,   271,   273,   275,   277,
   279,   281,   283,   287,   291,   295,   299,   303,   307,   311,
   315,   319,   323,   327,   331,   335,   339,   344,   349,   356,
   360,   370,   374,   378,   382,   386,   390,   396,   403,   410,
   414,   420,   424,   430,   434,   444,   451,   452,   455,   460,
   465,   470,   475,   480,   485,   490,   495,   500,   505,   510,
   515,   520,   525,   532,   533,   536,   540,   544,   548,   552,
   555,   559,   562,   563,   566,   570,   574,   577,   595,   603,
   619,   623,   629,   630,   633,   637,   641,   647,   665,   673,
   689,   693,   699,   700,   703,   707,   711,   717,   721,   727,
   728,   731,   744,   747,   751,   757,   762,   768,   775,   776,
   779,   783,   787,   791,   794,   798,   804,   808,   812,   818,
   822,   828,   832,   836,   842,   846,   852,   856,   860,   866,
   870,   876,   880,   884,   890,   894,   900,   904,   908,   915,
   919,   925,   929,   933,   939,   943,   949,   953,   957,   963,
   967,   973,   977,   981,   987,   991,   997,  1001,  1005,  1011,
  1015,  1021,  1025,  1029,  1035,  1040,  1051,  1055,  1060,  1071,
  1072,  1075,  1080,  1083,  1088,  1099,  1103,  1108,  1119,  1120,
  1123,  1128,  1131,  1136,  1147,  1151,  1156,  1167,  1168,  1171,
  1176,  1179,  1183,  1189,  1193,  1197,  1203,  1204,  1207,  1211,
  1214,  1218,  1224,  1228,  1232,  1238,  1242,  1248,  1252,  1256,
  1262,  1266,  1272,  1276,  1280,  1286,  1290,  1296,  1300,  1304,
  1310,  1314,  1320,  1324,  1328,  1334,  1338,  1344,  1348,  1352,
  1358,  1362,  1368,  1372,  1376,  1382,  1383,  1386,  1391,  1394,
  1398,  1404,  1408,  1412
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","T_BOOL",
"T_REAL","T_IDENTIFIER","T_QUOTED_STRING","T_AGGREGATE","T_ATM_OBJECT","T_BLUE",
"T_BOX","T_BSDF","T_CAMERA","T_CIRCLE","T_CLASS","T_COLOR","T_CONE","T_CYLINDER",
"T_DEFINE","T_DIFFERENCE","T_EXTENDS","T_FILTER","T_GREEN","T_IMAGE_FILTER",
"T_INTERSECTION","T_LIGHT","T_MATERIAL","T_MESH","T_OBJECT","T_OBJECT_FILTER",
"T_OUTPUT","T_PHONG_TRIANGLE","T_PLANE","T_RECTANGLE","T_RED","T_RENDERER","T_ROTATE",
"T_SCALE","T_SCENE","T_SPHERE","T_TORUS","T_TRANSLATE","T_TRIANGLE","T_TYPE",
"T_UNION","T_VECTOR","T_VERTEX","T_X","T_Y","T_Z","'+'","'-'","'*'","'/'","UNARY_MINUS",
"'('","')'","'<'","','","'>'","':'","'{'","'}'","everything","instance","definition",
"object","real_expr","vector3","vector2","vertex_instance","name","class","params",
"param","entity_params","entity_param","volume_param","object_params","object_param",
"color_def","@1","color_instance","@2","color_params","color_param","vector_def",
"@3","vector_instance","@4","vector_params","vector_param","image_io_instance",
"@5","image_io_params","image_io_param","scene_def","@6","scene_instance","@7",
"scene_params","scene_param","camera_def","@8","camera_instance","@9","light_def",
"@10","light_instance","@11","bsdf_def","@12","bsdf_instance","@13","renderer_def",
"@14","renderer_instance","@15","material_def","@16","material_instance","@17",
"ifilter_def","@18","ifilter_instance","@19","ofilter_def","@20","ofilter_instance",
"@21","object_def","@22","object_instance","@23","plane_def","@24","plane_instance",
"@25","sphere_def","@26","sphere_instance","@27","triangle_def","@28","triangle_instance",
"@29","triangle_params","triangle_param","phong_triangle_def","@30","phong_triangle_instance",
"@31","phong_triangle_params","phong_triangle_param","rectangle_def","@32","rectangle_instance",
"@33","rectangle_params","rectangle_param","circle_def","@34","circle_instance",
"@35","aggregate_params","aggregate_param","aggregate_def","@36","aggregate_instance",
"@37","atm_object_def","@38","atm_object_instance","@39","box_def","@40","box_instance",
"@41","cylinder_def","@42","cylinder_instance","@43","cone_def","@44","cone_instance",
"@45","torus_def","@46","torus_instance","@47","mesh_def","@48","mesh_instance",
"@49","mesh_params","mesh_param","csg_def","@50","csg_instance","@51", NULL
};
#endif

static const short yyr1[] = {     0,
    63,    63,    63,    64,    64,    64,    65,    65,    65,    65,
    65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
    65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
    65,    65,    65,    66,    66,    66,    66,    66,    66,    66,
    66,    66,    66,    66,    66,    66,    66,    66,    66,    67,
    67,    67,    67,    67,    67,    67,    67,    68,    69,    70,
    70,    71,    71,    72,    72,    72,    73,    73,    74,    74,
    74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
    74,    74,    74,    75,    75,    76,    76,    76,    76,    76,
    77,    77,    78,    78,    79,    79,    79,    81,    80,    82,
    83,    82,    84,    84,    85,    85,    85,    87,    86,    88,
    89,    88,    90,    90,    91,    91,    91,    93,    92,    94,
    94,    95,    95,    97,    96,    98,    99,    98,   100,   100,
   101,   101,   101,   101,   103,   102,   104,   105,   104,   107,
   106,   108,   109,   108,   111,   110,   112,   113,   112,   115,
   114,   116,   117,   116,   119,   118,   120,   121,   120,   123,
   122,   124,   125,   124,   127,   126,   128,   129,   128,   131,
   130,   132,   133,   132,   135,   134,   136,   137,   136,   139,
   138,   140,   141,   140,   143,   142,   144,   145,   144,   146,
   146,   147,   147,   149,   148,   150,   151,   150,   152,   152,
   153,   153,   155,   154,   156,   157,   156,   158,   158,   159,
   159,   161,   160,   162,   163,   162,   164,   164,   165,   165,
   167,   166,   168,   169,   168,   171,   170,   172,   173,   172,
   175,   174,   176,   177,   176,   179,   178,   180,   181,   180,
   183,   182,   184,   185,   184,   187,   186,   188,   189,   188,
   191,   190,   192,   193,   192,   194,   194,   195,   195,   197,
   196,   198,   199,   198
};

static const short yyr2[] = {     0,
     0,     2,     2,     2,     2,     1,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     1,
     3,     3,     3,     3,     3,     2,     3,     7,     5,     1,
     2,     0,     1,     0,     3,     3,     0,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     0,     2,     2,     2,     2,     2,     1,
     2,     1,     0,     2,     2,     2,     1,     0,     6,     1,
     0,     5,     0,     2,     2,     2,     2,     0,     6,     1,
     0,     5,     0,     2,     2,     2,     2,     0,     4,     0,
     2,     2,     1,     0,     6,     1,     0,     5,     0,     2,
     2,     2,     2,     1,     0,     6,     1,     0,     5,     0,
     6,     1,     0,     5,     0,     6,     1,     0,     5,     0,
     6,     1,     0,     5,     0,     6,     1,     0,     5,     0,
     6,     1,     0,     5,     0,     6,     1,     0,     5,     0,
     6,     1,     0,     5,     0,     6,     1,     0,     5,     0,
     6,     1,     0,     5,     0,     6,     1,     0,     5,     0,
     2,     1,     1,     0,     6,     1,     0,     5,     0,     2,
     1,     1,     0,     6,     1,     0,     5,     0,     2,     1,
     1,     0,     6,     1,     0,     5,     0,     2,     1,     1,
     0,     6,     1,     0,     5,     0,     6,     1,     0,     5,
     0,     6,     1,     0,     5,     0,     6,     1,     0,     5,
     0,     6,     1,     0,     5,     0,     6,     1,     0,     5,
     0,     6,     1,     0,     5,     0,     2,     2,     1,     0,
     6,     1,     0,     5
};

static const short yydefact[] = {     1,
     0,    62,    62,    62,    62,    62,    62,     0,    62,    62,
    62,    62,    62,    62,    62,    62,    62,    62,    62,    62,
     2,     3,     6,    63,     0,   223,   224,    41,   228,   229,
     5,   233,   234,    42,   214,   215,    40,   243,   244,    44,
   238,   239,    43,    62,    62,    62,    62,    62,    62,    62,
    62,    62,    62,    62,    62,    62,    62,    62,    62,    62,
    62,    62,    62,    62,    62,    62,    62,    62,    62,    62,
   262,   263,    49,    48,   253,   254,    46,   172,   173,    34,
   196,   197,    38,   177,   178,    35,   205,   206,    39,   126,
   127,     4,   182,   183,    36,   248,   249,    45,   187,   188,
    37,    47,     0,     0,     0,     0,     0,     0,     0,     0,
    64,    24,    64,    30,    64,    25,    64,    13,    64,    11,
    64,    23,    64,     7,    64,    27,    64,    26,    64,    33,
    64,    14,    32,    64,    12,    64,    17,    64,    29,    64,
     9,    64,    15,    64,    21,    64,    18,    64,    22,    64,
    16,    64,    10,    64,    19,    64,    28,    64,    20,    31,
    64,     8,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    66,    65,   217,    67,    93,    93,    93,    93,
   221,   226,   231,   145,   135,   212,    98,   241,   236,   260,
   160,   140,   155,   251,   170,   165,   194,   175,   203,   150,
   124,   180,   246,   185,   108,   217,   256,    93,   199,    93,
   208,   129,    93,    93,   190,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    62,    62,    62,    62,
    62,    62,    62,    62,     0,    62,    62,   225,   219,    90,
    92,    97,   220,   218,   230,    68,   235,    94,   216,   245,
   240,   217,    67,    93,    67,    84,    93,   103,    93,    93,
   217,    67,    84,    67,   256,    93,    67,   199,    93,   208,
    67,   129,    93,    93,   190,   113,   264,    62,   255,   259,
   257,   174,     0,     0,   198,    60,   201,   202,   200,   179,
   207,   210,   211,   209,    62,    62,     0,   128,   134,   130,
   184,   250,   189,   192,   193,   191,    72,    50,    63,    73,
     0,     0,     0,    71,    69,    70,   100,   101,    74,    77,
    78,    82,    80,   147,   148,    83,   137,   138,    79,   100,
   101,    75,   167,   168,    96,   157,   158,    95,   152,   153,
    81,    87,   110,   111,    89,    91,    86,    88,    76,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   258,    61,     0,     0,   162,   163,
   132,   142,   143,   131,   118,   133,     0,    56,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   222,   227,   232,   146,   136,    85,   213,     0,     0,
     0,    99,   104,   242,   237,   261,   161,   141,   156,   252,
   171,   166,   195,   176,   204,   151,   125,   181,   247,   186,
     0,     0,     0,   109,   114,     0,     0,     0,   120,    51,
    57,     0,    52,    53,    54,    55,   103,   113,    84,    67,
    67,    67,    67,   107,   106,   105,   115,   116,   117,     0,
    67,    84,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   119,   123,   121,    59,   102,
   112,   139,   149,   154,   169,   159,     0,   164,   144,   122,
    58,     0,     0
};

static const short yydefgoto[] = {     1,
    21,    22,   269,   344,   316,   346,   317,    71,    72,   217,
   270,   384,   271,   272,   218,   278,   124,   228,   349,   425,
   386,   443,   162,   246,   350,   426,   404,   465,   416,   469,
   493,   508,   153,   242,    92,   169,   253,   330,   120,   226,
   351,   427,   135,   233,   414,   468,   118,   225,   352,   428,
   151,   241,   353,   429,   137,   234,   368,   431,   132,   232,
   411,   467,   143,   237,   365,   430,   141,   236,    80,   165,
   147,   239,    86,   167,   155,   243,    95,   170,   159,   245,
   101,   172,   256,   336,   145,   238,    83,   166,   250,   319,
   149,   240,    89,   168,   252,   324,   122,   227,    37,   108,
   216,   274,   112,   222,    28,   105,   114,   223,    31,   106,
   116,   224,    34,   107,   128,   230,    43,   110,   126,   229,
    40,   109,   157,   244,    98,   171,   139,   235,    77,   164,
   248,   311,   130,   231,    73,   163
};

static const short yypact[] = {-32768,
  1359,   124,   124,   124,   124,   124,   124,  1397,   124,   124,
   124,   124,   124,   124,   124,   124,   124,   124,   124,   124,
-32768,-32768,-32768,-32768,    84,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    33,    89,    28,    42,    49,    51,    57,    59,
    67,-32768,    67,-32768,    67,-32768,    67,-32768,    67,-32768,
    67,-32768,    67,-32768,    67,-32768,    67,-32768,    67,-32768,
    67,-32768,-32768,    67,-32768,    67,-32768,    67,-32768,    67,
-32768,    67,-32768,    67,-32768,    67,-32768,    67,-32768,    67,
-32768,    67,-32768,    67,-32768,    67,-32768,    67,-32768,-32768,
    67,-32768,    72,    74,    82,    91,    93,    95,   107,   111,
   116,   120,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   352,   258,   735,   747,   784,
   796,   130,   136,   140,   141,   143,   145,   146,   147,   154,
   156,   157,   159,   161,   163,   169,   170,   171,   173,   175,
   176,   177,   179,   180,   182,   184,   394,   681,   833,   516,
   845,   534,    96,   882,   894,   571,   119,   124,   124,   124,
   124,   124,   124,    35,    88,    35,   124,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   124,-32768,-32768,
-32768,-32768,    88,   109,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   124,   124,   185,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   193,-32768,
   109,   109,   109,   568,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   436,
  1206,   931,  1215,  1134,   943,   128,   980,   992,   478,  1224,
  1169,  1243,   693,  1029,  1252,   589,  1041,   626,  1261,  1132,
  1078,  1090,   644,    38,-32768,-32768,   193,   296,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   194,-32768,   537,   483,
   109,   109,   109,   109,   188,   192,   207,   210,   211,   221,
   233,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   109,   109,
   109,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   109,   109,   109,-32768,-32768,   109,   234,   236,-32768,-32768,
-32768,   109,   134,   134,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   568,   568,   568,   568,   568,   568,   514,
-32768,-32768,   104,  1113,   205,   151,  1171,  1280,  1289,  1298,
  1317,   109,  1326,  1187,   248,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   285,-32768,-32768,-32768,
-32768,   266,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,   297,  -132,  -239,-32768,  -215,    -2,    17,  -195,
  -148,  -287,  -308,-32768,    15,  -177,-32768,-32768,    40,-32768,
  -176,-32768,-32768,-32768,  -186,-32768,  -168,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,    10,-32768,-32768,-32768,
    54,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    58,-32768,
-32768,-32768,    52,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
     9,-32768,    16,-32768,-32768,-32768,-32768,-32768,    24,-32768,
-32768,-32768,-32768,-32768,    26,-32768,-32768,-32768,-32768,-32768,
  -198,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    32,-32768,    22,-32768,    62,-32768
};


#define	YYLAST		1442


static const short yytable[] = {    26,
    29,    32,    35,    38,    41,   391,    24,   247,    75,    78,
    81,    84,    87,    90,    93,    96,    99,   345,    27,    30,
    33,    36,    39,    42,   372,   376,   377,    76,    79,    82,
    85,    88,    91,    94,    97,   100,   322,   173,   273,    24,
   334,   111,   113,   115,   117,   119,   121,   123,   125,   127,
   129,   131,   129,   134,   136,   138,   140,   142,   144,   146,
   148,   150,   152,   154,   156,   158,   129,   161,   276,   273,
   310,    74,   318,   406,   323,   437,   133,   375,   335,   378,
   379,   102,   437,   380,   461,   462,   463,   381,   175,   383,
   160,   314,   389,   174,    25,   -64,   390,   103,   392,   464,
   257,   395,   176,   104,   329,   399,   258,   259,   257,   177,
   260,   178,   338,   407,   258,   259,   325,   179,   260,   180,
   326,   337,   338,   339,   340,   327,    25,   181,    24,   182,
   263,   183,   206,   184,   207,   185,   439,   186,   263,   187,
   267,   188,   208,   189,   314,   190,   505,   191,   267,   440,
   192,   209,   193,   210,   194,   211,   195,   328,   196,   341,
   197,   441,   198,   342,   199,   506,   200,   212,   201,   341,
   202,   213,   203,   342,   204,   343,   214,   205,    25,   -64,
   215,   408,   322,    25,   -64,   423,   424,   334,   437,   442,
   282,   497,   219,   220,   221,   437,   283,   461,   462,   463,
   284,   285,   273,   286,   504,   287,   288,   289,   418,   419,
   420,   273,   511,   439,   290,   310,   291,   292,   318,   293,
   323,   294,   249,   295,   251,   335,   440,   254,   255,   296,
   297,   298,   276,   299,   276,   300,   301,   302,   441,   303,
   304,   276,   305,   276,   306,   415,   276,   417,   477,   470,
   276,   329,   478,   520,   347,   354,   357,   360,   363,   366,
   369,   373,   257,   373,   373,   523,   510,   479,   258,   259,
   480,   481,   260,   348,   355,   358,   361,   364,   367,   370,
   374,   482,   374,   374,   498,   499,   500,   501,   473,   474,
   475,   476,   263,   483,   491,   503,   492,    23,   382,   362,
   495,   385,   267,   387,   388,    99,   484,   485,   486,   496,
   394,   400,   359,   397,   371,   356,   405,   401,   402,   275,
   403,   396,   409,   412,   100,   398,   393,     0,   487,   488,
   489,     0,     0,   490,   421,   422,   423,   424,     0,   494,
     0,   410,   413,   521,   507,   421,   422,   423,   424,   276,
   276,   276,   276,   466,   276,     0,   257,     0,     2,     0,
     0,     4,   258,   259,     5,     0,   260,     6,     7,   517,
     9,     0,   261,     0,     0,    10,     0,   262,    11,    12,
     0,     0,    13,    14,    15,     0,   263,   264,   265,     0,
    17,    18,   266,    19,     0,    20,   267,     0,   257,     0,
     2,     0,     0,     4,   258,   259,     5,     0,   260,     6,
     7,     0,     9,   268,   261,     0,     0,    10,     0,   262,
    11,    12,     0,     0,    13,    14,    15,     0,   263,   264,
   265,     0,    17,    18,   266,    19,     0,    20,   267,     0,
   257,     0,     2,     0,     0,     4,   258,   259,     5,     0,
   260,     6,     7,     0,     9,   307,   261,     0,     0,    10,
     0,   262,    11,    12,     0,     0,    13,    14,    15,     0,
   263,   264,   265,     0,    17,    18,   266,    19,     0,    20,
   267,     0,   257,     0,     2,     0,     0,     4,   258,   259,
     5,     0,   260,     6,     7,     0,     9,   432,   261,     0,
     0,    10,     0,   262,    11,    12,     0,     0,    13,    14,
    15,     0,   263,   264,   265,     0,    17,    18,   266,    19,
   257,    20,   267,     0,     0,     0,   258,   259,     0,     0,
   260,     0,   421,   422,   423,   424,   261,     0,   257,   446,
   472,   262,     0,     0,   258,   259,     0,     0,   260,     0,
   263,   264,   265,     0,   261,     0,   266,     0,     0,   262,
   267,   313,     0,   421,   422,   423,   424,     0,   263,   264,
   265,   502,   314,     0,   266,   257,     0,   315,   267,   313,
     0,   258,   259,     0,     0,   260,   421,   422,   423,   424,
   314,   261,   471,   257,     0,   321,   262,     0,     0,   258,
   259,     0,     0,   260,     0,   263,   264,   265,     0,   261,
     0,   266,     0,     0,   262,   267,   313,   421,   422,   423,
   424,     0,     0,   263,   264,   265,     0,   314,     0,   266,
   257,     0,   333,   267,   313,     0,   258,   259,     0,     0,
   260,     0,     0,     0,     0,   314,   261,     0,   257,     0,
   453,   262,     0,     0,   258,   259,     0,     0,   260,     0,
   263,   264,   265,     0,   261,     0,   266,     0,     0,   262,
   267,   313,     0,     0,     0,     0,     0,     0,   263,   264,
   265,     0,   314,     0,   266,   257,     0,   455,   267,   313,
     0,   258,   259,     0,     0,   260,     0,   257,     0,     0,
   314,   261,     0,   258,   259,   460,   262,   260,     0,     0,
     0,     0,     0,   261,     0,   263,   264,   265,   262,     0,
     0,   266,   308,     0,     0,   267,     0,   263,   264,   265,
     0,     0,     0,   266,   308,     0,     0,   267,     0,   257,
     0,     0,   309,     0,     0,   258,   259,     0,     0,   260,
     0,   257,     0,     0,   450,   261,     0,   258,   259,     0,
   262,   260,     0,     0,     0,     0,     0,   261,     0,   263,
   264,   265,   262,     0,     0,   266,     0,     0,     0,   267,
     0,   263,   264,   265,     0,     0,     0,   266,   257,     0,
     0,   267,     0,     0,   258,   259,   277,     0,   260,     0,
   257,     0,     0,     0,   261,     0,   258,   259,   279,   262,
   260,     0,     0,     0,     0,     0,   261,     0,   263,   264,
   265,   262,     0,     0,   266,     0,     0,     0,   267,     0,
   263,   264,   265,     0,     0,     0,   266,   257,     0,     0,
   267,     0,     0,   258,   259,   280,     0,   260,     0,   257,
     0,     0,     0,   261,     0,   258,   259,   281,   262,   260,
     0,     0,     0,     0,     0,   261,     0,   263,   264,   265,
   262,     0,     0,   266,     0,     0,     0,   267,     0,   263,
   264,   265,     0,     0,     0,   266,   257,     0,     0,   267,
     0,     0,   258,   259,   312,     0,   260,     0,   257,     0,
     0,     0,   261,     0,   258,   259,   320,   262,   260,     0,
     0,     0,     0,     0,   261,     0,   263,   264,   265,   262,
     0,     0,   266,     0,     0,     0,   267,     0,   263,   264,
   265,     0,     0,     0,   266,   257,     0,     0,   267,     0,
     0,   258,   259,   331,     0,   260,     0,   257,     0,     0,
     0,   261,     0,   258,   259,   332,   262,   260,     0,     0,
     0,     0,     0,   261,     0,   263,   264,   265,   262,     0,
     0,   266,     0,     0,     0,   267,     0,   263,   264,   265,
     0,     0,     0,   266,   257,     0,     0,   267,     0,     0,
   258,   259,   434,     0,   260,     0,   257,     0,     0,     0,
   261,     0,   258,   259,   438,   262,   260,     0,     0,     0,
     0,     0,   261,     0,   263,   264,   265,   262,     0,     0,
   266,     0,     0,     0,   267,     0,   263,   264,   265,     0,
     0,     0,   266,   257,     0,     0,   267,     0,     0,   258,
   259,   444,     0,   260,     0,   257,     0,     0,     0,   261,
     0,   258,   259,   445,   262,   260,     0,     0,     0,     0,
     0,   261,     0,   263,   264,   265,   262,     0,     0,   266,
     0,     0,     0,   267,     0,   263,   264,   265,     0,     0,
     0,   266,   257,     0,     0,   267,     0,     0,   258,   259,
   451,     0,   260,     0,   257,     0,     0,     0,   261,     0,
   258,   259,   454,   262,   260,     0,     0,     0,     0,     0,
   261,     0,   263,   264,   265,   262,     0,     0,   266,     0,
     0,     0,   267,     0,   263,   264,   265,     0,     0,     0,
   266,     0,     0,     0,   267,     0,   257,     0,   257,   458,
     0,     0,   258,   259,   258,   259,   260,     0,   260,     0,
     0,   459,   325,     0,     0,     0,   326,     0,     0,     0,
     0,   327,   421,   422,   423,   424,   263,     0,   263,   264,
   502,   509,     0,   257,   266,   257,   267,     0,   267,   258,
   259,   258,   259,   260,     0,   260,     0,     0,     0,     0,
     0,   257,     0,   457,     0,   436,     0,   258,   259,     0,
     0,   260,     0,   263,   264,   263,   264,     0,     0,   266,
   257,   266,     0,   267,     0,   267,   258,   259,     0,   257,
   260,   263,   264,     0,     0,   258,   259,   266,   257,   260,
   448,   267,   512,     0,   258,   259,     0,     0,   260,     0,
   263,     0,     0,     0,     0,     0,     0,   257,   519,   263,
   267,     0,     0,   258,   259,     0,   257,   260,   263,   267,
     0,     0,   258,   259,     0,   257,   260,   433,   267,     0,
     0,   258,   259,     0,     0,   260,   435,   263,     0,     0,
     0,     0,     0,     0,   257,   447,   263,   267,     0,     0,
   258,   259,     0,   257,   260,   263,   267,     0,     0,   258,
   259,     0,   257,   260,   449,   267,     0,     0,   258,   259,
     0,     0,   260,   452,   263,     0,     0,     0,     0,     0,
     0,   257,   456,   263,   267,     0,     0,   258,   259,     0,
   257,   260,   263,   267,     0,     0,   258,   259,     0,     0,
   260,   513,   267,     0,     0,     0,     0,     0,     0,     0,
   514,   263,     0,     0,     0,     0,     0,     0,   522,   515,
   263,   267,     0,     0,     0,     2,     3,     0,     4,     0,
   267,     5,     0,     0,     6,     7,     8,     9,   516,     0,
     0,     0,    10,     0,     0,    11,    12,   518,     0,    13,
    14,    15,     0,     0,     0,     0,    16,    17,    18,     0,
    19,     0,    20,    44,    45,     0,    46,    47,    48,    49,
     0,    50,    51,    52,     0,    53,     0,     0,     0,    54,
    55,    56,    57,    58,    59,    60,     0,    61,    62,    63,
     0,    64,     0,     0,    65,    66,    67,     0,    68,     0,
    69,    70
};

static const short yycheck[] = {     2,
     3,     4,     5,     6,     7,   293,     5,   206,    11,    12,
    13,    14,    15,    16,    17,    18,    19,   257,     2,     3,
     4,     5,     6,     7,   264,   265,   266,    11,    12,    13,
    14,    15,    16,    17,    18,    19,   252,     5,   216,     5,
   256,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,   217,   247,
   248,    10,   250,   313,   252,   384,    55,   264,   256,   266,
   267,    20,   391,   282,    47,    48,    49,   283,    61,   285,
    69,    57,   291,     5,    60,    61,   292,    14,   294,    62,
     5,   297,    61,    20,   253,   301,    11,    12,     5,    61,
    15,    61,     4,     5,    11,    12,    21,    61,    15,    61,
    25,     3,     4,     5,     6,    30,    60,   111,     5,   113,
    35,   115,    61,   117,    61,   119,     9,   121,    35,   123,
    45,   125,    61,   127,    57,   129,    43,   131,    45,    22,
   134,    61,   136,    61,   138,    61,   140,    62,   142,    51,
   144,    34,   146,    55,   148,    62,   150,    61,   152,    51,
   154,    61,   156,    55,   158,    57,    61,   161,    60,    61,
    61,   314,   398,    60,    61,    52,    53,   403,   497,    62,
    61,   479,   178,   179,   180,   504,    61,    47,    48,    49,
    61,    61,   380,    61,   492,    61,    61,    61,   341,   342,
   343,   389,    62,     9,    61,   393,    61,    61,   396,    61,
   398,    61,   208,    61,   210,   403,    22,   213,   214,    61,
    61,    61,   381,    61,   383,    61,    61,    61,    34,    61,
    61,   390,    61,   392,    61,    61,   395,    55,    61,    56,
   399,   400,    61,     6,   257,   258,   259,   260,   261,   262,
   263,   264,     5,   266,   267,     0,    62,    61,    11,    12,
    61,    61,    15,   257,   258,   259,   260,   261,   262,   263,
   264,    61,   266,   267,   480,   481,   482,   483,   421,   422,
   423,   424,    35,    61,    61,   491,    61,     1,   284,   260,
   477,   287,    45,   289,   290,   308,   439,   440,   441,   478,
   296,   302,   259,   299,   263,   258,   308,   303,   304,    62,
   305,   298,   325,   326,   308,   300,   295,    -1,   461,   462,
   463,    -1,    -1,   466,    50,    51,    52,    53,    -1,   472,
    -1,   325,   326,    59,   493,    50,    51,    52,    53,   498,
   499,   500,   501,    58,   503,    -1,     5,    -1,     7,    -1,
    -1,    10,    11,    12,    13,    -1,    15,    16,    17,   502,
    19,    -1,    21,    -1,    -1,    24,    -1,    26,    27,    28,
    -1,    -1,    31,    32,    33,    -1,    35,    36,    37,    -1,
    39,    40,    41,    42,    -1,    44,    45,    -1,     5,    -1,
     7,    -1,    -1,    10,    11,    12,    13,    -1,    15,    16,
    17,    -1,    19,    62,    21,    -1,    -1,    24,    -1,    26,
    27,    28,    -1,    -1,    31,    32,    33,    -1,    35,    36,
    37,    -1,    39,    40,    41,    42,    -1,    44,    45,    -1,
     5,    -1,     7,    -1,    -1,    10,    11,    12,    13,    -1,
    15,    16,    17,    -1,    19,    62,    21,    -1,    -1,    24,
    -1,    26,    27,    28,    -1,    -1,    31,    32,    33,    -1,
    35,    36,    37,    -1,    39,    40,    41,    42,    -1,    44,
    45,    -1,     5,    -1,     7,    -1,    -1,    10,    11,    12,
    13,    -1,    15,    16,    17,    -1,    19,    62,    21,    -1,
    -1,    24,    -1,    26,    27,    28,    -1,    -1,    31,    32,
    33,    -1,    35,    36,    37,    -1,    39,    40,    41,    42,
     5,    44,    45,    -1,    -1,    -1,    11,    12,    -1,    -1,
    15,    -1,    50,    51,    52,    53,    21,    -1,     5,    62,
    58,    26,    -1,    -1,    11,    12,    -1,    -1,    15,    -1,
    35,    36,    37,    -1,    21,    -1,    41,    -1,    -1,    26,
    45,    46,    -1,    50,    51,    52,    53,    -1,    35,    36,
    37,    58,    57,    -1,    41,     5,    -1,    62,    45,    46,
    -1,    11,    12,    -1,    -1,    15,    50,    51,    52,    53,
    57,    21,    56,     5,    -1,    62,    26,    -1,    -1,    11,
    12,    -1,    -1,    15,    -1,    35,    36,    37,    -1,    21,
    -1,    41,    -1,    -1,    26,    45,    46,    50,    51,    52,
    53,    -1,    -1,    35,    36,    37,    -1,    57,    -1,    41,
     5,    -1,    62,    45,    46,    -1,    11,    12,    -1,    -1,
    15,    -1,    -1,    -1,    -1,    57,    21,    -1,     5,    -1,
    62,    26,    -1,    -1,    11,    12,    -1,    -1,    15,    -1,
    35,    36,    37,    -1,    21,    -1,    41,    -1,    -1,    26,
    45,    46,    -1,    -1,    -1,    -1,    -1,    -1,    35,    36,
    37,    -1,    57,    -1,    41,     5,    -1,    62,    45,    46,
    -1,    11,    12,    -1,    -1,    15,    -1,     5,    -1,    -1,
    57,    21,    -1,    11,    12,    62,    26,    15,    -1,    -1,
    -1,    -1,    -1,    21,    -1,    35,    36,    37,    26,    -1,
    -1,    41,    42,    -1,    -1,    45,    -1,    35,    36,    37,
    -1,    -1,    -1,    41,    42,    -1,    -1,    45,    -1,     5,
    -1,    -1,    62,    -1,    -1,    11,    12,    -1,    -1,    15,
    -1,     5,    -1,    -1,    62,    21,    -1,    11,    12,    -1,
    26,    15,    -1,    -1,    -1,    -1,    -1,    21,    -1,    35,
    36,    37,    26,    -1,    -1,    41,    -1,    -1,    -1,    45,
    -1,    35,    36,    37,    -1,    -1,    -1,    41,     5,    -1,
    -1,    45,    -1,    -1,    11,    12,    62,    -1,    15,    -1,
     5,    -1,    -1,    -1,    21,    -1,    11,    12,    62,    26,
    15,    -1,    -1,    -1,    -1,    -1,    21,    -1,    35,    36,
    37,    26,    -1,    -1,    41,    -1,    -1,    -1,    45,    -1,
    35,    36,    37,    -1,    -1,    -1,    41,     5,    -1,    -1,
    45,    -1,    -1,    11,    12,    62,    -1,    15,    -1,     5,
    -1,    -1,    -1,    21,    -1,    11,    12,    62,    26,    15,
    -1,    -1,    -1,    -1,    -1,    21,    -1,    35,    36,    37,
    26,    -1,    -1,    41,    -1,    -1,    -1,    45,    -1,    35,
    36,    37,    -1,    -1,    -1,    41,     5,    -1,    -1,    45,
    -1,    -1,    11,    12,    62,    -1,    15,    -1,     5,    -1,
    -1,    -1,    21,    -1,    11,    12,    62,    26,    15,    -1,
    -1,    -1,    -1,    -1,    21,    -1,    35,    36,    37,    26,
    -1,    -1,    41,    -1,    -1,    -1,    45,    -1,    35,    36,
    37,    -1,    -1,    -1,    41,     5,    -1,    -1,    45,    -1,
    -1,    11,    12,    62,    -1,    15,    -1,     5,    -1,    -1,
    -1,    21,    -1,    11,    12,    62,    26,    15,    -1,    -1,
    -1,    -1,    -1,    21,    -1,    35,    36,    37,    26,    -1,
    -1,    41,    -1,    -1,    -1,    45,    -1,    35,    36,    37,
    -1,    -1,    -1,    41,     5,    -1,    -1,    45,    -1,    -1,
    11,    12,    62,    -1,    15,    -1,     5,    -1,    -1,    -1,
    21,    -1,    11,    12,    62,    26,    15,    -1,    -1,    -1,
    -1,    -1,    21,    -1,    35,    36,    37,    26,    -1,    -1,
    41,    -1,    -1,    -1,    45,    -1,    35,    36,    37,    -1,
    -1,    -1,    41,     5,    -1,    -1,    45,    -1,    -1,    11,
    12,    62,    -1,    15,    -1,     5,    -1,    -1,    -1,    21,
    -1,    11,    12,    62,    26,    15,    -1,    -1,    -1,    -1,
    -1,    21,    -1,    35,    36,    37,    26,    -1,    -1,    41,
    -1,    -1,    -1,    45,    -1,    35,    36,    37,    -1,    -1,
    -1,    41,     5,    -1,    -1,    45,    -1,    -1,    11,    12,
    62,    -1,    15,    -1,     5,    -1,    -1,    -1,    21,    -1,
    11,    12,    62,    26,    15,    -1,    -1,    -1,    -1,    -1,
    21,    -1,    35,    36,    37,    26,    -1,    -1,    41,    -1,
    -1,    -1,    45,    -1,    35,    36,    37,    -1,    -1,    -1,
    41,    -1,    -1,    -1,    45,    -1,     5,    -1,     5,    62,
    -1,    -1,    11,    12,    11,    12,    15,    -1,    15,    -1,
    -1,    62,    21,    -1,    -1,    -1,    25,    -1,    -1,    -1,
    -1,    30,    50,    51,    52,    53,    35,    -1,    35,    36,
    58,    59,    -1,     5,    41,     5,    45,    -1,    45,    11,
    12,    11,    12,    15,    -1,    15,    -1,    -1,    -1,    -1,
    -1,     5,    -1,    62,    -1,    62,    -1,    11,    12,    -1,
    -1,    15,    -1,    35,    36,    35,    36,    -1,    -1,    41,
     5,    41,    -1,    45,    -1,    45,    11,    12,    -1,     5,
    15,    35,    36,    -1,    -1,    11,    12,    41,     5,    15,
    62,    45,    62,    -1,    11,    12,    -1,    -1,    15,    -1,
    35,    -1,    -1,    -1,    -1,    -1,    -1,     5,    62,    35,
    45,    -1,    -1,    11,    12,    -1,     5,    15,    35,    45,
    -1,    -1,    11,    12,    -1,     5,    15,    62,    45,    -1,
    -1,    11,    12,    -1,    -1,    15,    62,    35,    -1,    -1,
    -1,    -1,    -1,    -1,     5,    62,    35,    45,    -1,    -1,
    11,    12,    -1,     5,    15,    35,    45,    -1,    -1,    11,
    12,    -1,     5,    15,    62,    45,    -1,    -1,    11,    12,
    -1,    -1,    15,    62,    35,    -1,    -1,    -1,    -1,    -1,
    -1,     5,    62,    35,    45,    -1,    -1,    11,    12,    -1,
     5,    15,    35,    45,    -1,    -1,    11,    12,    -1,    -1,
    15,    62,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    62,    35,    -1,    -1,    -1,    -1,    -1,    -1,     0,    62,
    35,    45,    -1,    -1,    -1,     7,     8,    -1,    10,    -1,
    45,    13,    -1,    -1,    16,    17,    18,    19,    62,    -1,
    -1,    -1,    24,    -1,    -1,    27,    28,    62,    -1,    31,
    32,    33,    -1,    -1,    -1,    -1,    38,    39,    40,    -1,
    42,    -1,    44,     7,     8,    -1,    10,    11,    12,    13,
    -1,    15,    16,    17,    -1,    19,    -1,    -1,    -1,    23,
    24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
    -1,    35,    -1,    -1,    38,    39,    40,    -1,    42,    -1,
    44,    45
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.27.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 216 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 220 "parser.y"
{;
    break;}
case 5:
#line 222 "parser.y"
{
                            SCENE->atmosphere()->addObject (yyvsp[0].ptAtmObject);
                          ;
    break;}
case 6:
#line 226 "parser.y"
{
                            _ptWorld->add (yyvsp[0].ptObject);
                          ;
    break;}
case 7:
#line 232 "parser.y"
{;
    break;}
case 8:
#line 234 "parser.y"
{;
    break;}
case 9:
#line 236 "parser.y"
{;
    break;}
case 10:
#line 238 "parser.y"
{;
    break;}
case 11:
#line 240 "parser.y"
{;
    break;}
case 12:
#line 242 "parser.y"
{;
    break;}
case 13:
#line 244 "parser.y"
{;
    break;}
case 14:
#line 246 "parser.y"
{;
    break;}
case 15:
#line 248 "parser.y"
{;
    break;}
case 16:
#line 250 "parser.y"
{;
    break;}
case 17:
#line 252 "parser.y"
{;
    break;}
case 18:
#line 254 "parser.y"
{;
    break;}
case 19:
#line 256 "parser.y"
{;
    break;}
case 20:
#line 258 "parser.y"
{;
    break;}
case 21:
#line 260 "parser.y"
{;
    break;}
case 22:
#line 262 "parser.y"
{;
    break;}
case 23:
#line 264 "parser.y"
{;
    break;}
case 24:
#line 266 "parser.y"
{;
    break;}
case 25:
#line 268 "parser.y"
{;
    break;}
case 26:
#line 270 "parser.y"
{;
    break;}
case 27:
#line 272 "parser.y"
{;
    break;}
case 28:
#line 274 "parser.y"
{;
    break;}
case 29:
#line 276 "parser.y"
{;
    break;}
case 30:
#line 278 "parser.y"
{;
    break;}
case 31:
#line 280 "parser.y"
{;
    break;}
case 32:
#line 282 "parser.y"
{;
    break;}
case 33:
#line 284 "parser.y"
{;
    break;}
case 34:
#line 288 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 35:
#line 292 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 36:
#line 296 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
			  ;
    break;}
case 37:
#line 300 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 38:
#line 304 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 39:
#line 308 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 40:
#line 312 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 41:
#line 316 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 42:
#line 320 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 43:
#line 324 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 44:
#line 328 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 45:
#line 332 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 46:
#line 336 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 47:
#line 340 "parser.y"
{
                            ((TCsg*) yyvsp[0].ptObject)->setOperation (FX_CSG_UNION);
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 48:
#line 345 "parser.y"
{
                            ((TCsg*) yyvsp[0].ptObject)->setOperation (FX_CSG_INTERSECTION);
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 49:
#line 350 "parser.y"
{
                            ((TCsg*) yyvsp[0].ptObject)->setOperation (FX_CSG_DIFFERENCE);
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 50:
#line 357 "parser.y"
{
			    yyval.dValue = yyvsp[0].dValue;
			  ;
    break;}
case 51:
#line 361 "parser.y"
{
                            if ( _tFunctionMap.find (yyvsp[-2].acIdent) == _tFunctionMap.end() )
                            {
			      yyerror ("function does not exist");
			      exit (1);
                            }
			    _pfFunction = _tFunctionMap [yyvsp[-2].acIdent];
			    yyval.dValue = (*_pfFunction)();
			  ;
    break;}
case 52:
#line 371 "parser.y"
{
			    yyval.dValue = yyvsp[-2].dValue + yyvsp[0].dValue;
			  ;
    break;}
case 53:
#line 375 "parser.y"
{
			    yyval.dValue = yyvsp[-2].dValue - yyvsp[0].dValue;
			  ;
    break;}
case 54:
#line 379 "parser.y"
{
			    yyval.dValue = yyvsp[-2].dValue * yyvsp[0].dValue;
			  ;
    break;}
case 55:
#line 383 "parser.y"
{
			    yyval.dValue = yyvsp[-2].dValue / yyvsp[0].dValue;
			  ;
    break;}
case 56:
#line 387 "parser.y"
{
			    yyval.dValue = -yyvsp[0].dValue;
			  ;
    break;}
case 57:
#line 391 "parser.y"
{
			    yyval.dValue = yyvsp[-1].dValue;
			  ;
    break;}
case 58:
#line 397 "parser.y"
{
			    _tVector.set (yyvsp[-5].dValue, yyvsp[-3].dValue, yyvsp[-1].dValue);
			    yyval.ptVector = &_tVector;
			  ;
    break;}
case 59:
#line 404 "parser.y"
{
			    _tVector2.set (yyvsp[-3].dValue, yyvsp[-1].dValue);
			    yyval.ptVector2 = &_tVector2;
			  ;
    break;}
case 60:
#line 411 "parser.y"
{
			    yyval.ptVector = yyvsp[0].ptVector;
			  ;
    break;}
case 61:
#line 415 "parser.y"
{
			    yyval.ptVector = yyvsp[0].ptVector;
			  ;
    break;}
case 62:
#line 421 "parser.y"
{
			    strcpy (yyval.acIdent, "");
			  ;
    break;}
case 63:
#line 425 "parser.y"
{
			    strcpy (yyval.acIdent, yyvsp[0].acIdent);
			  ;
    break;}
case 64:
#line 431 "parser.y"
{
			    strcpy (yyval.acIdent, "");
			  ;
    break;}
case 65:
#line 435 "parser.y"
{
                            if ( _tObjectMap.find (yyvsp[0].acIdent) == _tObjectMap.end() )
                            {
			      yyerror ("trying to extend from non existing object");
			      exit (1);
                            }
                            _ptParent = _tObjectMap [yyvsp[0].acIdent];
			    strcpy (yyval.acIdent, _ptParent->className().c_str());
			  ;
    break;}
case 66:
#line 445 "parser.y"
{
			    _ptParent = NULL;
			    strcpy (yyval.acIdent, yyvsp[0].acIdent);
			  ;
    break;}
case 69:
#line 456 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptVector;
			    SetParameter (yyvsp[-1].acIdent, FX_VECTOR);
			  ;
    break;}
case 70:
#line 461 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptVector2;
			    SetParameter (yyvsp[-1].acIdent, FX_VECTOR2);
			  ;
    break;}
case 71:
#line 466 "parser.y"
{
			    _nAttrib.dValue = yyvsp[0].dValue;
			    SetParameter (yyvsp[-1].acIdent, FX_REAL);
			  ;
    break;}
case 72:
#line 471 "parser.y"
{
			    _nAttrib.gValue = yyvsp[0].gValue;
			    SetParameter (yyvsp[-1].acIdent, FX_BOOL);
			  ;
    break;}
case 73:
#line 476 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].acIdent;
			    SetParameter (yyvsp[-1].acIdent, FX_STRING);
			  ;
    break;}
case 74:
#line 481 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptColor;
			    SetParameter (yyvsp[-1].acIdent, FX_COLOR);
			  ;
    break;}
case 75:
#line 486 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptColor;
			    SetParameter ("color", FX_COLOR);
			  ;
    break;}
case 76:
#line 491 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptVector;
			    SetParameter ("vector", FX_VECTOR);
			  ;
    break;}
case 77:
#line 496 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptVector;
			    SetParameter (yyvsp[-1].acIdent, FX_VECTOR);
			  ;
    break;}
case 78:
#line 501 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptCamera;
			    SetParameter (yyvsp[-1].acIdent, FX_CAMERA);
			  ;
    break;}
case 79:
#line 506 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptCamera;
			    SetParameter ("camera", FX_CAMERA);
			  ;
    break;}
case 80:
#line 511 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptRenderer;
			    SetParameter (yyvsp[-1].acIdent, FX_RENDERER);
			  ;
    break;}
case 81:
#line 516 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptRenderer;
			    SetParameter ("renderer", FX_RENDERER);
			  ;
    break;}
case 82:
#line 521 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptBsdf;
			    SetParameter (yyvsp[-1].acIdent, FX_BSDF);
			  ;
    break;}
case 83:
#line 526 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptBsdf;
			    SetParameter ("bsdf", FX_BSDF);
			  ;
    break;}
case 86:
#line 537 "parser.y"
{
			    ENTITY->translate (*yyvsp[0].ptVector);
			  ;
    break;}
case 87:
#line 541 "parser.y"
{
			    ENTITY->rotate (*yyvsp[0].ptVector);
			  ;
    break;}
case 88:
#line 545 "parser.y"
{
			    ENTITY->translate (*yyvsp[0].ptVector);
			  ;
    break;}
case 89:
#line 549 "parser.y"
{
			    ENTITY->rotate (*yyvsp[0].ptVector);
			  ;
    break;}
case 91:
#line 556 "parser.y"
{
			    VOLUME->scale (*yyvsp[0].ptVector, TVector (0, 0, 0));
			  ;
    break;}
case 95:
#line 567 "parser.y"
{
			    OBJECT->setMaterial (yyvsp[0].ptMaterial);
			  ;
    break;}
case 96:
#line 571 "parser.y"
{
			    OBJECT->addFilter (yyvsp[0].ptOFilter);
			  ;
    break;}
case 98:
#line 578 "parser.y"
{
                            if ( yyvsp[-1].acIdent == "" )
                            {
                              yyerror ("cannot define unnamed color");
                              exit (1);
                            }

                            if ( _tColorMap.find (yyvsp[-1].acIdent) != _tColorMap.end() )
                            {
                              yyerror ("cannot redefine an existing color");
                              exit (1);
                            }

                            _tColor = TColor::_black();

                            _ptParent = NULL;
			  ;
    break;}
case 99:
#line 596 "parser.y"
{
                            _tColorMap [yyvsp[-5].acIdent] = _tColor;
                            
                            yyval.ptColor = &_tColor;
			  ;
    break;}
case 100:
#line 604 "parser.y"
{
                            if ( yyvsp[0].acIdent == "" )
                            {
                              yyerror ("instanced object cannot be unnamed");
                              exit (1);
                            }

                            if ( _tColorMap.find (yyvsp[0].acIdent) == _tObjectMap.end() )
                            {
                              yyerror ("color does not exist");
                              exit (1);
                            }

                            yyval.ptColor = (TColor*) &(_tColorMap [yyvsp[0].acIdent]);
			  ;
    break;}
case 101:
#line 620 "parser.y"
{
                            _tColor = TColor::_black();
			  ;
    break;}
case 102:
#line 624 "parser.y"
{
			    yyval.ptColor = (TColor*) &_tColor;
			  ;
    break;}
case 105:
#line 634 "parser.y"
{
			    _tColor.setRed (yyvsp[0].dValue);
			  ;
    break;}
case 106:
#line 638 "parser.y"
{
			    _tColor.setGreen (yyvsp[0].dValue);
			  ;
    break;}
case 107:
#line 642 "parser.y"
{
			    _tColor.setBlue (yyvsp[0].dValue);
			  ;
    break;}
case 108:
#line 648 "parser.y"
{
                            if ( yyvsp[-1].acIdent == "" )
                            {
                              yyerror ("cannot define unnamed vector");
                              exit (1);
                            }

                            if ( _tVectorMap.find (yyvsp[-1].acIdent) != _tVectorMap.end() )
                            {
                              yyerror ("cannot redefine an existing vector");
                              exit (1);
                            }

                            _tVector = TVector (0, 0, 0);

                            _ptParent = NULL;
			  ;
    break;}
case 109:
#line 666 "parser.y"
{
                            _tVectorMap [yyvsp[-5].acIdent] = _tVector;
                            
                            yyval.ptVector = &_tVector;
			  ;
    break;}
case 110:
#line 674 "parser.y"
{
                            if ( yyvsp[0].acIdent == "" )
                            {
                              yyerror ("instanced object cannot be unnamed");
                              exit (1);
                            }

                            if ( _tVectorMap.find (yyvsp[0].acIdent) == _tVectorMap.end() )
                            {
                              yyerror ("vector does not exist");
                              exit (1);
                            }

                            yyval.ptVector = (TVector*) &(_tVectorMap [yyvsp[0].acIdent]);
			  ;
    break;}
case 111:
#line 690 "parser.y"
{
                            _tVector = TVector (0, 0, 0);
			  ;
    break;}
case 112:
#line 694 "parser.y"
{
			    yyval.ptVector = (TVector*) &_tVector;
			  ;
    break;}
case 115:
#line 704 "parser.y"
{
			    _tVector.setX (yyvsp[0].dValue);
			  ;
    break;}
case 116:
#line 708 "parser.y"
{
			    _tVector.setY (yyvsp[0].dValue);
			  ;
    break;}
case 117:
#line 712 "parser.y"
{
			    _tVector.setZ (yyvsp[0].dValue);
			  ;
    break;}
case 118:
#line 718 "parser.y"
{
                            _tDataStack.push (TImageManager::_getImageIO ("tga"));
                          ;
    break;}
case 119:
#line 722 "parser.y"
{
			    yyval.ptImageIO = (TImageIO*) _tDataStack.POP();
			  ;
    break;}
case 122:
#line 732 "parser.y"
{
                            _ptImageIO = (TImageIO*) _tDataStack.POP();
                            delete _ptImageIO;
                            
                            _ptImageIO = TImageManager::_getImageIO (yyvsp[0].acIdent);
                            if ( !_ptImageIO )
                            {
                              yyerror ("Image output type not available");
                              exit (1);
                            }
                            _tDataStack.push (_ptImageIO);
			  ;
    break;}
case 124:
#line 748 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Scene");
			  ;
    break;}
case 125:
#line 752 "parser.y"
{
			    yyval.ptScene = (TScene*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 126:
#line 758 "parser.y"
{
			    yyval.ptScene = (TScene*) InstanceObject (yyvsp[0].acIdent);
			    TSceneRT::_ptParsedScene = yyval.ptScene;
			  ;
    break;}
case 127:
#line 763 "parser.y"
{
//			    CreateObject ($1, "Scene");
			    _ptData = TSceneRT::_ptParsedScene;
			    _tDataStack.push (_ptData);
			  ;
    break;}
case 128:
#line 769 "parser.y"
{
			    yyval.ptScene = (TScene*) _tDataStack.POP();
//			    $$ = &tScene;
			  ;
    break;}
case 131:
#line 780 "parser.y"
{
			    SCENE->addLight (yyvsp[0].ptLight);
			  ;
    break;}
case 132:
#line 784 "parser.y"
{
			    SCENE->addImageFilter (yyvsp[0].ptIFilter);
			  ;
    break;}
case 133:
#line 788 "parser.y"
{
			    SCENE->setImageOutput (yyvsp[0].ptImageIO);
			  ;
    break;}
case 135:
#line 795 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "PinholeCamera");
			  ;
    break;}
case 136:
#line 799 "parser.y"
{
			    yyval.ptCamera = (TCamera*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 137:
#line 805 "parser.y"
{
			    yyval.ptCamera = (TCamera*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 138:
#line 809 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "PinholeCamera");
			  ;
    break;}
case 139:
#line 813 "parser.y"
{
			    yyval.ptCamera = (TCamera*) _tDataStack.POP();
			  ;
    break;}
case 140:
#line 819 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "PointLight");
			  ;
    break;}
case 141:
#line 823 "parser.y"
{
			    yyval.ptLight = (TLight*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 142:
#line 829 "parser.y"
{
			    yyval.ptLight = (TLight*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 143:
#line 833 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "PointLight");
			  ;
    break;}
case 144:
#line 837 "parser.y"
{
			    yyval.ptLight = (TLight*) _tDataStack.POP();
			  ;
    break;}
case 145:
#line 843 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "BsdfPhong");
			  ;
    break;}
case 146:
#line 847 "parser.y"
{
			    yyval.ptBsdf = (TBsdf*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 147:
#line 853 "parser.y"
{
			    yyval.ptBsdf = (TBsdf*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 148:
#line 857 "parser.y"
{
                            CreateObject (yyvsp[0].acIdent, "BsdfPhong");
			  ;
    break;}
case 149:
#line 861 "parser.y"
{
                            yyval.ptBsdf = (TBsdf*) _tDataStack.POP();
			  ;
    break;}
case 150:
#line 867 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Raytracer");
			  ;
    break;}
case 151:
#line 871 "parser.y"
{
			    yyval.ptRenderer = (TRenderer*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 152:
#line 877 "parser.y"
{
			    yyval.ptRenderer = (TRenderer*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 153:
#line 881 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Raytracer");
			  ;
    break;}
case 154:
#line 885 "parser.y"
{
			    yyval.ptRenderer = (TRenderer*) _tDataStack.POP();
			  ;
    break;}
case 155:
#line 891 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Material");
			  ;
    break;}
case 156:
#line 895 "parser.y"
{
                            yyval.ptMaterial = (TMaterial*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 157:
#line 901 "parser.y"
{
			    yyval.ptMaterial = (TMaterial*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 158:
#line 905 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Material");
			  ;
    break;}
case 159:
#line 909 "parser.y"
{
			    yyval.ptMaterial = (TMaterial*) _tDataStack.POP();

			  ;
    break;}
case 160:
#line 916 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "");
			  ;
    break;}
case 161:
#line 920 "parser.y"
{
			    yyval.ptIFilter = (TImageFilter*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 162:
#line 926 "parser.y"
{
			    yyval.ptIFilter = (TImageFilter*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 163:
#line 930 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "");
			  ;
    break;}
case 164:
#line 934 "parser.y"
{
			    yyval.ptIFilter = (TImageFilter*) _tDataStack.POP();
			  ;
    break;}
case 165:
#line 940 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "");
			  ;
    break;}
case 166:
#line 944 "parser.y"
{
			    yyval.ptOFilter = (TObjectFilter*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 167:
#line 950 "parser.y"
{
			    yyval.ptOFilter = (TObjectFilter*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 168:
#line 954 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "");
			  ;
    break;}
case 169:
#line 958 "parser.y"
{
			    yyval.ptOFilter = (TObjectFilter*) _tDataStack.POP();
			  ;
    break;}
case 170:
#line 964 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "");
			  ;
    break;}
case 171:
#line 968 "parser.y"
{
			    yyval.ptObject = (TObject*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 172:
#line 974 "parser.y"
{
			    yyval.ptObject = (TObject*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 173:
#line 978 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "");
			  ;
    break;}
case 174:
#line 982 "parser.y"
{
			    yyval.ptObject = (TObject*) _tDataStack.POP();
			  ;
    break;}
case 175:
#line 988 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Plane");
			  ;
    break;}
case 176:
#line 992 "parser.y"
{
			    yyval.ptObject = (TPlane*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 177:
#line 998 "parser.y"
{
			    yyval.ptObject = (TPlane*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 178:
#line 1002 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Plane");
			  ;
    break;}
case 179:
#line 1006 "parser.y"
{
			    yyval.ptObject = (TPlane*) _tDataStack.POP();
			  ;
    break;}
case 180:
#line 1012 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Sphere");
			  ;
    break;}
case 181:
#line 1016 "parser.y"
{
			    yyval.ptObject = (TSphere*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 182:
#line 1022 "parser.y"
{
			    yyval.ptObject = (TSphere*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 183:
#line 1026 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Sphere");
			  ;
    break;}
case 184:
#line 1030 "parser.y"
{
			    yyval.ptObject = (TSphere*) _tDataStack.POP();
			  ;
    break;}
case 185:
#line 1036 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Triangle");
			    _bVertices = 0;
			  ;
    break;}
case 186:
#line 1041 "parser.y"
{
			    if ( _bVertices != 3 )
			    {
			      yyerror ("wrong number of vertices in triangle");
			      exit (1);
			    }
			    yyval.ptObject = (TTriangle*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 187:
#line 1052 "parser.y"
{
			    yyval.ptObject = (TTriangle*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 188:
#line 1056 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Triangle");
			    _bVertices = 0;
			  ;
    break;}
case 189:
#line 1061 "parser.y"
{
			    if ( _bVertices != 3 )
			    {
			      yyerror ("wrong number of vertices in triangle");
			      exit (1);
			    }
			    yyval.ptObject = (TTriangle*) _tDataStack.POP();
			  ;
    break;}
case 192:
#line 1076 "parser.y"
{
			    TRIANGLE->setVertex (*yyvsp[0].ptVector);
			    _bVertices++;
			  ;
    break;}
case 194:
#line 1084 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "PhongTriangle");
			    _bVertices = 0;
			  ;
    break;}
case 195:
#line 1089 "parser.y"
{
			    if ( _bVertices != 3 )
			    {
			      yyerror ("wrong number of vertices in phong_triangle");
			      exit (1);
			    }
			    yyval.ptObject = (TPhongTriangle*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 196:
#line 1100 "parser.y"
{
			    yyval.ptObject = (TPhongTriangle*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 197:
#line 1104 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "PhongTriangle");
			    _bVertices = 0;
			  ;
    break;}
case 198:
#line 1109 "parser.y"
{
			    if ( _bVertices != 3 )
			    {
			      yyerror ("wrong number of vertices in phong_triangle");
			      exit (1);
			    }
			    yyval.ptObject = (TPhongTriangle*) _tDataStack.POP();
			  ;
    break;}
case 201:
#line 1124 "parser.y"
{
			    TRIANGLE->setVertex (*yyvsp[0].ptVector);
			    _bVertices++;
			  ;
    break;}
case 203:
#line 1132 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Rectangle");
			    _bVertices = 0;
			  ;
    break;}
case 204:
#line 1137 "parser.y"
{
			    if ( _bVertices != 4 )
			    {
			      yyerror ("wrong number of vertices in rectangle");
			      exit (1);
			    }
			    yyval.ptObject = (TRectangle*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 205:
#line 1148 "parser.y"
{
			    yyval.ptObject = (TRectangle*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 206:
#line 1152 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Rectangle");
			    _bVertices = 0;
			  ;
    break;}
case 207:
#line 1157 "parser.y"
{
			    if ( _bVertices != 4 )
			    {
			      yyerror ("wrong number of vertices in rectangle");
			      exit (1);
			    }
			    yyval.ptObject = (TRectangle*) _tDataStack.POP();
			  ;
    break;}
case 210:
#line 1172 "parser.y"
{
			    RECTANGLE->setVertex (*yyvsp[0].ptVector);
			    _bVertices++;
			  ;
    break;}
case 212:
#line 1180 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Circle");
			  ;
    break;}
case 213:
#line 1184 "parser.y"
{
			    yyval.ptObject = (TCircle*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 214:
#line 1190 "parser.y"
{
			    yyval.ptObject = (TCircle*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 215:
#line 1194 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Circle");
			  ;
    break;}
case 216:
#line 1198 "parser.y"
{
			    yyval.ptObject = (TCircle*) _tDataStack.POP();
			  ;
    break;}
case 219:
#line 1208 "parser.y"
{
			    AGGREGATE->add (yyvsp[0].ptObject);
			  ;
    break;}
case 221:
#line 1215 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Aggregate");
			  ;
    break;}
case 222:
#line 1219 "parser.y"
{
			    yyval.ptObject = (TAggregate*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 223:
#line 1225 "parser.y"
{
			    yyval.ptObject = (TAggregate*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 224:
#line 1229 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Aggregate");
			  ;
    break;}
case 225:
#line 1233 "parser.y"
{
			    yyval.ptObject = (TAggregate*) _tDataStack.POP();
			  ;
    break;}
case 226:
#line 1239 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "AtmConst");
			  ;
    break;}
case 227:
#line 1243 "parser.y"
{
			    yyval.ptAtmObject = (TAtmosphericObject*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 228:
#line 1249 "parser.y"
{
			    yyval.ptAtmObject = (TAtmosphericObject*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 229:
#line 1253 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "AtmConst");
			  ;
    break;}
case 230:
#line 1257 "parser.y"
{
			    yyval.ptAtmObject = (TAtmosphericObject*) _tDataStack.POP();
			  ;
    break;}
case 231:
#line 1263 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Box");
			  ;
    break;}
case 232:
#line 1267 "parser.y"
{
			    yyval.ptObject = (TBox*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 233:
#line 1273 "parser.y"
{
			    yyval.ptObject = (TBox*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 234:
#line 1277 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Box");
			  ;
    break;}
case 235:
#line 1281 "parser.y"
{
			    yyval.ptObject = (TBox*) _tDataStack.POP();
			  ;
    break;}
case 236:
#line 1287 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Cylinder");
			  ;
    break;}
case 237:
#line 1291 "parser.y"
{
			    yyval.ptObject = (TCylinder*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 238:
#line 1297 "parser.y"
{
			    yyval.ptObject = (TCylinder*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 239:
#line 1301 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Cylinder");
			  ;
    break;}
case 240:
#line 1305 "parser.y"
{
			    yyval.ptObject = (TCylinder*) _tDataStack.POP();
			  ;
    break;}
case 241:
#line 1311 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Cone");
			  ;
    break;}
case 242:
#line 1315 "parser.y"
{
			    yyval.ptObject = (TCone*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 243:
#line 1321 "parser.y"
{
			    yyval.ptObject = (TCone*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 244:
#line 1325 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Cone");
			  ;
    break;}
case 245:
#line 1329 "parser.y"
{
			    yyval.ptObject = (TCone*) _tDataStack.POP();
	       		  ;
    break;}
case 246:
#line 1335 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Torus");
			  ;
    break;}
case 247:
#line 1339 "parser.y"
{
			    yyval.ptObject = (TTorus*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 248:
#line 1345 "parser.y"
{
			    yyval.ptObject = (TTorus*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 249:
#line 1349 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Torus");
			  ;
    break;}
case 250:
#line 1353 "parser.y"
{
			    yyval.ptObject = (TTorus*) _tDataStack.POP();
			  ;
    break;}
case 251:
#line 1359 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Mesh");
			  ;
    break;}
case 252:
#line 1363 "parser.y"
{
			    yyval.ptObject = (TMeshObject*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 253:
#line 1369 "parser.y"
{
			    yyval.ptObject = (TMeshObject*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 254:
#line 1373 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Mesh");
			  ;
    break;}
case 255:
#line 1377 "parser.y"
{
			    yyval.ptObject = (TMeshObject*) _tDataStack.POP();
			  ;
    break;}
case 258:
#line 1387 "parser.y"
{
			    MESH->addTriangle ((TTriangle*) yyvsp[0].ptObject);
                            delete yyvsp[0].ptObject;
			  ;
    break;}
case 260:
#line 1395 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Csg");
			  ;
    break;}
case 261:
#line 1399 "parser.y"
{
			    yyval.ptObject = (TCsg*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 262:
#line 1405 "parser.y"
{
			    yyval.ptObject = (TCsg*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 263:
#line 1409 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Csg");
			  ;
    break;}
case 264:
#line 1413 "parser.y"
{
			    yyval.ptObject = (TCsg*) _tDataStack.POP();
			  ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 542 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1418 "parser.y"


void rt_error (const char* pkcTEXT)
{

  cerr << endl << TSceneRT::_tInputFileName << "(" << TSceneRT::_dwLineNumber << ") Error: " << pkcTEXT << endl;

}  /* rt_error() */


void RT_InitParser (void)
{

  InitObjects();
  InitFunctions();

  _ptWorld = new TAggregate();
  
  TSceneRT::_ptParsedScene->setWorld (_ptWorld);
  
}  /* RT_InitParser() */


void RT_CloseParser (void)
{

  _tObjectMap.clear();

}  /* RT_CloseParser() */


void InitFunctions (void)
{

  _tFunctionMap ["rand"] = (double(*)(void)) &frand;

}  /* InitFunctions() */


void InitObjects (void)
{
}  /* InitObjects() */


TProcedural* NewObject (const string& rktCLASS, const TProcedural* pktPARENT)
{

  TProcedural*   ptChild;

//  cout << "New object : \"" << rktCLASS << "\"" << endl;

  ptChild = (TProcedural*) TClassManager::_newObject (rktCLASS, pktPARENT);
  if ( !ptChild )
  {
    string   tMessage = string ("class ") + rktCLASS + " does not exist";
    yyerror (tMessage.c_str());
    exit (1);
  }

  return ptChild;

}  /* NewObject() */


void* InstanceObject (const string& rktNAME)
{

  void*   pvObject;

  if ( rktNAME == "" )
  {
    yyerror ("instanced object cannot be unnamed");
    exit (1);
  }

  if ( _tObjectMap.find (rktNAME) == _tObjectMap.end() )
  {
    yyerror ("object does not exist");
    exit (1);
  }

  pvObject = _tObjectMap [rktNAME];

  return pvObject;

}  /* InstanceObject() */


void* UpdateObject (const string& rktNAME)
{

  TProcedural*   ptObject;

//  cout << "Updating object : \"" << rktNAME << "\"" << endl;

  ptObject = _tDataStack.POP();

  _tObjectMap [rktNAME] = ptObject;

  return ptObject;

}  /* UpdateObject() */


void DefineObject (const string& rktNAME, const string& rktCLASS, const string& rktDEF_CLASS)
{

//  cout << "Defining object : \"" << rktNAME << "\", \"" << rktCLASS << "\", \"" << rktDEF_CLASS << "\"" << endl;

  if ( rktNAME == "" )
  {
    yyerror ("defined object cannot be unnamed");
    exit (1);
  }

  if ( _tObjectMap.find (rktNAME) != _tObjectMap.end() )
  {
    yyerror ("cannot redefine an existing object");
    exit (1);
  }

  if ( rktCLASS == "" )
  {
    _ptData = NewObject (rktDEF_CLASS, _ptParent);
  }
  else
  {
    _ptData = NewObject (rktCLASS, _ptParent);
  }

  _tDataStack.push (_ptData);
  _ptParent = NULL;

}  /* DefineObject() */


void CreateObject (const string& rktCLASS, const string& rktDEF_CLASS)
{

//  cout << "Creating object : \"" << rktCLASS << "\", \"" << rktDEF_CLASS << "\"" << endl;
  
  if ( rktCLASS == "" )
  {
    _ptData = NewObject (rktDEF_CLASS, _ptParent);
  }
  else
  {
    _ptData = NewObject (rktCLASS, _ptParent);
  }

  _tDataStack.push (_ptData);
  _ptParent = NULL;

}  /* CreateObject() */


void SetParameter (const string& rktATTRIB, EAttribType eTYPE)
{

  int   iResult;

  iResult = DATA->setAttribute (rktATTRIB, _nAttrib, eTYPE);

  if ( iResult == FX_ATTRIB_WRONG_PARAM )
  {
    yyerror ("object does not have such attribute");
    exit (1);
  }
  else if ( iResult == FX_ATTRIB_WRONG_TYPE )
  {
    yyerror ("incorrect type in attribute value");
    exit (1);
  }
  else if ( iResult == FX_ATTRIB_WRONG_VALUE )
  {
    yyerror ("value not accepted for this attribute");
    exit (1);
  }
  else if ( iResult == FX_ATTRIB_USER_ERROR )
  {
    yyerror (TProcedural::_tUserErrorMessage.c_str());
    exit (1);
  }

}  /* SetParameter() */
