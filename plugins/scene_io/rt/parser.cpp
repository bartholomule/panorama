
/*  A Bison parser, made from parser.y
 by  GNU Bison version 1.27
  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse rt_parse
#define yylex rt_lex
#define yyerror rt_error
#define yylval rt_lval
#define yychar rt_char
#define yydebug rt_debug
#define yynerrs rt_nerrs
#define	T_BOOL	257
#define	T_REAL	258
#define	T_IDENTIFIER	259
#define	T_QUOTED_STRING	260
#define	T_AGGREGATE	261
#define	T_ATM_OBJECT	262
#define	T_BLUE	263
#define	T_BOX	264
#define	T_BSDF	265
#define	T_CAMERA	266
#define	T_CIRCLE	267
#define	T_CLASS	268
#define	T_COLOR	269
#define	T_CONE	270
#define	T_CYLINDER	271
#define	T_DEFINE	272
#define	T_DIFFERENCE	273
#define	T_EXTENDS	274
#define	T_FILTER	275
#define	T_GREEN	276
#define	T_IMAGE_FILTER	277
#define	T_INTERSECTION	278
#define	T_LIGHT	279
#define	T_MATERIAL	280
#define	T_MESH	281
#define	T_OBJECT	282
#define	T_OBJECT_FILTER	283
#define	T_OUTPUT	284
#define	T_PHONG_TRIANGLE	285
#define	T_PLANE	286
#define	T_RECTANGLE	287
#define	T_RED	288
#define	T_RENDERER	289
#define	T_ROTATE	290
#define	T_SCALE	291
#define	T_SCENE	292
#define	T_SPHERE	293
#define	T_TORUS	294
#define	T_TRANSLATE	295
#define	T_TRIANGLE	296
#define	T_TYPE	297
#define	T_UNION	298
#define	T_VECTOR	299
#define	T_VERTEX	300
#define	T_X	301
#define	T_Y	302
#define	T_Z	303
#define	T_ATTR_LIST	304
#define	T_ATTR_TYPE	305
#define	UNARY_MINUS	306

#line 19 "parser.y"


#include <map>
#include <stack>
#include <string>
#include <iostream>
#include "llapi/llapi_all.h"
#include "hlapi/hlapi_all.h"
#include "hlapi/class_manager.h"
#include "parser_defs.h"
#include "rt_io.h"

static map<string, TProcedural*, less<string> >       _tObjectMap;
static map<string, TColor, less<string> >             _tColorMap;
static map<string, TVector, less<string> >            _tVectorMap;
static map<string, double(*)(void), less<string> >    _tFunctionMap;
static stack<TProcedural*>                            _tDataStack;

static TProcedural*   _ptData;
static TProcedural*   _ptParent;
static Byte           _bVertices;
static TVector        _tVector;
static TVector2       _tVector2;
static TColor         _tColor;
static TAggregate*    _ptWorld;
static NAttribute     _nAttrib;
static TImageIO*      _ptImageIO;

static double (*_pfFunction)(void);

#define POP()           top(); _tDataStack.pop()            // Fix to STL's pop()

#define DATA		(_tDataStack.top())
#define ENTITY		((TEntity*) _tDataStack.top())
#define VOLUME		((TVolume*) _tDataStack.top())
#define VECTOR		((TVector*) _tDataStack.top())
#define COLOR		((TColor*) _tDataStack.top())
#define SCENE		(TSceneRT::_ptParsedScene)
#define MATERIAL	((TMaterial*) _tDataStack.top())
#define OBJECT		((TObject*) _tDataStack.top())
#define AGGREGATE	((TAggregate*) _tDataStack.top())
#define TRIANGLE	((TTriangle*) _tDataStack.top())
#define RECTANGLE	((TRectangle*) _tDataStack.top())
#define MESH		((TMeshObject*) _tDataStack.top())

#define YYDEBUG 1
#define YYERROR_VERBOSE 

static TProcedural* NewObject (const string& rktCLASS, const TProcedural* pktPARENT);
static void* InstanceObject (const string& rktNAME);
static void* UpdateObject (const string& rktNAME);
static void DefineObject (const string& rktNAME, const string& rktCLASS, const string& rktDEF_CLASS);
static void CreateObject (const string& rktCLASS, const string& rktDEF_CLASS);
static void SetParameter (const string& rktATTRIB, EAttribType eTYPE);

static void InitObjects (void);
static void InitFunctions (void);

static string EAttribType_to_str(EAttribType eat);
 

#line 81 "parser.y"
typedef union {
         char                  acIdent [200];
         double                dValue;
         bool                  gValue;
         TColor*               ptColor;
         TVector*              ptVector;
         TVector2*             ptVector2;
         TScene*               ptScene;
         TRenderer*            ptRenderer;
         TCamera*              ptCamera;
         TLight*               ptLight;
         TBsdf*                ptBsdf;
         TMaterial*            ptMaterial;
         TObject*              ptObject;
         TImageFilter*         ptIFilter;
         TObjectFilter*        ptOFilter;
         TAtmosphericObject*   ptAtmObject;
         TImageIO*             ptImageIO;
       } YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		577
#define	YYFLAG		-32768
#define	YYNTBASE	65

#define YYTRANSLATE(x) ((unsigned)(x) <= 306 ? yytranslate[x] : 204)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    57,
    58,    54,    52,    60,    53,     2,    55,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    62,     2,    59,
     2,    61,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    63,     2,    64,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    56
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     4,     7,    10,    13,    15,    19,    23,    27,
    31,    35,    39,    43,    47,    51,    55,    59,    63,    67,
    71,    75,    79,    83,    87,    91,    95,    99,   103,   107,
   111,   115,   119,   123,   126,   129,   132,   135,   138,   141,
   144,   147,   150,   153,   156,   159,   162,   165,   168,   171,
   173,   177,   181,   185,   189,   193,   196,   200,   208,   214,
   216,   219,   220,   222,   223,   227,   231,   232,   235,   239,
   244,   247,   250,   253,   256,   259,   262,   265,   268,   271,
   274,   277,   280,   283,   286,   289,   290,   293,   296,   299,
   302,   305,   307,   310,   312,   313,   316,   319,   322,   324,
   325,   332,   334,   335,   341,   342,   345,   348,   351,   354,
   355,   362,   364,   365,   371,   372,   375,   378,   381,   384,
   385,   390,   391,   394,   397,   399,   400,   407,   409,   410,
   416,   417,   420,   423,   426,   429,   431,   432,   439,   441,
   442,   448,   449,   456,   458,   459,   465,   466,   473,   475,
   476,   482,   483,   490,   492,   493,   499,   500,   507,   509,
   510,   516,   517,   524,   526,   527,   533,   534,   541,   543,
   544,   550,   551,   558,   560,   561,   567,   568,   575,   577,
   578,   584,   585,   592,   594,   595,   601,   602,   609,   611,
   612,   618,   619,   622,   624,   626,   627,   634,   636,   637,
   643,   644,   647,   649,   651,   652,   659,   661,   662,   668,
   669,   672,   674,   676,   677,   684,   686,   687,   693,   694,
   697,   699,   701,   702,   709,   711,   712,   718,   719,   726,
   728,   729,   735,   736,   743,   745,   746,   752,   753,   760,
   762,   763,   769,   770,   777,   779,   780,   786,   787,   794,
   796,   797,   803,   804,   811,   813,   814,   820,   821,   824,
   827,   829,   830,   837,   839,   840,   846,   848,   850,   852,
   854,   856,   858,   860,   862,   864,   866,   868,   870,   872,
   874,   876,   878,   880,   882,   884,   886,   888,   890,   892,
   894,   896,   898,   900,   902,   904,   906,   908,   910,   912,
   914,   916,   918,   920,   922,   924,   926,   928,   930,   932,
   934,   936,   938
};

static const short yyrhs[] = {    -1,
    65,    66,     0,    65,    67,     0,    38,   100,     0,     8,
   174,     0,    68,     0,    18,    15,    82,     0,    18,    45,
    88,     0,    18,    28,   132,     0,    18,    38,    98,     0,
    18,    12,   104,     0,    18,    25,   108,     0,    18,    11,
   112,     0,    18,    23,   124,     0,    18,    29,   128,     0,
    18,    35,   116,     0,    18,    26,   120,     0,    18,    32,
   136,     0,    18,    39,   140,     0,    18,    42,   144,     0,
    18,    31,   150,     0,    18,    33,   156,     0,    18,    13,
   162,     0,    18,     7,   168,     0,    18,    10,   176,     0,
    18,    17,   180,     0,    18,    16,   184,     0,    18,    40,
   188,     0,    18,    27,   192,     0,    18,     8,   172,     0,
    18,    44,   198,     0,    18,    24,   198,     0,    18,    19,
   198,     0,    28,   134,     0,    32,   138,     0,    39,   142,
     0,    42,   146,     0,    31,   152,     0,    33,   158,     0,
    13,   164,     0,     7,   170,     0,    10,   178,     0,    17,
   182,     0,    16,   186,     0,    40,   190,     0,    27,   194,
     0,    44,   200,     0,    24,   200,     0,    19,   200,     0,
     4,     0,     5,    57,    58,     0,    69,    52,    69,     0,
    69,    53,    69,     0,    69,    54,    69,     0,    69,    55,
    69,     0,    53,    69,     0,    57,    69,    58,     0,    59,
    69,    60,    69,    60,    69,    61,     0,    59,    69,    60,
    69,    61,     0,    70,     0,    46,    70,     0,     0,     5,
     0,     0,    62,    20,     5,     0,    62,    14,     5,     0,
     0,    75,    76,     0,    50,    57,    58,     0,    51,    57,
   202,    58,     0,     5,    70,     0,     5,    71,     0,     5,
    69,     0,     5,     3,     0,     5,     6,     0,     5,    84,
     0,    15,    84,     0,    45,    90,     0,     5,    90,     0,
     5,   106,     0,    12,   106,     0,     5,   118,     0,    35,
   118,     0,     5,   114,     0,    11,   114,     0,     0,    77,
    78,     0,    41,    70,     0,    36,    70,     0,    41,    90,
     0,    36,    90,     0,    76,     0,    37,    70,     0,    78,
     0,     0,    80,    81,     0,    26,   122,     0,    21,   130,
     0,    79,     0,     0,    73,    74,    83,    63,    86,    64,
     0,    73,     0,     0,    74,    85,    63,    86,    64,     0,
     0,    86,    87,     0,    34,    69,     0,    22,    69,     0,
     9,    69,     0,     0,    73,    74,    89,    63,    92,    64,
     0,    73,     0,     0,    74,    91,    63,    92,    64,     0,
     0,    92,    93,     0,    47,    69,     0,    48,    69,     0,
    49,    69,     0,     0,    63,    95,    96,    64,     0,     0,
    96,    97,     0,    43,     6,     0,    76,     0,     0,    73,
    74,    99,    63,   102,    64,     0,    73,     0,     0,    74,
   101,    63,   102,    64,     0,     0,   102,   103,     0,    25,
   110,     0,    21,   126,     0,    30,    94,     0,    76,     0,
     0,    73,    74,   105,    63,    77,    64,     0,    73,     0,
     0,    74,   107,    63,    77,    64,     0,     0,    73,    74,
   109,    63,    77,    64,     0,    73,     0,     0,    74,   111,
    63,    77,    64,     0,     0,    73,    74,   113,    63,    75,
    64,     0,    73,     0,     0,    74,   115,    63,    75,    64,
     0,     0,    73,    74,   117,    63,    75,    64,     0,    73,
     0,     0,    74,   119,    63,    75,    64,     0,     0,    73,
    74,   121,    63,    75,    64,     0,    73,     0,     0,    74,
   123,    63,    75,    64,     0,     0,    73,    74,   125,    63,
    75,    64,     0,    73,     0,     0,    74,   127,    63,    75,
    64,     0,     0,    73,    74,   129,    63,    75,    64,     0,
    73,     0,     0,    74,   131,    63,    75,    64,     0,     0,
    73,    74,   133,    63,    80,    64,     0,    73,     0,     0,
    74,   135,    63,    80,    64,     0,     0,    73,    74,   137,
    63,    80,    64,     0,    73,     0,     0,    74,   139,    63,
    80,    64,     0,     0,    73,    74,   141,    63,    80,    64,
     0,    73,     0,     0,    74,   143,    63,    80,    64,     0,
     0,    73,    74,   145,    63,   148,    64,     0,    73,     0,
     0,    74,   147,    63,   148,    64,     0,     0,   148,   149,
     0,    72,     0,    81,     0,     0,    73,    74,   151,    63,
   154,    64,     0,    73,     0,     0,    74,   153,    63,   154,
    64,     0,     0,   154,   155,     0,    72,     0,    81,     0,
     0,    73,    74,   157,    63,   160,    64,     0,    73,     0,
     0,    74,   159,    63,   160,    64,     0,     0,   160,   161,
     0,    72,     0,    81,     0,     0,    73,    74,   163,    63,
    80,    64,     0,    73,     0,     0,    74,   165,    63,    80,
    64,     0,     0,   166,   167,     0,    68,     0,    81,     0,
     0,    73,    74,   169,    63,   166,    64,     0,    73,     0,
     0,    74,   171,    63,   166,    64,     0,     0,    73,    74,
   173,    63,    75,    64,     0,    73,     0,     0,    74,   175,
    63,    75,    64,     0,     0,    73,    74,   177,    63,    80,
    64,     0,    73,     0,     0,    74,   179,    63,    80,    64,
     0,     0,    73,    74,   181,    63,    80,    64,     0,    73,
     0,     0,    74,   183,    63,    80,    64,     0,     0,    73,
    74,   185,    63,    80,    64,     0,    73,     0,     0,    74,
   187,    63,    80,    64,     0,     0,    73,    74,   189,    63,
    80,    64,     0,    73,     0,     0,    74,   191,    63,    80,
    64,     0,     0,    73,    74,   193,    63,   196,    64,     0,
    73,     0,     0,    74,   195,    63,   196,    64,     0,     0,
   196,   197,     0,    42,   146,     0,    81,     0,     0,    73,
    74,   199,    63,   166,    64,     0,    73,     0,     0,    74,
   201,    63,   166,    64,     0,     5,     0,   203,     0,     7,
     0,     8,     0,     9,     0,    10,     0,    11,     0,    12,
     0,    13,     0,    14,     0,    15,     0,    16,     0,    17,
     0,    18,     0,    19,     0,    20,     0,    21,     0,    22,
     0,    23,     0,    24,     0,    25,     0,    26,     0,    27,
     0,    28,     0,    29,     0,    30,     0,    31,     0,    32,
     0,    33,     0,    34,     0,    35,     0,    36,     0,    37,
     0,    38,     0,    39,     0,    40,     0,    41,     0,    42,
     0,    43,     0,    44,     0,    45,     0,    46,     0,    47,
     0,    48,     0,    49,     0,    50,     0,    51,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   225,   226,   227,   230,   232,   236,   242,   244,   246,   248,
   250,   252,   254,   256,   258,   260,   262,   264,   266,   268,
   270,   272,   274,   276,   278,   280,   282,   284,   286,   288,
   290,   292,   294,   298,   302,   306,   310,   314,   318,   322,
   326,   330,   334,   338,   342,   346,   350,   355,   360,   367,
   371,   381,   385,   389,   393,   397,   401,   407,   414,   421,
   425,   431,   435,   441,   445,   455,   462,   463,   466,   486,
   507,   512,   517,   522,   527,   532,   537,   542,   547,   552,
   557,   562,   567,   572,   577,   584,   585,   588,   592,   596,
   600,   604,   607,   611,   614,   615,   618,   622,   626,   629,
   647,   655,   671,   675,   681,   682,   685,   689,   693,   699,
   717,   725,   741,   745,   751,   752,   755,   759,   763,   769,
   773,   779,   780,   783,   796,   799,   803,   809,   814,   820,
   827,   828,   831,   835,   839,   843,   846,   850,   856,   860,
   864,   870,   874,   880,   884,   888,   894,   898,   904,   908,
   912,   918,   922,   928,   932,   936,   942,   946,   952,   956,
   960,   967,   971,   977,   981,   985,   991,   995,  1001,  1005,
  1009,  1015,  1019,  1025,  1029,  1033,  1039,  1043,  1049,  1053,
  1057,  1063,  1067,  1073,  1077,  1081,  1087,  1092,  1103,  1107,
  1112,  1123,  1124,  1127,  1132,  1135,  1140,  1151,  1155,  1160,
  1171,  1172,  1175,  1180,  1183,  1188,  1199,  1203,  1208,  1219,
  1220,  1223,  1228,  1231,  1235,  1241,  1245,  1249,  1255,  1256,
  1259,  1263,  1266,  1270,  1276,  1280,  1284,  1290,  1294,  1300,
  1304,  1308,  1314,  1318,  1324,  1328,  1332,  1338,  1342,  1348,
  1352,  1356,  1362,  1366,  1372,  1376,  1380,  1386,  1390,  1396,
  1400,  1404,  1410,  1414,  1420,  1424,  1428,  1434,  1435,  1438,
  1443,  1446,  1450,  1456,  1460,  1464,  1470,  1472,  1476,  1478,
  1479,  1480,  1481,  1482,  1483,  1484,  1485,  1486,  1487,  1488,
  1489,  1490,  1491,  1492,  1493,  1494,  1495,  1496,  1497,  1498,
  1499,  1500,  1501,  1502,  1503,  1504,  1505,  1506,  1507,  1508,
  1509,  1510,  1511,  1512,  1513,  1514,  1515,  1516,  1517,  1518,
  1519,  1520,  1521
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","T_BOOL",
"T_REAL","T_IDENTIFIER","T_QUOTED_STRING","T_AGGREGATE","T_ATM_OBJECT","T_BLUE",
"T_BOX","T_BSDF","T_CAMERA","T_CIRCLE","T_CLASS","T_COLOR","T_CONE","T_CYLINDER",
"T_DEFINE","T_DIFFERENCE","T_EXTENDS","T_FILTER","T_GREEN","T_IMAGE_FILTER",
"T_INTERSECTION","T_LIGHT","T_MATERIAL","T_MESH","T_OBJECT","T_OBJECT_FILTER",
"T_OUTPUT","T_PHONG_TRIANGLE","T_PLANE","T_RECTANGLE","T_RED","T_RENDERER","T_ROTATE",
"T_SCALE","T_SCENE","T_SPHERE","T_TORUS","T_TRANSLATE","T_TRIANGLE","T_TYPE",
"T_UNION","T_VECTOR","T_VERTEX","T_X","T_Y","T_Z","T_ATTR_LIST","T_ATTR_TYPE",
"'+'","'-'","'*'","'/'","UNARY_MINUS","'('","')'","'<'","','","'>'","':'","'{'",
"'}'","everything","instance","definition","object","real_expr","vector3","vector2",
"vertex_instance","name","class","params","param","entity_params","entity_param",
"volume_param","object_params","object_param","color_def","@1","color_instance",
"@2","color_params","color_param","vector_def","@3","vector_instance","@4","vector_params",
"vector_param","image_io_instance","@5","image_io_params","image_io_param","scene_def",
"@6","scene_instance","@7","scene_params","scene_param","camera_def","@8","camera_instance",
"@9","light_def","@10","light_instance","@11","bsdf_def","@12","bsdf_instance",
"@13","renderer_def","@14","renderer_instance","@15","material_def","@16","material_instance",
"@17","ifilter_def","@18","ifilter_instance","@19","ofilter_def","@20","ofilter_instance",
"@21","object_def","@22","object_instance","@23","plane_def","@24","plane_instance",
"@25","sphere_def","@26","sphere_instance","@27","triangle_def","@28","triangle_instance",
"@29","triangle_params","triangle_param","phong_triangle_def","@30","phong_triangle_instance",
"@31","phong_triangle_params","phong_triangle_param","rectangle_def","@32","rectangle_instance",
"@33","rectangle_params","rectangle_param","circle_def","@34","circle_instance",
"@35","aggregate_params","aggregate_param","aggregate_def","@36","aggregate_instance",
"@37","atm_object_def","@38","atm_object_instance","@39","box_def","@40","box_instance",
"@41","cylinder_def","@42","cylinder_instance","@43","cone_def","@44","cone_instance",
"@45","torus_def","@46","torus_instance","@47","mesh_def","@48","mesh_instance",
"@49","mesh_params","mesh_param","csg_def","@50","csg_instance","@51","potential_string",
"reserved_words", NULL
};
#endif

static const short yyr1[] = {     0,
    65,    65,    65,    66,    66,    66,    67,    67,    67,    67,
    67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
    67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
    67,    67,    67,    68,    68,    68,    68,    68,    68,    68,
    68,    68,    68,    68,    68,    68,    68,    68,    68,    69,
    69,    69,    69,    69,    69,    69,    69,    70,    71,    72,
    72,    73,    73,    74,    74,    74,    75,    75,    76,    76,
    76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
    76,    76,    76,    76,    76,    77,    77,    78,    78,    78,
    78,    78,    79,    79,    80,    80,    81,    81,    81,    83,
    82,    84,    85,    84,    86,    86,    87,    87,    87,    89,
    88,    90,    91,    90,    92,    92,    93,    93,    93,    95,
    94,    96,    96,    97,    97,    99,    98,   100,   101,   100,
   102,   102,   103,   103,   103,   103,   105,   104,   106,   107,
   106,   109,   108,   110,   111,   110,   113,   112,   114,   115,
   114,   117,   116,   118,   119,   118,   121,   120,   122,   123,
   122,   125,   124,   126,   127,   126,   129,   128,   130,   131,
   130,   133,   132,   134,   135,   134,   137,   136,   138,   139,
   138,   141,   140,   142,   143,   142,   145,   144,   146,   147,
   146,   148,   148,   149,   149,   151,   150,   152,   153,   152,
   154,   154,   155,   155,   157,   156,   158,   159,   158,   160,
   160,   161,   161,   163,   162,   164,   165,   164,   166,   166,
   167,   167,   169,   168,   170,   171,   170,   173,   172,   174,
   175,   174,   177,   176,   178,   179,   178,   181,   180,   182,
   183,   182,   185,   184,   186,   187,   186,   189,   188,   190,
   191,   190,   193,   192,   194,   195,   194,   196,   196,   197,
   197,   199,   198,   200,   201,   200,   202,   202,   203,   203,
   203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
   203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
   203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
   203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
   203,   203,   203
};

static const short yyr2[] = {     0,
     0,     2,     2,     2,     2,     1,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     1,
     3,     3,     3,     3,     3,     2,     3,     7,     5,     1,
     2,     0,     1,     0,     3,     3,     0,     2,     3,     4,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     0,     2,     2,     2,     2,
     2,     1,     2,     1,     0,     2,     2,     2,     1,     0,
     6,     1,     0,     5,     0,     2,     2,     2,     2,     0,
     6,     1,     0,     5,     0,     2,     2,     2,     2,     0,
     4,     0,     2,     2,     1,     0,     6,     1,     0,     5,
     0,     2,     2,     2,     2,     1,     0,     6,     1,     0,
     5,     0,     6,     1,     0,     5,     0,     6,     1,     0,
     5,     0,     6,     1,     0,     5,     0,     6,     1,     0,
     5,     0,     6,     1,     0,     5,     0,     6,     1,     0,
     5,     0,     6,     1,     0,     5,     0,     6,     1,     0,
     5,     0,     6,     1,     0,     5,     0,     6,     1,     0,
     5,     0,     2,     1,     1,     0,     6,     1,     0,     5,
     0,     2,     1,     1,     0,     6,     1,     0,     5,     0,
     2,     1,     1,     0,     6,     1,     0,     5,     0,     2,
     1,     1,     0,     6,     1,     0,     5,     0,     6,     1,
     0,     5,     0,     6,     1,     0,     5,     0,     6,     1,
     0,     5,     0,     6,     1,     0,     5,     0,     6,     1,
     0,     5,     0,     6,     1,     0,     5,     0,     2,     2,
     1,     0,     6,     1,     0,     5,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1
};

static const short yydefact[] = {     1,
     0,    62,    62,    62,    62,    62,    62,     0,    62,    62,
    62,    62,    62,    62,    62,    62,    62,    62,    62,    62,
     2,     3,     6,    63,     0,   225,   226,    41,   230,   231,
     5,   235,   236,    42,   216,   217,    40,   245,   246,    44,
   240,   241,    43,    62,    62,    62,    62,    62,    62,    62,
    62,    62,    62,    62,    62,    62,    62,    62,    62,    62,
    62,    62,    62,    62,    62,    62,    62,    62,    62,    62,
   264,   265,    49,    48,   255,   256,    46,   174,   175,    34,
   198,   199,    38,   179,   180,    35,   207,   208,    39,   128,
   129,     4,   184,   185,    36,   250,   251,    45,   189,   190,
    37,    47,     0,     0,     0,     0,     0,     0,     0,     0,
    64,    24,    64,    30,    64,    25,    64,    13,    64,    11,
    64,    23,    64,     7,    64,    27,    64,    26,    64,    33,
    64,    14,    32,    64,    12,    64,    17,    64,    29,    64,
     9,    64,    15,    64,    21,    64,    18,    64,    22,    64,
    16,    64,    10,    64,    19,    64,    28,    64,    20,    31,
    64,     8,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    66,    65,   219,    67,    95,    95,    95,    95,
   223,   228,   233,   147,   137,   214,   100,   243,   238,   262,
   162,   142,   157,   253,   172,   167,   196,   177,   205,   152,
   126,   182,   248,   187,   110,   219,   258,    95,   201,    95,
   210,   131,    95,    95,   192,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    62,    62,    62,    62,
    62,    62,    62,    62,     0,    62,    62,     0,     0,   227,
   221,    92,    94,    99,   222,   220,   232,    68,   237,    96,
   218,   247,   242,   219,    67,    95,    67,    86,    95,   105,
    95,    95,   219,    67,    86,    67,   258,    95,    67,   201,
    95,   210,    67,   131,    95,    95,   192,   115,   266,    62,
   257,   261,   259,   176,     0,     0,   200,    60,   203,   204,
   202,   181,   209,   212,   213,   211,    62,    62,     0,   130,
   136,   132,   186,   252,   191,   194,   195,   193,    74,    50,
    63,    75,     0,     0,     0,    73,    71,    72,   102,   103,
    76,    79,    80,    84,    82,   149,   150,    85,   139,   140,
    81,   102,   103,    77,   169,   170,    98,   159,   160,    97,
   154,   155,    83,    89,   112,   113,    91,    93,    88,    90,
    78,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   260,    61,
     0,     0,   164,   165,   134,   144,   145,   133,   120,   135,
     0,    56,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    69,   267,   269,   270,   271,
   272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
   302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
   312,   313,     0,   268,   224,   229,   234,   148,   138,    87,
   215,     0,     0,     0,   101,   106,   244,   239,   263,   163,
   143,   158,   254,   173,   168,   197,   178,   206,   153,   127,
   183,   249,   188,     0,     0,     0,   111,   116,     0,     0,
     0,   122,    51,    57,     0,    52,    53,    54,    55,   105,
   115,    86,    67,    67,    67,    67,    70,   109,   108,   107,
   117,   118,   119,     0,    67,    86,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   121,
   125,   123,    59,   104,   114,   141,   151,   156,   171,   161,
     0,   166,   146,   124,    58,     0,     0
};

static const short yydefgoto[] = {     1,
    21,    22,   271,   346,   318,   348,   319,    71,    72,   217,
   272,   388,   273,   274,   218,   280,   124,   228,   351,   429,
   390,   496,   162,   246,   352,   430,   408,   518,   420,   522,
   547,   562,   153,   242,    92,   169,   253,   332,   120,   226,
   353,   431,   135,   233,   418,   521,   118,   225,   354,   432,
   151,   241,   355,   433,   137,   234,   370,   435,   132,   232,
   415,   520,   143,   237,   367,   434,   141,   236,    80,   165,
   147,   239,    86,   167,   155,   243,    95,   170,   159,   245,
   101,   172,   256,   338,   145,   238,    83,   166,   250,   321,
   149,   240,    89,   168,   252,   326,   122,   227,    37,   108,
   216,   276,   112,   222,    28,   105,   114,   223,    31,   106,
   116,   224,    34,   107,   128,   230,    43,   110,   126,   229,
    40,   109,   157,   244,    98,   171,   139,   235,    77,   164,
   248,   313,   130,   231,    73,   163,   483,   484
};

static const short yypact[] = {-32768,
  1611,    30,    30,    30,    30,    30,    30,  1649,    30,    30,
    30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
-32768,-32768,-32768,-32768,    58,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,    15,    15,    15,    15,    15,    15,    15,
    15,    15,    15,    15,    15,    15,    15,    15,    15,    15,
    15,    15,    15,    15,    15,    15,    15,    15,    15,    15,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    69,    70,    13,    41,    49,    54,    68,    76,
    63,-32768,    63,-32768,    63,-32768,    63,-32768,    63,-32768,
    63,-32768,    63,-32768,    63,-32768,    63,-32768,    63,-32768,
    63,-32768,-32768,    63,-32768,    63,-32768,    63,-32768,    63,
-32768,    63,-32768,    63,-32768,    63,-32768,    63,-32768,    63,
-32768,    63,-32768,    63,-32768,    63,-32768,    63,-32768,-32768,
    63,-32768,    78,    89,    92,    93,    94,    98,   101,   103,
   106,   113,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   450,   381,   800,   812,   854,
   866,   115,   117,   118,   120,   125,   128,   130,   131,   133,
   135,   137,   139,   141,   143,   145,   147,   149,   151,   153,
   154,   156,   158,   160,   162,   164,   492,   746,   908,   108,
   920,   354,  1232,   962,   974,   617,    20,    30,    30,    30,
    30,    30,    30,    65,    73,    65,    30,    90,   105,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    30,
-32768,-32768,-32768,-32768,    73,    27,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,    30,    30,   166,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   114,-32768,    27,    27,    27,   -13,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,    77,  1559,   534,  1347,  1016,  1373,  1275,  1028,    96,
  1070,  1082,   576,  1384,  1292,  1401,   758,  1124,  1410,   634,
  1136,   684,  1427,  1234,  1178,  1190,   696,    62,-32768,-32768,
   114,   246,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   173,-32768,   262,   258,    27,    27,    27,    27,   170,   172,
   174,   176,   178,   180,   190,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   217,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,    27,    27,    27,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,    27,    27,    27,-32768,-32768,    27,   213,
   214,-32768,-32768,-32768,    27,   -46,   -46,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -13,   -13,   -13,
   -13,   -13,   -13,   355,-32768,-32768,   317,   194,    99,   126,
  1319,  1438,  1464,  1475,  1492,    27,  1501,  1336,   275,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   241,-32768,-32768,-32768,-32768,   284,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,   287,   -72,  -150,-32768,  -218,    -1,    84,  -266,
  -217,  -268,  -366,-32768,    72,  -110,-32768,-32768,    29,-32768,
  -239,-32768,-32768,-32768,  -116,-32768,  -228,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,     0,-32768,-32768,-32768,
    46,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    50,-32768,
-32768,-32768,    44,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
     9,-32768,    14,-32768,-32768,-32768,-32768,-32768,    23,-32768,
-32768,-32768,-32768,-32768,    22,-32768,-32768,-32768,-32768,-32768,
  -199,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    28,-32768,    67,-32768,    61,-32768,-32768,-32768
};


#define	YYLAST		1694


static const short yytable[] = {   278,
    26,    29,    32,    35,    38,    41,   247,   427,   428,    75,
    78,    81,    84,    87,    90,    93,    96,    99,   385,    24,
   387,   490,   339,   340,   341,   342,   395,   394,   490,   396,
   340,   411,   399,   324,    24,   331,   403,   336,   425,   426,
   427,   428,   111,   113,   115,   117,   119,   121,   123,   125,
   127,   129,   131,   129,   134,   136,   138,   140,   142,   144,
   146,   148,   150,   152,   154,   156,   158,   129,   161,    24,
    74,   103,   343,   173,   174,   175,   344,   104,   345,   343,
   102,    25,   -64,   344,   384,    27,    30,    33,    36,    39,
    42,    25,   -64,   393,    76,    79,    82,    85,    88,    91,
    94,    97,   100,   176,   492,   275,   347,   492,   514,   515,
   516,   177,   257,   374,   378,   379,   178,   493,   258,   259,
   493,   133,   260,   316,    25,   517,    25,   -64,   261,   494,
   179,   316,   494,   262,   436,   160,   275,   312,   180,   320,
   206,   325,   263,   264,   265,   337,   382,   377,   266,   380,
   381,   207,   267,   315,   208,   209,   210,   268,   269,   495,
   211,   383,   564,   212,   410,   213,   316,   278,   214,   278,
   421,   317,   514,   515,   516,   215,   278,   284,   278,   285,
   286,   278,   287,   324,   490,   278,   331,   288,   336,   565,
   289,   490,   290,   291,   181,   292,   182,   293,   183,   294,
   184,   295,   185,   296,   186,   297,   187,   298,   188,   299,
   189,   300,   190,   301,   191,   302,   303,   192,   304,   193,
   305,   194,   306,   195,   307,   196,   308,   197,   419,   198,
   523,   199,   530,   200,   531,   201,   532,   202,   533,   203,
   534,   204,   535,   412,   205,   425,   426,   427,   428,   219,
   220,   221,   536,   556,   563,   349,   356,   359,   362,   365,
   368,   371,   375,   551,   375,   375,   552,   553,   554,   555,
   422,   423,   424,   275,   537,   545,   546,   558,   557,   249,
   574,   251,   275,   577,   254,   255,   312,    23,   364,   320,
   549,   325,   425,   426,   427,   428,   337,   425,   426,   427,
   428,   575,   550,   404,   361,   519,   373,   358,    99,   425,
   426,   427,   428,   425,   426,   427,   428,   525,   409,   524,
   407,   257,   400,   402,   397,   413,   416,   258,   259,   561,
     0,   260,     0,     0,   278,   278,   278,   278,     0,   278,
   350,   357,   360,   363,   366,   369,   372,   376,     0,   376,
   376,   263,   526,   527,   528,   529,     0,   386,   257,   559,
   389,   267,   391,   392,   258,   259,   268,   269,   260,   398,
     0,     0,   401,     0,   261,     0,   405,   406,     0,   262,
   560,     0,     0,     0,     0,   257,     0,     0,   263,   264,
   265,   258,   259,   100,   266,   260,     0,     0,   267,   315,
     0,     0,     0,   268,   269,     0,   425,   426,   427,   428,
   414,   417,   316,     0,   556,   263,     0,   323,     0,   538,
   539,   540,     0,     0,     0,   267,     0,     0,     0,     0,
   268,   269,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   541,   542,   543,   277,     0,   544,     0,     0,     0,
     0,     0,   548,     0,   257,     0,     2,     0,     0,     4,
   258,   259,     5,     0,   260,     6,     7,     0,     9,     0,
   261,     0,     0,    10,     0,   262,    11,    12,     0,     0,
    13,    14,    15,   571,   263,   264,   265,     0,    17,    18,
   266,    19,     0,    20,   267,     0,   257,     0,     2,   268,
   269,     4,   258,   259,     5,     0,   260,     6,     7,     0,
     9,     0,   261,   270,     0,    10,     0,   262,    11,    12,
     0,     0,    13,    14,    15,     0,   263,   264,   265,     0,
    17,    18,   266,    19,     0,    20,   267,     0,   257,     0,
     2,   268,   269,     4,   258,   259,     5,     0,   260,     6,
     7,     0,     9,     0,   261,   309,     0,    10,     0,   262,
    11,    12,     0,     0,    13,    14,    15,     0,   263,   264,
   265,     0,    17,    18,   266,    19,     0,    20,   267,     0,
   257,     0,     2,   268,   269,     4,   258,   259,     5,     0,
   260,     6,     7,     0,     9,     0,   261,   485,     0,    10,
     0,   262,    11,    12,     0,     0,    13,    14,    15,     0,
   263,   264,   265,     0,    17,    18,   266,    19,     0,    20,
   267,   257,     0,     0,     0,   268,   269,   258,   259,     0,
     0,   260,     0,     0,     0,     0,     0,   261,   257,   499,
     0,     0,   262,     0,   258,   259,     0,     0,   260,     0,
     0,   263,   264,   265,   261,     0,     0,   266,     0,   262,
     0,   267,   315,     0,     0,     0,   268,   269,   263,   264,
   265,     0,     0,     0,   266,   316,     0,     0,   267,   315,
   335,     0,     0,   268,   269,     0,     0,     0,   257,     0,
     0,     0,   316,     0,   258,   259,     0,   506,   260,     0,
   257,     0,     0,     0,   261,     0,   258,   259,     0,   262,
   260,     0,     0,     0,     0,     0,   261,     0,   263,   264,
   265,   262,     0,     0,   266,     0,     0,     0,   267,   315,
   263,   264,   265,   268,   269,     0,   266,     0,     0,     0,
   267,   315,   316,     0,     0,   268,   269,   508,     0,     0,
   257,     0,     0,     0,   316,     0,   258,   259,     0,   513,
   260,     0,   257,     0,     0,     0,   261,     0,   258,   259,
     0,   262,   260,     0,     0,     0,     0,     0,   261,     0,
   263,   264,   265,   262,     0,     0,   266,   310,     0,     0,
   267,     0,   263,   264,   265,   268,   269,     0,   266,   310,
     0,     0,   267,     0,   257,     0,     0,   268,   269,   311,
   258,   259,     0,     0,   260,     0,   257,     0,     0,     0,
   261,   503,   258,   259,     0,   262,   260,     0,     0,     0,
     0,     0,   261,     0,   263,   264,   265,   262,     0,     0,
   266,     0,     0,     0,   267,     0,   263,   264,   265,   268,
   269,     0,   266,     0,     0,     0,   267,     0,   257,     0,
     0,   268,   269,   279,   258,   259,     0,     0,   260,     0,
   257,     0,     0,     0,   261,   281,   258,   259,     0,   262,
   260,     0,     0,     0,     0,     0,   261,     0,   263,   264,
   265,   262,     0,     0,   266,     0,     0,     0,   267,     0,
   263,   264,   265,   268,   269,     0,   266,     0,     0,     0,
   267,     0,   257,     0,     0,   268,   269,   282,   258,   259,
     0,     0,   260,     0,   257,     0,     0,     0,   261,   283,
   258,   259,     0,   262,   260,     0,     0,     0,     0,     0,
   261,     0,   263,   264,   265,   262,     0,     0,   266,     0,
     0,     0,   267,     0,   263,   264,   265,   268,   269,     0,
   266,     0,     0,     0,   267,     0,   257,     0,     0,   268,
   269,   314,   258,   259,     0,     0,   260,     0,   257,     0,
     0,     0,   261,   322,   258,   259,     0,   262,   260,     0,
     0,     0,     0,     0,   261,     0,   263,   264,   265,   262,
     0,     0,   266,     0,     0,     0,   267,     0,   263,   264,
   265,   268,   269,     0,   266,     0,     0,     0,   267,     0,
   257,     0,     0,   268,   269,   333,   258,   259,     0,     0,
   260,     0,   257,     0,     0,     0,   261,   334,   258,   259,
     0,   262,   260,     0,     0,     0,     0,     0,   261,     0,
   263,   264,   265,   262,     0,     0,   266,     0,     0,     0,
   267,     0,   263,   264,   265,   268,   269,     0,   266,     0,
     0,     0,   267,     0,   257,     0,     0,   268,   269,   487,
   258,   259,     0,     0,   260,     0,   257,     0,     0,     0,
   261,   491,   258,   259,     0,   262,   260,     0,     0,     0,
     0,     0,   261,     0,   263,   264,   265,   262,     0,     0,
   266,     0,     0,     0,   267,     0,   263,   264,   265,   268,
   269,     0,   266,     0,     0,     0,   267,     0,   257,     0,
     0,   268,   269,   497,   258,   259,     0,     0,   260,     0,
   257,     0,     0,     0,   261,   498,   258,   259,     0,   262,
   260,     0,     0,     0,     0,     0,   261,     0,   263,   264,
   265,   262,     0,     0,   266,     0,     0,     0,   267,     0,
   263,   264,   265,   268,   269,     0,   266,     0,     0,     0,
   267,     0,   257,     0,     0,   268,   269,   504,   258,   259,
     0,     0,   260,     0,   257,     0,     0,     0,   261,   507,
   258,   259,     0,   262,   260,     0,     0,     0,     0,     0,
   261,     0,   263,   264,   265,   262,     0,     0,   266,     0,
     0,     0,   267,     0,   263,   264,   265,   268,   269,     0,
   266,     0,     0,     0,   267,     0,   257,     0,   257,   268,
   269,   511,   258,   259,   258,   259,   260,     0,   260,     0,
     0,     0,   327,   512,   327,     0,   328,     0,   328,     0,
     0,   329,     0,   329,     0,     0,   263,     0,   263,     0,
     0,     0,     0,     0,     0,     0,   267,     0,   267,   257,
     0,   268,   269,   268,   269,   258,   259,     0,     0,   260,
     0,     0,     0,     0,     0,   330,   257,   510,     0,     0,
     0,     0,   258,   259,     0,     0,   260,     0,     0,   263,
   264,     0,     0,     0,     0,   266,     0,     0,     0,   267,
     0,     0,     0,   257,   268,   269,   263,   264,     0,   258,
   259,     0,   266,   260,     0,     0,   267,     0,   489,     0,
   257,   268,   269,     0,     0,     0,   258,   259,     0,     0,
   260,   257,     0,   263,   264,   501,     0,   258,   259,   266,
     0,   260,     0,   267,     0,     0,     0,     0,   268,   269,
   263,   264,     0,     0,     0,     0,   266,   257,     0,     0,
   267,   263,   566,   258,   259,   268,   269,   260,   257,     0,
     0,   267,     0,     0,   258,   259,   268,   269,   260,   573,
     0,     0,     0,     0,     0,   257,     0,   263,     0,     0,
   486,   258,   259,     0,   257,   260,     0,   267,   263,     0,
   258,   259,   268,   269,   260,     0,     0,     0,   267,     0,
     0,   257,     0,   268,   269,   263,   488,   258,   259,     0,
     0,   260,   257,     0,   263,   267,     0,   500,   258,   259,
   268,   269,   260,     0,   267,     0,     0,     0,     0,   268,
   269,   263,     0,     0,   502,     0,     0,     0,   257,     0,
     0,   267,   263,   505,   258,   259,   268,   269,   260,   257,
     0,     0,   267,     0,     0,   258,   259,   268,   269,   260,
   509,     0,     0,     0,     0,     0,   257,     0,   263,     0,
     0,   567,   258,   259,     0,   257,   260,     0,   267,   263,
     0,   258,   259,   268,   269,   260,     0,     0,     0,   267,
     0,     0,     0,     0,   268,   269,   263,   568,     0,     0,
     0,     0,     0,     0,     0,   263,   267,     0,   569,     0,
     0,   268,   269,     0,     0,   267,     0,     0,     0,     0,
   268,   269,     0,     0,     0,   570,     0,     0,     0,     0,
     0,     0,     0,   437,   572,   438,   439,   440,   441,   442,
   443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
   453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
   463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
   473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
   576,     0,     0,     0,     0,     0,     0,     2,     3,     0,
     4,     0,     0,     5,     0,     0,     6,     7,     8,     9,
     0,     0,     0,     0,    10,     0,     0,    11,    12,     0,
     0,    13,    14,    15,     0,     0,     0,     0,    16,    17,
    18,     0,    19,     0,    20,    44,    45,     0,    46,    47,
    48,    49,     0,    50,    51,    52,     0,    53,     0,     0,
     0,    54,    55,    56,    57,    58,    59,    60,     0,    61,
    62,    63,     0,    64,     0,     0,    65,    66,    67,     0,
    68,     0,    69,    70
};

static const short yycheck[] = {   217,
     2,     3,     4,     5,     6,     7,   206,    54,    55,    11,
    12,    13,    14,    15,    16,    17,    18,    19,   285,     5,
   287,   388,     3,     4,     5,     6,   295,   294,   395,   296,
     4,     5,   299,   252,     5,   253,   303,   256,    52,    53,
    54,    55,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,     5,
    10,    14,    53,     5,     5,    63,    57,    20,    59,    53,
    20,    62,    63,    57,   284,     2,     3,     4,     5,     6,
     7,    62,    63,   293,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    63,     9,   216,   257,     9,    47,    48,
    49,    63,     5,   264,   265,   266,    63,    22,    11,    12,
    22,    55,    15,    59,    62,    64,    62,    63,    21,    34,
    63,    59,    34,    26,    58,    69,   247,   248,    63,   250,
    63,   252,    35,    36,    37,   256,    57,   264,    41,   266,
   267,    63,    45,    46,    63,    63,    63,    50,    51,    64,
    63,    57,    64,    63,   315,    63,    59,   385,    63,   387,
    57,    64,    47,    48,    49,    63,   394,    63,   396,    63,
    63,   399,    63,   402,   551,   403,   404,    63,   407,    64,
    63,   558,    63,    63,   111,    63,   113,    63,   115,    63,
   117,    63,   119,    63,   121,    63,   123,    63,   125,    63,
   127,    63,   129,    63,   131,    63,    63,   134,    63,   136,
    63,   138,    63,   140,    63,   142,    63,   144,    63,   146,
    58,   148,    63,   150,    63,   152,    63,   154,    63,   156,
    63,   158,    63,   316,   161,    52,    53,    54,    55,   178,
   179,   180,    63,    60,    61,   257,   258,   259,   260,   261,
   262,   263,   264,   532,   266,   267,   533,   534,   535,   536,
   343,   344,   345,   384,    58,    63,    63,   546,   545,   208,
     6,   210,   393,     0,   213,   214,   397,     1,   260,   400,
   530,   402,    52,    53,    54,    55,   407,    52,    53,    54,
    55,    61,   531,   304,   259,    60,   263,   258,   310,    52,
    53,    54,    55,    52,    53,    54,    55,    60,   310,    58,
   307,     5,   300,   302,   297,   327,   328,    11,    12,   547,
    -1,    15,    -1,    -1,   552,   553,   554,   555,    -1,   557,
   257,   258,   259,   260,   261,   262,   263,   264,    -1,   266,
   267,    35,   425,   426,   427,   428,    -1,   286,     5,    43,
   289,    45,   291,   292,    11,    12,    50,    51,    15,   298,
    -1,    -1,   301,    -1,    21,    -1,   305,   306,    -1,    26,
    64,    -1,    -1,    -1,    -1,     5,    -1,    -1,    35,    36,
    37,    11,    12,   310,    41,    15,    -1,    -1,    45,    46,
    -1,    -1,    -1,    50,    51,    -1,    52,    53,    54,    55,
   327,   328,    59,    -1,    60,    35,    -1,    64,    -1,   492,
   493,   494,    -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,
    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   514,   515,   516,    64,    -1,   519,    -1,    -1,    -1,
    -1,    -1,   525,    -1,     5,    -1,     7,    -1,    -1,    10,
    11,    12,    13,    -1,    15,    16,    17,    -1,    19,    -1,
    21,    -1,    -1,    24,    -1,    26,    27,    28,    -1,    -1,
    31,    32,    33,   556,    35,    36,    37,    -1,    39,    40,
    41,    42,    -1,    44,    45,    -1,     5,    -1,     7,    50,
    51,    10,    11,    12,    13,    -1,    15,    16,    17,    -1,
    19,    -1,    21,    64,    -1,    24,    -1,    26,    27,    28,
    -1,    -1,    31,    32,    33,    -1,    35,    36,    37,    -1,
    39,    40,    41,    42,    -1,    44,    45,    -1,     5,    -1,
     7,    50,    51,    10,    11,    12,    13,    -1,    15,    16,
    17,    -1,    19,    -1,    21,    64,    -1,    24,    -1,    26,
    27,    28,    -1,    -1,    31,    32,    33,    -1,    35,    36,
    37,    -1,    39,    40,    41,    42,    -1,    44,    45,    -1,
     5,    -1,     7,    50,    51,    10,    11,    12,    13,    -1,
    15,    16,    17,    -1,    19,    -1,    21,    64,    -1,    24,
    -1,    26,    27,    28,    -1,    -1,    31,    32,    33,    -1,
    35,    36,    37,    -1,    39,    40,    41,    42,    -1,    44,
    45,     5,    -1,    -1,    -1,    50,    51,    11,    12,    -1,
    -1,    15,    -1,    -1,    -1,    -1,    -1,    21,     5,    64,
    -1,    -1,    26,    -1,    11,    12,    -1,    -1,    15,    -1,
    -1,    35,    36,    37,    21,    -1,    -1,    41,    -1,    26,
    -1,    45,    46,    -1,    -1,    -1,    50,    51,    35,    36,
    37,    -1,    -1,    -1,    41,    59,    -1,    -1,    45,    46,
    64,    -1,    -1,    50,    51,    -1,    -1,    -1,     5,    -1,
    -1,    -1,    59,    -1,    11,    12,    -1,    64,    15,    -1,
     5,    -1,    -1,    -1,    21,    -1,    11,    12,    -1,    26,
    15,    -1,    -1,    -1,    -1,    -1,    21,    -1,    35,    36,
    37,    26,    -1,    -1,    41,    -1,    -1,    -1,    45,    46,
    35,    36,    37,    50,    51,    -1,    41,    -1,    -1,    -1,
    45,    46,    59,    -1,    -1,    50,    51,    64,    -1,    -1,
     5,    -1,    -1,    -1,    59,    -1,    11,    12,    -1,    64,
    15,    -1,     5,    -1,    -1,    -1,    21,    -1,    11,    12,
    -1,    26,    15,    -1,    -1,    -1,    -1,    -1,    21,    -1,
    35,    36,    37,    26,    -1,    -1,    41,    42,    -1,    -1,
    45,    -1,    35,    36,    37,    50,    51,    -1,    41,    42,
    -1,    -1,    45,    -1,     5,    -1,    -1,    50,    51,    64,
    11,    12,    -1,    -1,    15,    -1,     5,    -1,    -1,    -1,
    21,    64,    11,    12,    -1,    26,    15,    -1,    -1,    -1,
    -1,    -1,    21,    -1,    35,    36,    37,    26,    -1,    -1,
    41,    -1,    -1,    -1,    45,    -1,    35,    36,    37,    50,
    51,    -1,    41,    -1,    -1,    -1,    45,    -1,     5,    -1,
    -1,    50,    51,    64,    11,    12,    -1,    -1,    15,    -1,
     5,    -1,    -1,    -1,    21,    64,    11,    12,    -1,    26,
    15,    -1,    -1,    -1,    -1,    -1,    21,    -1,    35,    36,
    37,    26,    -1,    -1,    41,    -1,    -1,    -1,    45,    -1,
    35,    36,    37,    50,    51,    -1,    41,    -1,    -1,    -1,
    45,    -1,     5,    -1,    -1,    50,    51,    64,    11,    12,
    -1,    -1,    15,    -1,     5,    -1,    -1,    -1,    21,    64,
    11,    12,    -1,    26,    15,    -1,    -1,    -1,    -1,    -1,
    21,    -1,    35,    36,    37,    26,    -1,    -1,    41,    -1,
    -1,    -1,    45,    -1,    35,    36,    37,    50,    51,    -1,
    41,    -1,    -1,    -1,    45,    -1,     5,    -1,    -1,    50,
    51,    64,    11,    12,    -1,    -1,    15,    -1,     5,    -1,
    -1,    -1,    21,    64,    11,    12,    -1,    26,    15,    -1,
    -1,    -1,    -1,    -1,    21,    -1,    35,    36,    37,    26,
    -1,    -1,    41,    -1,    -1,    -1,    45,    -1,    35,    36,
    37,    50,    51,    -1,    41,    -1,    -1,    -1,    45,    -1,
     5,    -1,    -1,    50,    51,    64,    11,    12,    -1,    -1,
    15,    -1,     5,    -1,    -1,    -1,    21,    64,    11,    12,
    -1,    26,    15,    -1,    -1,    -1,    -1,    -1,    21,    -1,
    35,    36,    37,    26,    -1,    -1,    41,    -1,    -1,    -1,
    45,    -1,    35,    36,    37,    50,    51,    -1,    41,    -1,
    -1,    -1,    45,    -1,     5,    -1,    -1,    50,    51,    64,
    11,    12,    -1,    -1,    15,    -1,     5,    -1,    -1,    -1,
    21,    64,    11,    12,    -1,    26,    15,    -1,    -1,    -1,
    -1,    -1,    21,    -1,    35,    36,    37,    26,    -1,    -1,
    41,    -1,    -1,    -1,    45,    -1,    35,    36,    37,    50,
    51,    -1,    41,    -1,    -1,    -1,    45,    -1,     5,    -1,
    -1,    50,    51,    64,    11,    12,    -1,    -1,    15,    -1,
     5,    -1,    -1,    -1,    21,    64,    11,    12,    -1,    26,
    15,    -1,    -1,    -1,    -1,    -1,    21,    -1,    35,    36,
    37,    26,    -1,    -1,    41,    -1,    -1,    -1,    45,    -1,
    35,    36,    37,    50,    51,    -1,    41,    -1,    -1,    -1,
    45,    -1,     5,    -1,    -1,    50,    51,    64,    11,    12,
    -1,    -1,    15,    -1,     5,    -1,    -1,    -1,    21,    64,
    11,    12,    -1,    26,    15,    -1,    -1,    -1,    -1,    -1,
    21,    -1,    35,    36,    37,    26,    -1,    -1,    41,    -1,
    -1,    -1,    45,    -1,    35,    36,    37,    50,    51,    -1,
    41,    -1,    -1,    -1,    45,    -1,     5,    -1,     5,    50,
    51,    64,    11,    12,    11,    12,    15,    -1,    15,    -1,
    -1,    -1,    21,    64,    21,    -1,    25,    -1,    25,    -1,
    -1,    30,    -1,    30,    -1,    -1,    35,    -1,    35,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,    45,     5,
    -1,    50,    51,    50,    51,    11,    12,    -1,    -1,    15,
    -1,    -1,    -1,    -1,    -1,    64,     5,    64,    -1,    -1,
    -1,    -1,    11,    12,    -1,    -1,    15,    -1,    -1,    35,
    36,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    45,
    -1,    -1,    -1,     5,    50,    51,    35,    36,    -1,    11,
    12,    -1,    41,    15,    -1,    -1,    45,    -1,    64,    -1,
     5,    50,    51,    -1,    -1,    -1,    11,    12,    -1,    -1,
    15,     5,    -1,    35,    36,    64,    -1,    11,    12,    41,
    -1,    15,    -1,    45,    -1,    -1,    -1,    -1,    50,    51,
    35,    36,    -1,    -1,    -1,    -1,    41,     5,    -1,    -1,
    45,    35,    64,    11,    12,    50,    51,    15,     5,    -1,
    -1,    45,    -1,    -1,    11,    12,    50,    51,    15,    64,
    -1,    -1,    -1,    -1,    -1,     5,    -1,    35,    -1,    -1,
    64,    11,    12,    -1,     5,    15,    -1,    45,    35,    -1,
    11,    12,    50,    51,    15,    -1,    -1,    -1,    45,    -1,
    -1,     5,    -1,    50,    51,    35,    64,    11,    12,    -1,
    -1,    15,     5,    -1,    35,    45,    -1,    64,    11,    12,
    50,    51,    15,    -1,    45,    -1,    -1,    -1,    -1,    50,
    51,    35,    -1,    -1,    64,    -1,    -1,    -1,     5,    -1,
    -1,    45,    35,    64,    11,    12,    50,    51,    15,     5,
    -1,    -1,    45,    -1,    -1,    11,    12,    50,    51,    15,
    64,    -1,    -1,    -1,    -1,    -1,     5,    -1,    35,    -1,
    -1,    64,    11,    12,    -1,     5,    15,    -1,    45,    35,
    -1,    11,    12,    50,    51,    15,    -1,    -1,    -1,    45,
    -1,    -1,    -1,    -1,    50,    51,    35,    64,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    35,    45,    -1,    64,    -1,
    -1,    50,    51,    -1,    -1,    45,    -1,    -1,    -1,    -1,
    50,    51,    -1,    -1,    -1,    64,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     5,    64,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
     0,    -1,    -1,    -1,    -1,    -1,    -1,     7,     8,    -1,
    10,    -1,    -1,    13,    -1,    -1,    16,    17,    18,    19,
    -1,    -1,    -1,    -1,    24,    -1,    -1,    27,    28,    -1,
    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,    39,
    40,    -1,    42,    -1,    44,     7,     8,    -1,    10,    11,
    12,    13,    -1,    15,    16,    17,    -1,    19,    -1,    -1,
    -1,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
    32,    33,    -1,    35,    -1,    -1,    38,    39,    40,    -1,
    42,    -1,    44,    45
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.27.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 216 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 231 "parser.y"
{;
    break;}
case 5:
#line 233 "parser.y"
{
                            SCENE->atmosphere()->addObject (yyvsp[0].ptAtmObject);
                          ;
    break;}
case 6:
#line 237 "parser.y"
{
                            _ptWorld->add (yyvsp[0].ptObject);
                          ;
    break;}
case 7:
#line 243 "parser.y"
{;
    break;}
case 8:
#line 245 "parser.y"
{;
    break;}
case 9:
#line 247 "parser.y"
{;
    break;}
case 10:
#line 249 "parser.y"
{;
    break;}
case 11:
#line 251 "parser.y"
{;
    break;}
case 12:
#line 253 "parser.y"
{;
    break;}
case 13:
#line 255 "parser.y"
{;
    break;}
case 14:
#line 257 "parser.y"
{;
    break;}
case 15:
#line 259 "parser.y"
{;
    break;}
case 16:
#line 261 "parser.y"
{;
    break;}
case 17:
#line 263 "parser.y"
{;
    break;}
case 18:
#line 265 "parser.y"
{;
    break;}
case 19:
#line 267 "parser.y"
{;
    break;}
case 20:
#line 269 "parser.y"
{;
    break;}
case 21:
#line 271 "parser.y"
{;
    break;}
case 22:
#line 273 "parser.y"
{;
    break;}
case 23:
#line 275 "parser.y"
{;
    break;}
case 24:
#line 277 "parser.y"
{;
    break;}
case 25:
#line 279 "parser.y"
{;
    break;}
case 26:
#line 281 "parser.y"
{;
    break;}
case 27:
#line 283 "parser.y"
{;
    break;}
case 28:
#line 285 "parser.y"
{;
    break;}
case 29:
#line 287 "parser.y"
{;
    break;}
case 30:
#line 289 "parser.y"
{;
    break;}
case 31:
#line 291 "parser.y"
{;
    break;}
case 32:
#line 293 "parser.y"
{;
    break;}
case 33:
#line 295 "parser.y"
{;
    break;}
case 34:
#line 299 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 35:
#line 303 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 36:
#line 307 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
			  ;
    break;}
case 37:
#line 311 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 38:
#line 315 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 39:
#line 319 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 40:
#line 323 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 41:
#line 327 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 42:
#line 331 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 43:
#line 335 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 44:
#line 339 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 45:
#line 343 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 46:
#line 347 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 47:
#line 351 "parser.y"
{
                            ((TCsg*) yyvsp[0].ptObject)->setOperation (FX_CSG_UNION);
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 48:
#line 356 "parser.y"
{
                            ((TCsg*) yyvsp[0].ptObject)->setOperation (FX_CSG_INTERSECTION);
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 49:
#line 361 "parser.y"
{
                            ((TCsg*) yyvsp[0].ptObject)->setOperation (FX_CSG_DIFFERENCE);
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 50:
#line 368 "parser.y"
{
			    yyval.dValue = yyvsp[0].dValue;
			  ;
    break;}
case 51:
#line 372 "parser.y"
{
                            if ( _tFunctionMap.find (yyvsp[-2].acIdent) == _tFunctionMap.end() )
                            {
			      yyerror ("function does not exist");
			      exit (1);
                            }
			    _pfFunction = _tFunctionMap [yyvsp[-2].acIdent];
			    yyval.dValue = (*_pfFunction)();
			  ;
    break;}
case 52:
#line 382 "parser.y"
{
			    yyval.dValue = yyvsp[-2].dValue + yyvsp[0].dValue;
			  ;
    break;}
case 53:
#line 386 "parser.y"
{
			    yyval.dValue = yyvsp[-2].dValue - yyvsp[0].dValue;
			  ;
    break;}
case 54:
#line 390 "parser.y"
{
			    yyval.dValue = yyvsp[-2].dValue * yyvsp[0].dValue;
			  ;
    break;}
case 55:
#line 394 "parser.y"
{
			    yyval.dValue = yyvsp[-2].dValue / yyvsp[0].dValue;
			  ;
    break;}
case 56:
#line 398 "parser.y"
{
			    yyval.dValue = -yyvsp[0].dValue;
			  ;
    break;}
case 57:
#line 402 "parser.y"
{
			    yyval.dValue = yyvsp[-1].dValue;
			  ;
    break;}
case 58:
#line 408 "parser.y"
{
			    _tVector.set (yyvsp[-5].dValue, yyvsp[-3].dValue, yyvsp[-1].dValue);
			    yyval.ptVector = &_tVector;
			  ;
    break;}
case 59:
#line 415 "parser.y"
{
			    _tVector2.set (yyvsp[-3].dValue, yyvsp[-1].dValue);
			    yyval.ptVector2 = &_tVector2;
			  ;
    break;}
case 60:
#line 422 "parser.y"
{
			    yyval.ptVector = yyvsp[0].ptVector;
			  ;
    break;}
case 61:
#line 426 "parser.y"
{
			    yyval.ptVector = yyvsp[0].ptVector;
			  ;
    break;}
case 62:
#line 432 "parser.y"
{
			    strcpy (yyval.acIdent, "");
			  ;
    break;}
case 63:
#line 436 "parser.y"
{
			    strcpy (yyval.acIdent, yyvsp[0].acIdent);
			  ;
    break;}
case 64:
#line 442 "parser.y"
{
			    strcpy (yyval.acIdent, "");
			  ;
    break;}
case 65:
#line 446 "parser.y"
{
                            if ( _tObjectMap.find (yyvsp[0].acIdent) == _tObjectMap.end() )
                            {
			      yyerror ("trying to extend from non existing object");
			      exit (1);
                            }
                            _ptParent = _tObjectMap [yyvsp[0].acIdent];
			    strcpy (yyval.acIdent, _ptParent->className().c_str());
			  ;
    break;}
case 66:
#line 456 "parser.y"
{
			    _ptParent = NULL;
			    strcpy (yyval.acIdent, yyvsp[0].acIdent);
			  ;
    break;}
case 69:
#line 467 "parser.y"
{
                          /* Print out an attribute list [names w/types] for
                             the current object */ 
                             TAttributeList tal;
                             DATA->getAttributeList(tal);
        
                          cout << "Requested attribute list for \""
                               << DATA->className() << "\"" << endl;
        
                          for(TAttributeList::const_iterator i = tal.begin();
                              i != tal.end();
                              ++i)
                          {
                            cout << "  ("
                                 << EAttribType_to_str(i->second)
                                 << ") "
                                 << i->first << endl;
                          }
                        ;
    break;}
case 70:
#line 487 "parser.y"
{
                          /* Print out the type of the given attribute */
                          TAttributeList tal;
                          DATA->getAttributeList(tal);
        
                          TAttributeList::const_iterator loc;
                          loc = tal.find(string(yyvsp[-1].acIdent)); 
         
                          cout << "Requested attribute type for \"" << yyvsp[-1].acIdent
                               << "\" in \"" << DATA->className() << "\": ";
        
                          if( loc != tal.end() )
                          {
                            cout << EAttribType_to_str(loc->second) << endl;
                          }
                          else
                          {
                            cout << "no such attribute" << endl;
                          }
                        ;
    break;}
case 71:
#line 508 "parser.y"
{
                          _nAttrib.pvValue = yyvsp[0].ptVector;
                          SetParameter (yyvsp[-1].acIdent, FX_VECTOR);
                        ;
    break;}
case 72:
#line 513 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptVector2;
			    SetParameter (yyvsp[-1].acIdent, FX_VECTOR2);
			  ;
    break;}
case 73:
#line 518 "parser.y"
{
			    _nAttrib.dValue = yyvsp[0].dValue;
			    SetParameter (yyvsp[-1].acIdent, FX_REAL);
			  ;
    break;}
case 74:
#line 523 "parser.y"
{
			    _nAttrib.gValue = yyvsp[0].gValue;
			    SetParameter (yyvsp[-1].acIdent, FX_BOOL);
			  ;
    break;}
case 75:
#line 528 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].acIdent;
			    SetParameter (yyvsp[-1].acIdent, FX_STRING);
			  ;
    break;}
case 76:
#line 533 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptColor;
			    SetParameter (yyvsp[-1].acIdent, FX_COLOR);
			  ;
    break;}
case 77:
#line 538 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptColor;
			    SetParameter ("color", FX_COLOR);
			  ;
    break;}
case 78:
#line 543 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptVector;
			    SetParameter ("vector", FX_VECTOR);
			  ;
    break;}
case 79:
#line 548 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptVector;
			    SetParameter (yyvsp[-1].acIdent, FX_VECTOR);
			  ;
    break;}
case 80:
#line 553 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptCamera;
			    SetParameter (yyvsp[-1].acIdent, FX_CAMERA);
			  ;
    break;}
case 81:
#line 558 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptCamera;
			    SetParameter ("camera", FX_CAMERA);
			  ;
    break;}
case 82:
#line 563 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptRenderer;
			    SetParameter (yyvsp[-1].acIdent, FX_RENDERER);
			  ;
    break;}
case 83:
#line 568 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptRenderer;
			    SetParameter ("renderer", FX_RENDERER);
			  ;
    break;}
case 84:
#line 573 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptBsdf;
			    SetParameter (yyvsp[-1].acIdent, FX_BSDF);
			  ;
    break;}
case 85:
#line 578 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptBsdf;
			    SetParameter ("bsdf", FX_BSDF);
			  ;
    break;}
case 88:
#line 589 "parser.y"
{
			    ENTITY->translate (*yyvsp[0].ptVector);
			  ;
    break;}
case 89:
#line 593 "parser.y"
{
			    ENTITY->rotate (*yyvsp[0].ptVector);
			  ;
    break;}
case 90:
#line 597 "parser.y"
{
			    ENTITY->translate (*yyvsp[0].ptVector);
			  ;
    break;}
case 91:
#line 601 "parser.y"
{
			    ENTITY->rotate (*yyvsp[0].ptVector);
			  ;
    break;}
case 93:
#line 608 "parser.y"
{
			    VOLUME->scale (*yyvsp[0].ptVector, TVector (0, 0, 0));
			  ;
    break;}
case 97:
#line 619 "parser.y"
{
			    OBJECT->setMaterial (yyvsp[0].ptMaterial);
			  ;
    break;}
case 98:
#line 623 "parser.y"
{
			    OBJECT->addFilter (yyvsp[0].ptOFilter);
			  ;
    break;}
case 100:
#line 630 "parser.y"
{
                            if ( yyvsp[-1].acIdent == "" )
                            {
                              yyerror ("cannot define unnamed color");
                              exit (1);
                            }

                            if ( _tColorMap.find (yyvsp[-1].acIdent) != _tColorMap.end() )
                            {
                              yyerror ("cannot redefine an existing color");
                              exit (1);
                            }

                            _tColor = TColor::_black();

                            _ptParent = NULL;
			  ;
    break;}
case 101:
#line 648 "parser.y"
{
                            _tColorMap [yyvsp[-5].acIdent] = _tColor;
                            
                            yyval.ptColor = &_tColor;
			  ;
    break;}
case 102:
#line 656 "parser.y"
{
                            if ( yyvsp[0].acIdent == "" )
                            {
                              yyerror ("instanced object cannot be unnamed");
                              exit (1);
                            }

                            if ( _tColorMap.find (yyvsp[0].acIdent) == _tObjectMap.end() )
                            {
                              yyerror ("color does not exist");
                              exit (1);
                            }

                            yyval.ptColor = (TColor*) &(_tColorMap [yyvsp[0].acIdent]);
			  ;
    break;}
case 103:
#line 672 "parser.y"
{
                            _tColor = TColor::_black();
			  ;
    break;}
case 104:
#line 676 "parser.y"
{
			    yyval.ptColor = (TColor*) &_tColor;
			  ;
    break;}
case 107:
#line 686 "parser.y"
{
			    _tColor.setRed (yyvsp[0].dValue);
			  ;
    break;}
case 108:
#line 690 "parser.y"
{
			    _tColor.setGreen (yyvsp[0].dValue);
			  ;
    break;}
case 109:
#line 694 "parser.y"
{
			    _tColor.setBlue (yyvsp[0].dValue);
			  ;
    break;}
case 110:
#line 700 "parser.y"
{
                            if ( yyvsp[-1].acIdent == "" )
                            {
                              yyerror ("cannot define unnamed vector");
                              exit (1);
                            }

                            if ( _tVectorMap.find (yyvsp[-1].acIdent) != _tVectorMap.end() )
                            {
                              yyerror ("cannot redefine an existing vector");
                              exit (1);
                            }

                            _tVector = TVector (0, 0, 0);

                            _ptParent = NULL;
			  ;
    break;}
case 111:
#line 718 "parser.y"
{
                            _tVectorMap [yyvsp[-5].acIdent] = _tVector;
                            
                            yyval.ptVector = &_tVector;
			  ;
    break;}
case 112:
#line 726 "parser.y"
{
                            if ( yyvsp[0].acIdent == "" )
                            {
                              yyerror ("instanced object cannot be unnamed");
                              exit (1);
                            }

                            if ( _tVectorMap.find (yyvsp[0].acIdent) == _tVectorMap.end() )
                            {
                              yyerror ("vector does not exist");
                              exit (1);
                            }

                            yyval.ptVector = (TVector*) &(_tVectorMap [yyvsp[0].acIdent]);
			  ;
    break;}
case 113:
#line 742 "parser.y"
{
                            _tVector = TVector (0, 0, 0);
			  ;
    break;}
case 114:
#line 746 "parser.y"
{
			    yyval.ptVector = (TVector*) &_tVector;
			  ;
    break;}
case 117:
#line 756 "parser.y"
{
			    _tVector.setX (yyvsp[0].dValue);
			  ;
    break;}
case 118:
#line 760 "parser.y"
{
			    _tVector.setY (yyvsp[0].dValue);
			  ;
    break;}
case 119:
#line 764 "parser.y"
{
			    _tVector.setZ (yyvsp[0].dValue);
			  ;
    break;}
case 120:
#line 770 "parser.y"
{
                            _tDataStack.push (TImageManager::_getImageIO ("tga"));
                          ;
    break;}
case 121:
#line 774 "parser.y"
{
			    yyval.ptImageIO = (TImageIO*) _tDataStack.POP();
			  ;
    break;}
case 124:
#line 784 "parser.y"
{
                            _ptImageIO = (TImageIO*) _tDataStack.POP();
                            delete _ptImageIO;
                            
                            _ptImageIO = TImageManager::_getImageIO (yyvsp[0].acIdent);
                            if ( !_ptImageIO )
                            {
                              yyerror ("Image output type not available");
                              exit (1);
                            }
                            _tDataStack.push (_ptImageIO);
			  ;
    break;}
case 126:
#line 800 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Scene");
			  ;
    break;}
case 127:
#line 804 "parser.y"
{
			    yyval.ptScene = (TScene*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 128:
#line 810 "parser.y"
{
			    yyval.ptScene = (TScene*) InstanceObject (yyvsp[0].acIdent);
			    TSceneRT::_ptParsedScene = yyval.ptScene;
			  ;
    break;}
case 129:
#line 815 "parser.y"
{
//			    CreateObject ($1, "Scene");
			    _ptData = TSceneRT::_ptParsedScene;
			    _tDataStack.push (_ptData);
			  ;
    break;}
case 130:
#line 821 "parser.y"
{
			    yyval.ptScene = (TScene*) _tDataStack.POP();
//			    $$ = &tScene;
			  ;
    break;}
case 133:
#line 832 "parser.y"
{
			    SCENE->addLight (yyvsp[0].ptLight);
			  ;
    break;}
case 134:
#line 836 "parser.y"
{
			    SCENE->addImageFilter (yyvsp[0].ptIFilter);
			  ;
    break;}
case 135:
#line 840 "parser.y"
{
			    SCENE->setImageOutput (yyvsp[0].ptImageIO);
			  ;
    break;}
case 137:
#line 847 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "PinholeCamera");
			  ;
    break;}
case 138:
#line 851 "parser.y"
{
			    yyval.ptCamera = (TCamera*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 139:
#line 857 "parser.y"
{
			    yyval.ptCamera = (TCamera*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 140:
#line 861 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "PinholeCamera");
			  ;
    break;}
case 141:
#line 865 "parser.y"
{
			    yyval.ptCamera = (TCamera*) _tDataStack.POP();
			  ;
    break;}
case 142:
#line 871 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "PointLight");
			  ;
    break;}
case 143:
#line 875 "parser.y"
{
			    yyval.ptLight = (TLight*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 144:
#line 881 "parser.y"
{
			    yyval.ptLight = (TLight*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 145:
#line 885 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "PointLight");
			  ;
    break;}
case 146:
#line 889 "parser.y"
{
			    yyval.ptLight = (TLight*) _tDataStack.POP();
			  ;
    break;}
case 147:
#line 895 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "BsdfPhong");
			  ;
    break;}
case 148:
#line 899 "parser.y"
{
			    yyval.ptBsdf = (TBsdf*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 149:
#line 905 "parser.y"
{
			    yyval.ptBsdf = (TBsdf*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 150:
#line 909 "parser.y"
{
                            CreateObject (yyvsp[0].acIdent, "BsdfPhong");
			  ;
    break;}
case 151:
#line 913 "parser.y"
{
                            yyval.ptBsdf = (TBsdf*) _tDataStack.POP();
			  ;
    break;}
case 152:
#line 919 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Raytracer");
			  ;
    break;}
case 153:
#line 923 "parser.y"
{
			    yyval.ptRenderer = (TRenderer*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 154:
#line 929 "parser.y"
{
			    yyval.ptRenderer = (TRenderer*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 155:
#line 933 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Raytracer");
			  ;
    break;}
case 156:
#line 937 "parser.y"
{
			    yyval.ptRenderer = (TRenderer*) _tDataStack.POP();
			  ;
    break;}
case 157:
#line 943 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Material");
			  ;
    break;}
case 158:
#line 947 "parser.y"
{
                            yyval.ptMaterial = (TMaterial*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 159:
#line 953 "parser.y"
{
			    yyval.ptMaterial = (TMaterial*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 160:
#line 957 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Material");
			  ;
    break;}
case 161:
#line 961 "parser.y"
{
			    yyval.ptMaterial = (TMaterial*) _tDataStack.POP();

			  ;
    break;}
case 162:
#line 968 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "");
			  ;
    break;}
case 163:
#line 972 "parser.y"
{
			    yyval.ptIFilter = (TImageFilter*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 164:
#line 978 "parser.y"
{
			    yyval.ptIFilter = (TImageFilter*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 165:
#line 982 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "");
			  ;
    break;}
case 166:
#line 986 "parser.y"
{
			    yyval.ptIFilter = (TImageFilter*) _tDataStack.POP();
			  ;
    break;}
case 167:
#line 992 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "");
			  ;
    break;}
case 168:
#line 996 "parser.y"
{
			    yyval.ptOFilter = (TObjectFilter*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 169:
#line 1002 "parser.y"
{
			    yyval.ptOFilter = (TObjectFilter*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 170:
#line 1006 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "");
			  ;
    break;}
case 171:
#line 1010 "parser.y"
{
			    yyval.ptOFilter = (TObjectFilter*) _tDataStack.POP();
			  ;
    break;}
case 172:
#line 1016 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "");
			  ;
    break;}
case 173:
#line 1020 "parser.y"
{
			    yyval.ptObject = (TObject*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 174:
#line 1026 "parser.y"
{
			    yyval.ptObject = (TObject*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 175:
#line 1030 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "");
			  ;
    break;}
case 176:
#line 1034 "parser.y"
{
			    yyval.ptObject = (TObject*) _tDataStack.POP();
			  ;
    break;}
case 177:
#line 1040 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Plane");
			  ;
    break;}
case 178:
#line 1044 "parser.y"
{
			    yyval.ptObject = (TPlane*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 179:
#line 1050 "parser.y"
{
			    yyval.ptObject = (TPlane*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 180:
#line 1054 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Plane");
			  ;
    break;}
case 181:
#line 1058 "parser.y"
{
			    yyval.ptObject = (TPlane*) _tDataStack.POP();
			  ;
    break;}
case 182:
#line 1064 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Sphere");
			  ;
    break;}
case 183:
#line 1068 "parser.y"
{
			    yyval.ptObject = (TSphere*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 184:
#line 1074 "parser.y"
{
			    yyval.ptObject = (TSphere*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 185:
#line 1078 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Sphere");
			  ;
    break;}
case 186:
#line 1082 "parser.y"
{
			    yyval.ptObject = (TSphere*) _tDataStack.POP();
			  ;
    break;}
case 187:
#line 1088 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Triangle");
			    _bVertices = 0;
			  ;
    break;}
case 188:
#line 1093 "parser.y"
{
			    if ( _bVertices != 3 )
			    {
			      yyerror ("wrong number of vertices in triangle");
			      exit (1);
			    }
			    yyval.ptObject = (TTriangle*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 189:
#line 1104 "parser.y"
{
			    yyval.ptObject = (TTriangle*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 190:
#line 1108 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Triangle");
			    _bVertices = 0;
			  ;
    break;}
case 191:
#line 1113 "parser.y"
{
			    if ( _bVertices != 3 )
			    {
			      yyerror ("wrong number of vertices in triangle");
			      exit (1);
			    }
			    yyval.ptObject = (TTriangle*) _tDataStack.POP();
			  ;
    break;}
case 194:
#line 1128 "parser.y"
{
			    TRIANGLE->setVertex (*yyvsp[0].ptVector);
			    _bVertices++;
			  ;
    break;}
case 196:
#line 1136 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "PhongTriangle");
			    _bVertices = 0;
			  ;
    break;}
case 197:
#line 1141 "parser.y"
{
			    if ( _bVertices != 3 )
			    {
			      yyerror ("wrong number of vertices in phong_triangle");
			      exit (1);
			    }
			    yyval.ptObject = (TPhongTriangle*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 198:
#line 1152 "parser.y"
{
			    yyval.ptObject = (TPhongTriangle*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 199:
#line 1156 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "PhongTriangle");
			    _bVertices = 0;
			  ;
    break;}
case 200:
#line 1161 "parser.y"
{
			    if ( _bVertices != 3 )
			    {
			      yyerror ("wrong number of vertices in phong_triangle");
			      exit (1);
			    }
			    yyval.ptObject = (TPhongTriangle*) _tDataStack.POP();
			  ;
    break;}
case 203:
#line 1176 "parser.y"
{
			    TRIANGLE->setVertex (*yyvsp[0].ptVector);
			    _bVertices++;
			  ;
    break;}
case 205:
#line 1184 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Rectangle");
			    _bVertices = 0;
			  ;
    break;}
case 206:
#line 1189 "parser.y"
{
			    if ( _bVertices != 4 )
			    {
			      yyerror ("wrong number of vertices in rectangle");
			      exit (1);
			    }
			    yyval.ptObject = (TRectangle*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 207:
#line 1200 "parser.y"
{
			    yyval.ptObject = (TRectangle*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 208:
#line 1204 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Rectangle");
			    _bVertices = 0;
			  ;
    break;}
case 209:
#line 1209 "parser.y"
{
			    if ( _bVertices != 4 )
			    {
			      yyerror ("wrong number of vertices in rectangle");
			      exit (1);
			    }
			    yyval.ptObject = (TRectangle*) _tDataStack.POP();
			  ;
    break;}
case 212:
#line 1224 "parser.y"
{
			    RECTANGLE->setVertex (*yyvsp[0].ptVector);
			    _bVertices++;
			  ;
    break;}
case 214:
#line 1232 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Circle");
			  ;
    break;}
case 215:
#line 1236 "parser.y"
{
			    yyval.ptObject = (TCircle*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 216:
#line 1242 "parser.y"
{
			    yyval.ptObject = (TCircle*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 217:
#line 1246 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Circle");
			  ;
    break;}
case 218:
#line 1250 "parser.y"
{
			    yyval.ptObject = (TCircle*) _tDataStack.POP();
			  ;
    break;}
case 221:
#line 1260 "parser.y"
{
			    AGGREGATE->add (yyvsp[0].ptObject);
			  ;
    break;}
case 223:
#line 1267 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Aggregate");
			  ;
    break;}
case 224:
#line 1271 "parser.y"
{
			    yyval.ptObject = (TAggregate*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 225:
#line 1277 "parser.y"
{
			    yyval.ptObject = (TAggregate*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 226:
#line 1281 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Aggregate");
			  ;
    break;}
case 227:
#line 1285 "parser.y"
{
			    yyval.ptObject = (TAggregate*) _tDataStack.POP();
			  ;
    break;}
case 228:
#line 1291 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "AtmConst");
			  ;
    break;}
case 229:
#line 1295 "parser.y"
{
			    yyval.ptAtmObject = (TAtmosphericObject*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 230:
#line 1301 "parser.y"
{
			    yyval.ptAtmObject = (TAtmosphericObject*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 231:
#line 1305 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "AtmConst");
			  ;
    break;}
case 232:
#line 1309 "parser.y"
{
			    yyval.ptAtmObject = (TAtmosphericObject*) _tDataStack.POP();
			  ;
    break;}
case 233:
#line 1315 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Box");
			  ;
    break;}
case 234:
#line 1319 "parser.y"
{
			    yyval.ptObject = (TBox*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 235:
#line 1325 "parser.y"
{
			    yyval.ptObject = (TBox*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 236:
#line 1329 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Box");
			  ;
    break;}
case 237:
#line 1333 "parser.y"
{
			    yyval.ptObject = (TBox*) _tDataStack.POP();
			  ;
    break;}
case 238:
#line 1339 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Cylinder");
			  ;
    break;}
case 239:
#line 1343 "parser.y"
{
			    yyval.ptObject = (TCylinder*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 240:
#line 1349 "parser.y"
{
			    yyval.ptObject = (TCylinder*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 241:
#line 1353 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Cylinder");
			  ;
    break;}
case 242:
#line 1357 "parser.y"
{
			    yyval.ptObject = (TCylinder*) _tDataStack.POP();
			  ;
    break;}
case 243:
#line 1363 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Cone");
			  ;
    break;}
case 244:
#line 1367 "parser.y"
{
			    yyval.ptObject = (TCone*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 245:
#line 1373 "parser.y"
{
			    yyval.ptObject = (TCone*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 246:
#line 1377 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Cone");
			  ;
    break;}
case 247:
#line 1381 "parser.y"
{
			    yyval.ptObject = (TCone*) _tDataStack.POP();
	       		  ;
    break;}
case 248:
#line 1387 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Torus");
			  ;
    break;}
case 249:
#line 1391 "parser.y"
{
			    yyval.ptObject = (TTorus*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 250:
#line 1397 "parser.y"
{
			    yyval.ptObject = (TTorus*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 251:
#line 1401 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Torus");
			  ;
    break;}
case 252:
#line 1405 "parser.y"
{
			    yyval.ptObject = (TTorus*) _tDataStack.POP();
			  ;
    break;}
case 253:
#line 1411 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Mesh");
			  ;
    break;}
case 254:
#line 1415 "parser.y"
{
			    yyval.ptObject = (TMeshObject*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 255:
#line 1421 "parser.y"
{
			    yyval.ptObject = (TMeshObject*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 256:
#line 1425 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Mesh");
			  ;
    break;}
case 257:
#line 1429 "parser.y"
{
			    yyval.ptObject = (TMeshObject*) _tDataStack.POP();
			  ;
    break;}
case 260:
#line 1439 "parser.y"
{
			    MESH->addTriangle ((TTriangle*) yyvsp[0].ptObject);
                            delete yyvsp[0].ptObject;
			  ;
    break;}
case 262:
#line 1447 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Csg");
			  ;
    break;}
case 263:
#line 1451 "parser.y"
{
			    yyval.ptObject = (TCsg*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 264:
#line 1457 "parser.y"
{
			    yyval.ptObject = (TCsg*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 265:
#line 1461 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Csg");
			  ;
    break;}
case 266:
#line 1465 "parser.y"
{
			    yyval.ptObject = (TCsg*) _tDataStack.POP();
			  ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 542 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1524 "parser.y"


void rt_error (const char* pkcTEXT)
{

  cerr << endl << TSceneRT::_tInputFileName << "(" << TSceneRT::_dwLineNumber << ") Error: " << pkcTEXT << endl;

}  /* rt_error() */


void RT_InitParser (void)
{

  InitObjects();
  InitFunctions();

  _ptWorld = new TAggregate();
  
  TSceneRT::_ptParsedScene->setWorld (_ptWorld);
  
}  /* RT_InitParser() */


void RT_CloseParser (void)
{

  _tObjectMap.clear();

}  /* RT_CloseParser() */


void InitFunctions (void)
{

  _tFunctionMap ["rand"] = (double(*)(void)) &frand;

}  /* InitFunctions() */


void InitObjects (void)
{
}  /* InitObjects() */


TProcedural* NewObject (const string& rktCLASS, const TProcedural* pktPARENT)
{

  TProcedural*   ptChild;

//  cout << "New object : \"" << rktCLASS << "\"" << endl;

  ptChild = (TProcedural*) TClassManager::_newObject (rktCLASS, pktPARENT);
  if ( !ptChild )
  {
    string   tMessage = string ("class ") + rktCLASS + " does not exist";
    yyerror (tMessage.c_str());
    exit (1);
  }

  return ptChild;

}  /* NewObject() */


void* InstanceObject (const string& rktNAME)
{

  void*   pvObject;

  if ( rktNAME == "" )
  {
    yyerror ("instanced object cannot be unnamed");
    exit (1);
  }

  if ( _tObjectMap.find (rktNAME) == _tObjectMap.end() )
  {
    yyerror ("object does not exist");
    exit (1);
  }

  pvObject = _tObjectMap [rktNAME];

  return pvObject;

}  /* InstanceObject() */


void* UpdateObject (const string& rktNAME)
{

  TProcedural*   ptObject;

//  cout << "Updating object : \"" << rktNAME << "\"" << endl;

  ptObject = _tDataStack.POP();

  _tObjectMap [rktNAME] = ptObject;

  return ptObject;

}  /* UpdateObject() */


void DefineObject (const string& rktNAME, const string& rktCLASS, const string& rktDEF_CLASS)
{

//  cout << "Defining object : \"" << rktNAME << "\", \"" << rktCLASS << "\", \"" << rktDEF_CLASS << "\"" << endl;

  if ( rktNAME == "" )
  {
    yyerror ("defined object cannot be unnamed");
    exit (1);
  }

  if ( _tObjectMap.find (rktNAME) != _tObjectMap.end() )
  {
    yyerror ("cannot redefine an existing object");
    exit (1);
  }

  if ( rktCLASS == "" )
  {
    _ptData = NewObject (rktDEF_CLASS, _ptParent);
  }
  else
  {
    _ptData = NewObject (rktCLASS, _ptParent);
  }

  _tDataStack.push (_ptData);
  _ptParent = NULL;

}  /* DefineObject() */


void CreateObject (const string& rktCLASS, const string& rktDEF_CLASS)
{

//  cout << "Creating object : \"" << rktCLASS << "\", \"" << rktDEF_CLASS << "\"" << endl;
  
  if ( rktCLASS == "" )
  {
    _ptData = NewObject (rktDEF_CLASS, _ptParent);
  }
  else
  {
    _ptData = NewObject (rktCLASS, _ptParent);
  }

  _tDataStack.push (_ptData);
  _ptParent = NULL;

}  /* CreateObject() */


void SetParameter (const string& rktATTRIB, EAttribType eTYPE)
{

  int   iResult;

  iResult = DATA->setAttribute (rktATTRIB, _nAttrib, eTYPE);

  if ( iResult == FX_ATTRIB_WRONG_PARAM )
  {
    yyerror ("object does not have such attribute");
    exit (1);
  }
  else if ( iResult == FX_ATTRIB_WRONG_TYPE )
  {
    yyerror ("incorrect type in attribute value");
    exit (1);
  }
  else if ( iResult == FX_ATTRIB_WRONG_VALUE )
  {
    yyerror ("value not accepted for this attribute");
    exit (1);
  }
  else if ( iResult == FX_ATTRIB_USER_ERROR )
  {
    yyerror (TProcedural::_tUserErrorMessage.c_str());
    exit (1);
  }

}  /* SetParameter() */

static string EAttribType_to_str(EAttribType eat)
{
  /* This function is pretty dumb, but I (KH) couldn't find another one
     anywhere else.  Added on 07Aug2000  */ 
  switch( eat )
  {
  case FX_NONE: return "none";
  case FX_REAL: return "real";
  case FX_BOOL: return "bool";
  case FX_STRING: return "string";
  case FX_COLOR: return "color";
  case FX_VECTOR: return "vector";
  case FX_VECTOR2: return "2d_vector";
  case FX_IMAGE: return "image";
  case FX_BSDF: return "bsdf";
  case FX_CAMERA: return "camera";
  case FX_LIGHT: return "light";
  case FX_MATERIAL: return "material";
  case FX_RENDERER: return "renderer";
  case FX_OBJECT: return "object";
  case FX_OBJECT_FILTER: return "object_filter";
  case FX_IMAGE_FILTER: return "image_filter";
  default: return "unknown";
  }
} /* EAttribType_to_str */
