
/*  A Bison parser, made from parser.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse rt_parse
#define yylex rt_lex
#define yyerror rt_error
#define yylval rt_lval
#define yychar rt_char
#define yydebug rt_debug
#define yynerrs rt_nerrs
#define	T_BOOL	257
#define	T_REAL	258
#define	T_INTEGER	259
#define	T_IDENTIFIER	260
#define	T_QUOTED_STRING	261
#define	T_AGGREGATE	262
#define	T_ATM_OBJECT	263
#define	T_BLUE	264
#define	T_BOX	265
#define	T_BSDF	266
#define	T_CAMERA	267
#define	T_CIRCLE	268
#define	T_CLASS	269
#define	T_COLOR	270
#define	T_CONE	271
#define	T_CYLINDER	272
#define	T_DEFINE	273
#define	T_DIFFERENCE	274
#define	T_EXTENDS	275
#define	T_FILTER	276
#define	T_GREEN	277
#define	T_IMAGE_FILTER	278
#define	T_INTERSECTION	279
#define	T_LIGHT	280
#define	T_MATERIAL	281
#define	T_MESH	282
#define	T_OBJECT	283
#define	T_OBJECT_FILTER	284
#define	T_OUTPUT	285
#define	T_PATTERN	286
#define	T_PERTURBATION	287
#define	T_PHONG_TRIANGLE	288
#define	T_PLANE	289
#define	T_RECTANGLE	290
#define	T_RED	291
#define	T_RENDERER	292
#define	T_ROTATE	293
#define	T_SCALE	294
#define	T_SCENE	295
#define	T_SPHERE	296
#define	T_TORUS	297
#define	T_TRANSLATE	298
#define	T_TRIANGLE	299
#define	T_TYPE	300
#define	T_UNION	301
#define	T_VECTOR	302
#define	T_VERTEX	303
#define	T_X	304
#define	T_Y	305
#define	T_Z	306
#define	T_ATTR_LIST	307
#define	T_ATTR_TYPE	308
#define	UNARY_MINUS	309

#line 19 "parser.y"


#include <map>
#include <stack>
#include <string>
#include <iostream>
#include "llapi/llapi_all.h"
#include "hlapi/hlapi_all.h"
#include "hlapi/class_manager.h"
#include "hlapi/plugins_all.h"
#include "parser_defs.h"
#include "rt_io.h"

static map<string, TProcedural*, less<string> >       _tObjectMap;
static map<string, TColor, less<string> >             _tColorMap;
static map<string, TVector, less<string> >            _tVectorMap;
static map<string, double(*)(void), less<string> >    _tFunctionMap;
static map<string, EClass, less<string> >             _tTypeMap;
static stack<TProcedural*>                            _tDataStack;

static TProcedural*   _ptData;
static TProcedural*   _ptParent;
static Byte           _bVertices;
static TVector        _tVector;
static TVector2       _tVector2;
static TColor         _tColor;
static TAggregate*    _ptWorld;
static NAttribute     _nAttrib;
static TImageIO*      _ptImageIO;

static double (*_pfFunction)(void);

#define POP()           top(); _tDataStack.pop()            // Fix to STL's pop()

#define DATA		(_tDataStack.top())
#define ENTITY		((TEntity*) _tDataStack.top())
#define VOLUME		((TVolume*) _tDataStack.top())
#define VECTOR		((TVector*) _tDataStack.top())
#define COLOR		((TColor*) _tDataStack.top())
#define SCENE		(TSceneRT::_ptParsedScene)
#define MATERIAL	((TMaterial*) _tDataStack.top())
#define OBJECT		((TObject*) _tDataStack.top())
#define AGGREGATE	((TAggregate*) _tDataStack.top())
#define TRIANGLE	((TTriangle*) _tDataStack.top())
#define RECTANGLE	((TRectangle*) _tDataStack.top())
#define MESH		((TMeshObject*) _tDataStack.top())

#define YYDEBUG 1
#define YYERROR_VERBOSE 

static TProcedural* NewObject (const string& rktCLASS, const TProcedural* pktPARENT);
static void* InstanceObject (const string& rktNAME);
static void* UpdateObject (const string& rktNAME);
static void DefineObject (const string& rktNAME, const string& rktCLASS, const string& rktDEF_CLASS);
static void CreateObject (const string& rktCLASS, const string& rktDEF_CLASS);
static void SetParameter (const string& rktATTRIB, EAttribType eTYPE);

static void DefineColor (const string& rktNAME);
static TColor* InstanceColor (const string& rktNAME);

static void DefineVector (const string& rktNAME);
static TVector* InstanceVector (const string& rktNAME);

static void UpdateAttribute (const string& rktATTRIBUTE, const string& rktIDENT);

static void InitObjects (void);
static void InitFunctions (void);

static EAttribType MapClassToAttribute (const TBaseClass* pktClass);

static string EAttribType_to_str (EAttribType eat);
 

#line 93 "parser.y"
typedef union {
         char                  acIdent [200];
         double                dValue;
         bool                  gValue;
         TColor*               ptColor;
         TVector*              ptVector;
         TVector2*             ptVector2;
         TScene*               ptScene;
         TRenderer*            ptRenderer;
         TCamera*              ptCamera;
         TLight*               ptLight;
         TBsdf*                ptBsdf;
         TMaterial*            ptMaterial;
         TPattern*             ptPattern;
         TPerturbation*        ptPerturbation; 
         TObject*              ptObject;
         TImageFilter*         ptIFilter;
         TObjectFilter*        ptOFilter;
         TAtmosphericObject*   ptAtmObject;
         TImageIO*             ptImageIO;
       } YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		613
#define	YYFLAG		-32768
#define	YYNTBASE	68

#define YYTRANSLATE(x) ((unsigned)(x) <= 309 ? yytranslate[x] : 214)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    60,
    61,    57,    55,    65,    56,     2,    58,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    67,     2,    64,
     2,    66,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    62,     2,    63,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    59
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     4,     7,    10,    13,    15,    19,    23,    27,
    31,    35,    39,    43,    47,    51,    55,    59,    63,    67,
    71,    75,    79,    83,    87,    91,    95,    99,   103,   107,
   111,   115,   119,   123,   127,   131,   134,   137,   140,   143,
   146,   149,   152,   155,   158,   161,   164,   167,   170,   173,
   176,   179,   182,   184,   188,   192,   196,   200,   204,   207,
   211,   220,   228,   234,   236,   239,   240,   242,   243,   247,
   251,   252,   255,   259,   264,   267,   270,   273,   276,   279,
   282,   285,   288,   291,   294,   297,   300,   303,   306,   309,
   312,   315,   316,   319,   322,   325,   330,   333,   336,   341,
   343,   346,   348,   349,   352,   355,   358,   360,   361,   368,
   369,   372,   375,   378,   381,   382,   389,   391,   392,   398,
   399,   402,   405,   408,   411,   412,   417,   418,   421,   424,
   426,   427,   434,   436,   437,   443,   444,   447,   450,   453,
   456,   458,   459,   466,   468,   469,   475,   476,   483,   485,
   486,   492,   493,   500,   502,   503,   509,   510,   517,   519,
   520,   526,   527,   534,   536,   537,   543,   544,   551,   553,
   554,   560,   561,   568,   570,   571,   577,   578,   585,   587,
   588,   594,   595,   602,   604,   605,   611,   612,   619,   621,
   622,   628,   629,   636,   638,   639,   645,   646,   653,   655,
   656,   662,   663,   670,   672,   673,   679,   680,   683,   685,
   687,   688,   695,   697,   698,   704,   705,   708,   710,   712,
   713,   720,   722,   723,   729,   730,   733,   735,   737,   738,
   745,   747,   748,   754,   755,   758,   760,   762,   763,   770,
   772,   773,   779,   780,   787,   789,   790,   796,   797,   804,
   806,   807,   813,   814,   821,   823,   824,   830,   831,   838,
   840,   841,   847,   848,   855,   857,   858,   864,   865,   872,
   874,   875,   881,   882,   885,   888,   890,   891,   898,   900,
   901,   907,   909,   911,   913,   915,   917,   919,   921,   923,
   925,   927,   929,   931,   933,   935,   937,   939,   941,   943,
   945,   947,   949,   951,   953,   955,   957,   959,   961,   963,
   965,   967,   969,   971,   973,   975,   977,   979,   981,   983,
   985,   987,   989,   991,   993,   995,   997,   999,  1001,  1003
};

static const short yyrhs[] = {    -1,
    68,    69,     0,    68,    70,     0,    41,   102,     0,     9,
   184,     0,    71,     0,    19,    16,    86,     0,    19,    48,
    90,     0,    19,    29,   142,     0,    19,    41,   100,     0,
    19,    13,   138,     0,    19,    26,   106,     0,    19,    12,
   110,     0,    19,    24,   130,     0,    19,    30,   134,     0,
    19,    38,   114,     0,    19,    27,   118,     0,    19,    32,
   122,     0,    19,    33,   126,     0,    19,    35,   146,     0,
    19,    42,   150,     0,    19,    45,   154,     0,    19,    34,
   160,     0,    19,    36,   166,     0,    19,    14,   172,     0,
    19,     8,   178,     0,    19,    11,   186,     0,    19,    18,
   190,     0,    19,    17,   194,     0,    19,    43,   198,     0,
    19,    28,   202,     0,    19,     9,   182,     0,    19,    47,
   208,     0,    19,    25,   208,     0,    19,    20,   208,     0,
    29,   144,     0,    26,   108,     0,    35,   148,     0,    42,
   152,     0,    45,   156,     0,    34,   162,     0,    36,   168,
     0,    14,   174,     0,     8,   180,     0,    11,   188,     0,
    18,   192,     0,    17,   196,     0,    43,   200,     0,    28,
   204,     0,    47,   210,     0,    25,   210,     0,    20,   210,
     0,     4,     0,     6,    60,    61,     0,    72,    55,    72,
     0,    72,    56,    72,     0,    72,    57,    72,     0,    72,
    58,    72,     0,    56,    72,     0,    60,    72,    61,     0,
    62,    37,    72,    23,    72,    10,    72,    63,     0,    64,
    72,    65,    72,    65,    72,    66,     0,    64,    72,    65,
    72,    66,     0,    74,     0,    49,    74,     0,     0,     6,
     0,     0,    67,    21,     6,     0,    67,    15,     6,     0,
     0,    79,    80,     0,    53,    60,    61,     0,    54,    60,
   212,    61,     0,     6,    74,     0,     6,    75,     0,     6,
    72,     0,     6,     3,     0,     6,     7,     0,     6,   124,
     0,     6,   128,     0,     6,    73,     0,     6,    77,     0,
    16,    77,     0,    16,    72,     0,    16,    73,     0,    16,
   124,     0,    48,    92,     0,    13,   140,     0,    38,   116,
     0,    12,   112,     0,     0,    81,    82,     0,    44,    74,
     0,    39,    74,     0,    39,    72,    65,    74,     0,    44,
    92,     0,    39,    92,     0,    39,    72,    65,    92,     0,
    80,     0,    40,    74,     0,    82,     0,     0,    84,    85,
     0,    27,   120,     0,    22,   136,     0,    83,     0,     0,
    77,    78,    87,    62,    88,    63,     0,     0,    88,    89,
     0,    37,    72,     0,    23,    72,     0,    10,    72,     0,
     0,    77,    78,    91,    62,    94,    63,     0,    77,     0,
     0,    78,    93,    62,    94,    63,     0,     0,    94,    95,
     0,    50,    72,     0,    51,    72,     0,    52,    72,     0,
     0,    62,    97,    98,    63,     0,     0,    98,    99,     0,
    46,     7,     0,    80,     0,     0,    77,    78,   101,    62,
   104,    63,     0,    77,     0,     0,    78,   103,    62,   104,
    63,     0,     0,   104,   105,     0,    26,   108,     0,    22,
   132,     0,    31,    96,     0,    80,     0,     0,    77,    78,
   107,    62,    81,    63,     0,    77,     0,     0,    78,   109,
    62,    81,    63,     0,     0,    77,    78,   111,    62,    79,
    63,     0,    77,     0,     0,    78,   113,    62,    79,    63,
     0,     0,    77,    78,   115,    62,    79,    63,     0,    77,
     0,     0,    78,   117,    62,    79,    63,     0,     0,    77,
    78,   119,    62,    79,    63,     0,    77,     0,     0,    78,
   121,    62,    79,    63,     0,     0,    77,    78,   123,    62,
    79,    63,     0,    77,     0,     0,    78,   125,    62,    79,
    63,     0,     0,    77,    78,   127,    62,    79,    63,     0,
    77,     0,     0,    78,   129,    62,    79,    63,     0,     0,
    77,    78,   131,    62,    79,    63,     0,    77,     0,     0,
    78,   133,    62,    79,    63,     0,     0,    77,    78,   135,
    62,    79,    63,     0,    77,     0,     0,    78,   137,    62,
    79,    63,     0,     0,    77,    78,   139,    62,    81,    63,
     0,    77,     0,     0,    78,   141,    62,    81,    63,     0,
     0,    77,    78,   143,    62,    84,    63,     0,    77,     0,
     0,    78,   145,    62,    84,    63,     0,     0,    77,    78,
   147,    62,    84,    63,     0,    77,     0,     0,    78,   149,
    62,    84,    63,     0,     0,    77,    78,   151,    62,    84,
    63,     0,    77,     0,     0,    78,   153,    62,    84,    63,
     0,     0,    77,    78,   155,    62,   158,    63,     0,    77,
     0,     0,    78,   157,    62,   158,    63,     0,     0,   158,
   159,     0,    76,     0,    85,     0,     0,    77,    78,   161,
    62,   164,    63,     0,    77,     0,     0,    78,   163,    62,
   164,    63,     0,     0,   164,   165,     0,    76,     0,    85,
     0,     0,    77,    78,   167,    62,   170,    63,     0,    77,
     0,     0,    78,   169,    62,   170,    63,     0,     0,   170,
   171,     0,    76,     0,    85,     0,     0,    77,    78,   173,
    62,    84,    63,     0,    77,     0,     0,    78,   175,    62,
    84,    63,     0,     0,   176,   177,     0,    71,     0,    85,
     0,     0,    77,    78,   179,    62,   176,    63,     0,    77,
     0,     0,    78,   181,    62,   176,    63,     0,     0,    77,
    78,   183,    62,    79,    63,     0,    77,     0,     0,    78,
   185,    62,    79,    63,     0,     0,    77,    78,   187,    62,
    84,    63,     0,    77,     0,     0,    78,   189,    62,    84,
    63,     0,     0,    77,    78,   191,    62,    84,    63,     0,
    77,     0,     0,    78,   193,    62,    84,    63,     0,     0,
    77,    78,   195,    62,    84,    63,     0,    77,     0,     0,
    78,   197,    62,    84,    63,     0,     0,    77,    78,   199,
    62,    84,    63,     0,    77,     0,     0,    78,   201,    62,
    84,    63,     0,     0,    77,    78,   203,    62,   206,    63,
     0,    77,     0,     0,    78,   205,    62,   206,    63,     0,
     0,   206,   207,     0,    45,   156,     0,    85,     0,     0,
    77,    78,   209,    62,   176,    63,     0,    77,     0,     0,
    78,   211,    62,   176,    63,     0,     6,     0,   213,     0,
     8,     0,     9,     0,    10,     0,    11,     0,    12,     0,
    13,     0,    14,     0,    15,     0,    16,     0,    17,     0,
    18,     0,    19,     0,    20,     0,    21,     0,    22,     0,
    23,     0,    24,     0,    25,     0,    26,     0,    27,     0,
    28,     0,    29,     0,    30,     0,    31,     0,    32,     0,
    33,     0,    34,     0,    35,     0,    36,     0,    37,     0,
    38,     0,    39,     0,    40,     0,    41,     0,    42,     0,
    43,     0,    44,     0,    45,     0,    46,     0,    47,     0,
    48,     0,    49,     0,    50,     0,    51,     0,    52,     0,
    53,     0,    54,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   247,   248,   249,   252,   254,   258,   276,   278,   280,   282,
   284,   286,   288,   290,   292,   294,   296,   298,   300,   302,
   304,   306,   308,   310,   312,   314,   316,   318,   320,   322,
   324,   326,   328,   330,   332,   336,   340,   344,   348,   352,
   356,   360,   364,   368,   372,   376,   380,   384,   388,   392,
   397,   402,   409,   413,   425,   429,   433,   437,   441,   445,
   450,   459,   465,   472,   476,   482,   486,   492,   496,   506,
   513,   514,   517,   538,   560,   565,   570,   575,   580,   585,
   590,   595,   600,   604,   608,   613,   618,   623,   628,   633,
   638,   645,   646,   649,   653,   657,   661,   665,   669,   673,
   676,   680,   683,   684,   687,   691,   695,   698,   702,   728,
   729,   732,   736,   740,   746,   750,   759,   763,   767,   773,
   774,   777,   781,   785,   791,   795,   801,   802,   805,   818,
   821,   825,   831,   836,   842,   849,   850,   853,   876,   880,
   884,   887,   891,   897,   901,   905,   912,   916,   922,   926,
   930,   936,   940,   946,   950,   954,   960,   964,   970,   974,
   978,   984,   988,   994,   998,  1002,  1008,  1012,  1018,  1022,
  1026,  1032,  1036,  1042,  1046,  1050,  1056,  1060,  1066,  1070,
  1074,  1080,  1084,  1090,  1094,  1098,  1104,  1108,  1114,  1118,
  1122,  1128,  1132,  1138,  1142,  1146,  1152,  1156,  1162,  1166,
  1170,  1176,  1181,  1192,  1196,  1201,  1212,  1213,  1216,  1221,
  1224,  1229,  1240,  1244,  1249,  1260,  1261,  1264,  1269,  1272,
  1277,  1288,  1292,  1297,  1308,  1309,  1312,  1317,  1320,  1324,
  1330,  1334,  1338,  1344,  1345,  1348,  1352,  1355,  1359,  1365,
  1369,  1373,  1379,  1383,  1389,  1393,  1397,  1403,  1407,  1413,
  1417,  1421,  1427,  1431,  1437,  1441,  1445,  1451,  1455,  1461,
  1465,  1469,  1475,  1479,  1485,  1489,  1493,  1499,  1503,  1509,
  1513,  1517,  1523,  1524,  1527,  1532,  1535,  1539,  1545,  1549,
  1553,  1559,  1560,  1564,  1565,  1566,  1567,  1568,  1569,  1570,
  1571,  1572,  1573,  1574,  1575,  1576,  1577,  1578,  1579,  1580,
  1581,  1582,  1583,  1584,  1585,  1586,  1587,  1588,  1589,  1590,
  1591,  1592,  1593,  1594,  1595,  1596,  1597,  1598,  1599,  1600,
  1601,  1602,  1603,  1604,  1605,  1606,  1607,  1608,  1609,  1610
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","T_BOOL",
"T_REAL","T_INTEGER","T_IDENTIFIER","T_QUOTED_STRING","T_AGGREGATE","T_ATM_OBJECT",
"T_BLUE","T_BOX","T_BSDF","T_CAMERA","T_CIRCLE","T_CLASS","T_COLOR","T_CONE",
"T_CYLINDER","T_DEFINE","T_DIFFERENCE","T_EXTENDS","T_FILTER","T_GREEN","T_IMAGE_FILTER",
"T_INTERSECTION","T_LIGHT","T_MATERIAL","T_MESH","T_OBJECT","T_OBJECT_FILTER",
"T_OUTPUT","T_PATTERN","T_PERTURBATION","T_PHONG_TRIANGLE","T_PLANE","T_RECTANGLE",
"T_RED","T_RENDERER","T_ROTATE","T_SCALE","T_SCENE","T_SPHERE","T_TORUS","T_TRANSLATE",
"T_TRIANGLE","T_TYPE","T_UNION","T_VECTOR","T_VERTEX","T_X","T_Y","T_Z","T_ATTR_LIST",
"T_ATTR_TYPE","'+'","'-'","'*'","'/'","UNARY_MINUS","'('","')'","'{'","'}'",
"'<'","','","'>'","':'","everything","instance","definition","object","real_expr",
"color","vector3","vector2","vertex_instance","name","class","params","param",
"entity_params","entity_param","volume_param","object_params","object_param",
"color_def","@1","color_params","color_param","vector_def","@2","vector_instance",
"@3","vector_params","vector_param","image_io_instance","@4","image_io_params",
"image_io_param","scene_def","@5","scene_instance","@6","scene_params","scene_param",
"light_def","@7","light_instance","@8","bsdf_def","@9","bsdf_instance","@10",
"renderer_def","@11","renderer_instance","@12","material_def","@13","material_instance",
"@14","pattern_def","@15","pattern_instance","@16","perturbation_def","@17",
"perturbation_instance","@18","ifilter_def","@19","ifilter_instance","@20","ofilter_def",
"@21","ofilter_instance","@22","camera_def","@23","camera_instance","@24","object_def",
"@25","object_instance","@26","plane_def","@27","plane_instance","@28","sphere_def",
"@29","sphere_instance","@30","triangle_def","@31","triangle_instance","@32",
"triangle_params","triangle_param","phong_triangle_def","@33","phong_triangle_instance",
"@34","phong_triangle_params","phong_triangle_param","rectangle_def","@35","rectangle_instance",
"@36","rectangle_params","rectangle_param","circle_def","@37","circle_instance",
"@38","aggregate_params","aggregate_param","aggregate_def","@39","aggregate_instance",
"@40","atm_object_def","@41","atm_object_instance","@42","box_def","@43","box_instance",
"@44","cylinder_def","@45","cylinder_instance","@46","cone_def","@47","cone_instance",
"@48","torus_def","@49","torus_instance","@50","mesh_def","@51","mesh_instance",
"@52","mesh_params","mesh_param","csg_def","@53","csg_instance","@54","potential_string",
"reserved_words", NULL
};
#endif

static const short yyr1[] = {     0,
    68,    68,    68,    69,    69,    69,    70,    70,    70,    70,
    70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
    70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
    70,    70,    70,    70,    70,    71,    71,    71,    71,    71,
    71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
    71,    71,    72,    72,    72,    72,    72,    72,    72,    72,
    73,    74,    75,    76,    76,    77,    77,    78,    78,    78,
    79,    79,    80,    80,    80,    80,    80,    80,    80,    80,
    80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
    80,    81,    81,    82,    82,    82,    82,    82,    82,    82,
    83,    83,    84,    84,    85,    85,    85,    87,    86,    88,
    88,    89,    89,    89,    91,    90,    92,    93,    92,    94,
    94,    95,    95,    95,    97,    96,    98,    98,    99,    99,
   101,   100,   102,   103,   102,   104,   104,   105,   105,   105,
   105,   107,   106,   108,   109,   108,   111,   110,   112,   113,
   112,   115,   114,   116,   117,   116,   119,   118,   120,   121,
   120,   123,   122,   124,   125,   124,   127,   126,   128,   129,
   128,   131,   130,   132,   133,   132,   135,   134,   136,   137,
   136,   139,   138,   140,   141,   140,   143,   142,   144,   145,
   144,   147,   146,   148,   149,   148,   151,   150,   152,   153,
   152,   155,   154,   156,   157,   156,   158,   158,   159,   159,
   161,   160,   162,   163,   162,   164,   164,   165,   165,   167,
   166,   168,   169,   168,   170,   170,   171,   171,   173,   172,
   174,   175,   174,   176,   176,   177,   177,   179,   178,   180,
   181,   180,   183,   182,   184,   185,   184,   187,   186,   188,
   189,   188,   191,   190,   192,   193,   192,   195,   194,   196,
   197,   196,   199,   198,   200,   201,   200,   203,   202,   204,
   205,   204,   206,   206,   207,   207,   209,   208,   210,   211,
   210,   212,   212,   213,   213,   213,   213,   213,   213,   213,
   213,   213,   213,   213,   213,   213,   213,   213,   213,   213,
   213,   213,   213,   213,   213,   213,   213,   213,   213,   213,
   213,   213,   213,   213,   213,   213,   213,   213,   213,   213,
   213,   213,   213,   213,   213,   213,   213,   213,   213,   213
};

static const short yyr2[] = {     0,
     0,     2,     2,     2,     2,     1,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     1,     3,     3,     3,     3,     3,     2,     3,
     8,     7,     5,     1,     2,     0,     1,     0,     3,     3,
     0,     2,     3,     4,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     0,     2,     2,     2,     4,     2,     2,     4,     1,
     2,     1,     0,     2,     2,     2,     1,     0,     6,     0,
     2,     2,     2,     2,     0,     6,     1,     0,     5,     0,
     2,     2,     2,     2,     0,     4,     0,     2,     2,     1,
     0,     6,     1,     0,     5,     0,     2,     2,     2,     2,
     1,     0,     6,     1,     0,     5,     0,     6,     1,     0,
     5,     0,     6,     1,     0,     5,     0,     6,     1,     0,
     5,     0,     6,     1,     0,     5,     0,     6,     1,     0,
     5,     0,     6,     1,     0,     5,     0,     6,     1,     0,
     5,     0,     6,     1,     0,     5,     0,     6,     1,     0,
     5,     0,     6,     1,     0,     5,     0,     6,     1,     0,
     5,     0,     6,     1,     0,     5,     0,     2,     1,     1,
     0,     6,     1,     0,     5,     0,     2,     1,     1,     0,
     6,     1,     0,     5,     0,     2,     1,     1,     0,     6,
     1,     0,     5,     0,     2,     1,     1,     0,     6,     1,
     0,     5,     0,     6,     1,     0,     5,     0,     6,     1,
     0,     5,     0,     6,     1,     0,     5,     0,     6,     1,
     0,     5,     0,     6,     1,     0,     5,     0,     6,     1,
     0,     5,     0,     2,     2,     1,     0,     6,     1,     0,
     5,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1
};

static const short yydefact[] = {     1,
     0,    66,    66,    66,    66,    66,    66,     0,    66,    66,
    66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
    66,     2,     3,     6,    67,     0,   240,   241,    44,   245,
   246,     5,   250,   251,    45,   231,   232,    43,   260,   261,
    47,   255,   256,    46,    66,    66,    66,    66,    66,    66,
    66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
    66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
    66,    66,    66,   279,   280,    52,    51,   144,   145,    37,
   270,   271,    49,   189,   190,    36,   213,   214,    41,   194,
   195,    38,   222,   223,    42,   133,   134,     4,   199,   200,
    39,   265,   266,    48,   204,   205,    40,    50,     0,     0,
     0,     0,     0,     0,     0,     0,    68,    26,    68,    32,
    68,    27,    68,    13,    68,    11,    68,    25,    68,     7,
    68,    29,    68,    28,    68,    35,    68,    14,    34,    68,
    12,    68,    17,    68,    31,    68,     9,    68,    15,    68,
    18,    68,    19,    68,    23,    68,    20,    68,    24,    68,
    16,    68,    10,    68,    21,    68,    30,    68,    22,    33,
    68,     8,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    70,    69,   234,    71,   103,   103,   103,
   103,   238,   243,   248,   147,   182,   229,   108,   258,   253,
   277,   172,   142,   157,   268,   187,   177,   162,   167,   211,
   192,   220,   152,   131,   197,   263,   202,   115,   234,    92,
   273,   103,   216,   103,   225,   136,   103,   103,   207,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    66,    66,    66,    66,    66,    66,    66,
    66,     0,    66,    66,     0,     0,   242,   236,   100,   102,
   107,   237,   235,   247,    72,   252,   104,   233,   262,   257,
   234,    71,   103,    71,    92,   103,   110,   103,   103,   234,
    71,    92,    71,   273,   103,    71,    71,    71,   216,   103,
   225,    71,   136,   103,   103,   207,   120,   281,   146,    93,
    66,   272,   276,   274,   191,     0,   215,     0,    64,   218,
   219,   217,   196,   224,   227,   228,   226,    66,    66,     0,
   135,   141,   137,   201,   267,   206,   209,   210,   208,    78,
    53,    67,    79,     0,     0,     0,     0,    77,    82,    75,
    76,    83,   165,    80,    81,   149,   150,    91,   184,   185,
    89,    85,    86,    84,   165,    87,   179,   180,   106,   159,
   160,   105,   154,   155,    90,     0,    95,   117,   118,    98,
   101,    94,    97,    88,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   275,    65,     0,     0,   174,   175,   139,
   138,   125,   140,     0,    59,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    66,
     0,    73,   282,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
   301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     0,   283,   239,   244,   249,   148,   183,   230,     0,     0,
     0,   109,   111,   259,   254,   278,   173,   143,   158,   269,
   188,   178,   163,   168,   212,   193,   221,   153,   132,   198,
   264,   203,     0,     0,     0,   116,   121,     0,     0,   127,
    54,    60,     0,     0,    55,    56,    57,    58,    71,    71,
    71,    92,    71,    71,    71,    96,    99,   120,    74,   114,
   113,   112,   122,   123,   124,     0,    71,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   126,   130,   128,     0,    63,   166,   171,   151,   186,
   181,   161,   156,   119,     0,   176,   129,     0,    62,     0,
    61,     0,     0
};

static const short yydefgoto[] = {     1,
    22,    23,   288,   368,   369,   339,   371,   340,   398,   399,
   231,   289,   264,   290,   291,   232,   297,   130,   242,   413,
   523,   172,   262,   400,   461,   433,   547,   443,   550,   578,
   594,   163,   258,    98,   180,   270,   353,   141,   247,    80,
   174,   124,   239,   378,   455,   161,   257,   395,   459,   143,
   248,   392,   458,   151,   252,   374,   453,   153,   253,   375,
   454,   138,   246,   440,   549,   149,   251,   389,   457,   126,
   240,   381,   456,   147,   250,    86,   176,   157,   255,    92,
   178,   165,   259,   101,   181,   169,   261,   107,   183,   273,
   359,   155,   254,    89,   177,   267,   342,   159,   256,    95,
   179,   269,   347,   128,   241,    38,   114,   230,   293,   118,
   236,    29,   111,   120,   237,    32,   112,   122,   238,    35,
   113,   134,   244,    44,   116,   132,   243,    41,   115,   167,
   260,   104,   182,   145,   249,    83,   175,   265,   334,   136,
   245,    76,   173,   511,   512
};

static const short yypact[] = {-32768,
  1656,    70,    70,    70,    70,    70,    70,  1696,    70,    70,
    70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
    70,-32768,-32768,-32768,-32768,   129,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    23,    23,    23,    23,    23,    23,
    23,    23,    23,    23,    23,    23,    23,    23,    23,    23,
    23,    23,    23,    23,    23,    23,    23,    23,    23,    23,
    23,    23,    23,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    31,   109,
    54,    55,    84,    87,    95,   100,    97,-32768,    97,-32768,
    97,-32768,    97,-32768,    97,-32768,    97,-32768,    97,-32768,
    97,-32768,    97,-32768,    97,-32768,    97,-32768,-32768,    97,
-32768,    97,-32768,    97,-32768,    97,-32768,    97,-32768,    97,
-32768,    97,-32768,    97,-32768,    97,-32768,    97,-32768,    97,
-32768,    97,-32768,    97,-32768,    97,-32768,    97,-32768,-32768,
    97,-32768,   113,   123,   125,   133,   140,   144,   146,   148,
   150,   152,   154,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   641,
  1346,   879,   899,   928,   948,   156,   158,   160,   162,   163,
   165,   167,   169,   171,   173,   175,   177,   179,   181,   183,
   185,   187,   189,   191,   193,   194,   196,   197,   204,   205,
   206,   227,   685,   280,   816,   977,   409,   997,   469,   407,
  1026,  1046,   498,   107,    70,    70,   134,    70,    70,    70,
   116,   117,   106,    70,   231,   237,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    70,-32768,-32768,-32768,-32768,   117,-32768,    71,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,    70,    70,   238,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   239,-32768,    71,    71,   264,    71,   335,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   335,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    29,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   245,  1601,   729,  1354,  1075,  1365,
   834,  1095,   119,  1124,  1144,   773,  1373,  1288,  1417,   836,
  1173,  1419,  1431,  1448,   528,  1193,   557,  1450,  1261,  1222,
  1242,   587,   102,-32768,-32768,   239,   281,-32768,-32768,-32768,
-32768,-32768,-32768,   248,-32768,   -23,    71,   341,    71,    71,
    71,    71,   253,   254,   255,   258,   261,   263,   265,   106,
   267,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   269,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    71,    71,
    71,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    71,    71,    71,-32768,-32768,    71,   270,-32768,
-32768,-32768,   -15,    71,    22,    22,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   335,
   335,   335,   335,   335,   335,   353,-32768,  1334,    71,   207,
  1462,  1493,  1506,  1300,  1514,  1526,  1537,   232,    71,  1545,
   319,-32768,-32768,-32768,    68,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   256,-32768,-32768,    71,-32768,   103,
-32768,   340,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,   334,   -77,    64,  -200,-32768,  -243,     0,    86,
  -183,  -231,  -281,  -263,-32768,    80,  -122,-32768,-32768,-32768,
-32768,-32768,-32768,  -261,-32768,  -226,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    21,-32768,-32768,-32768,    -4,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    76,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,    26,-32768,    32,
-32768,-32768,-32768,-32768,-32768,    48,-32768,-32768,-32768,-32768,
-32768,    47,-32768,-32768,-32768,-32768,-32768,  -192,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,    57,-32768,   -28,
-32768,    15,-32768,-32768,-32768
};


#define	YYLAST		1744


static const short yytable[] = {   295,
   330,    27,    30,    33,    36,    39,    42,   579,    74,    74,
    78,    81,    84,    87,    90,    93,    96,    99,   102,   105,
    74,   403,   404,   411,    77,   345,   263,   139,    25,   357,
   418,   449,   450,   451,   452,   108,   184,   552,   352,   449,
   450,   451,   452,   170,   117,   119,   121,   123,   125,   127,
   129,   131,   133,   135,   137,   135,   140,   142,   144,   146,
   148,   150,   152,   154,   156,   158,   160,   162,   164,   166,
   168,   135,   171,   370,   361,    25,   436,   608,   451,   452,
   397,   401,   402,   449,   450,   451,   452,    28,    31,    34,
    37,    40,    43,   460,    75,    75,    79,    82,    85,    88,
    91,    94,    97,   100,   103,   106,    75,   292,   407,   360,
   361,    25,   362,   363,   185,   186,   187,   416,   408,   361,
   410,   362,   449,   450,   451,   452,   364,   417,   519,   419,
   365,   -68,   422,   423,   424,   435,    26,   361,   428,   362,
   292,   520,   333,   109,   341,   188,   346,   330,   189,   110,
   358,   543,   544,   545,   330,   521,   190,   449,   450,   451,
   452,   191,   364,    26,   546,   611,   365,   -68,   366,   338,
   367,   364,    26,    26,   219,   365,   295,   -68,   295,   338,
   338,   522,    26,   345,   220,   295,   221,   295,   357,   364,
   295,   295,   295,   365,   222,   366,   295,   352,   567,   382,
    26,   223,   192,   396,   193,   224,   194,   225,   195,   226,
   196,   227,   197,   228,   198,   229,   199,   301,   200,   302,
   201,   303,   202,   304,   305,   203,   306,   204,   307,   205,
   308,   206,   309,   207,   310,   208,   311,   209,   312,   210,
   313,   211,   314,   212,   315,   213,   316,   214,   317,   215,
   318,   216,   319,   217,   320,   321,   218,   322,   323,   566,
   437,   449,   450,   451,   452,   324,   325,   326,   233,   234,
   235,   589,   596,   372,   376,   379,   384,   387,   390,   393,
   584,   543,   544,   545,   292,   274,   445,   446,   327,   448,
   405,   275,   276,   292,   604,   277,   406,   333,   444,   442,
   447,   266,   341,   268,   346,   462,   271,   272,   551,   358,
   449,   450,   451,   452,   559,   560,   561,   280,   281,   562,
   330,   609,   563,   283,   564,   607,   565,   284,   568,   569,
   105,   577,   285,   286,    24,   449,   450,   451,   452,   613,
   383,   588,   329,   429,   441,   548,   593,   438,    78,   295,
   295,   295,   386,   295,   295,   295,   434,   432,   295,   373,
   377,   380,   385,   388,   391,   394,   425,   427,     0,   553,
   420,   555,   556,   557,   558,   581,   582,   583,     0,   585,
   586,   587,   409,     0,     0,   412,     0,   414,   415,   449,
   450,   451,   452,   590,   421,   449,   450,   451,   452,   426,
     0,     0,     0,   430,   431,   554,     0,   449,   450,   451,
   452,     0,   274,     0,   274,     0,   106,   589,   275,   276,
   275,   276,   277,     0,   277,     0,     0,     0,   348,     0,
   278,     0,   349,   439,    79,   279,     0,   350,     0,     0,
     0,   570,   571,   572,   280,     0,   280,   281,   282,     0,
     0,     0,   283,     0,   284,     0,   284,   336,     0,   285,
   286,   285,   286,     0,     0,   573,   574,   575,     0,   351,
   576,   337,   338,     0,   274,     0,   580,     0,     0,     0,
   275,   276,     0,     0,   277,     0,     0,     0,     0,     0,
   278,     0,     0,     0,     0,   279,     0,     0,     0,     0,
     0,   595,     0,   274,     0,     0,   280,   281,   282,   275,
   276,   605,   283,   277,     0,     0,   284,   336,     0,   278,
     0,   285,   286,     0,   279,     0,     0,     0,     0,     0,
   610,   344,   338,   274,     0,   280,   281,   282,     0,   275,
   276,   283,     0,   277,     0,   284,   336,     0,     0,   278,
   285,   286,     0,     0,   279,     0,     0,     0,     0,     0,
   356,   338,   274,     0,     0,   280,   281,   282,   275,   276,
     0,   283,   277,     0,     0,   284,   336,     0,   278,     0,
   285,   286,     0,   279,     0,     0,     0,     0,     0,     0,
   535,   338,   274,     0,   280,   281,   282,     0,   275,   276,
   283,     0,   277,     0,   284,   336,     0,     0,   278,   285,
   286,     0,     0,   279,     0,     0,     0,     0,     0,   537,
   338,     0,     0,     0,   280,   281,   282,     0,     0,     0,
   283,     0,     0,     0,   284,   336,     0,     0,     0,   285,
   286,     0,     0,     0,     0,     0,   274,     0,     2,   542,
   338,     4,   275,   276,     5,     0,   277,     6,     7,     0,
     9,     0,   278,     0,     0,    10,    11,   279,    12,    13,
     0,     0,     0,     0,    14,    15,    16,     0,   280,   281,
   282,     0,    18,    19,   283,    20,     0,    21,   284,     0,
   274,     0,     2,   285,   286,     4,   275,   276,     5,     0,
   277,     6,     7,   287,     9,     0,   278,     0,     0,    10,
    11,   279,    12,    13,     0,     0,     0,     0,    14,    15,
    16,     0,   280,   281,   282,     0,    18,    19,   283,    20,
     0,    21,   284,     0,   274,     0,     2,   285,   286,     4,
   275,   276,     5,     0,   277,     6,     7,   328,     9,     0,
   278,     0,     0,    10,    11,   279,    12,    13,     0,     0,
     0,     0,    14,    15,    16,     0,   280,   281,   282,     0,
    18,    19,   283,    20,     0,    21,   284,     0,   274,     0,
     2,   285,   286,     4,   275,   276,     5,     0,   277,     6,
     7,   513,     9,     0,   278,     0,     0,    10,    11,   279,
    12,    13,     0,     0,     0,     0,    14,    15,    16,     0,
   280,   281,   282,     0,    18,    19,   283,    20,     0,    21,
   284,   274,     0,     0,     0,   285,   286,   275,   276,     0,
     0,   277,     0,     0,     0,   526,     0,   278,     0,   274,
     0,   274,   279,     0,     0,   275,   276,   275,   276,   277,
     0,   277,     0,   280,   281,   282,     0,   278,     0,   283,
   331,     0,   279,   284,     0,     0,     0,     0,   285,   286,
     0,   280,   281,   280,   281,   282,     0,   283,   332,   283,
   331,   284,     0,   284,   274,     0,   285,   286,   285,   286,
   275,   276,     0,     0,   277,     0,   517,     0,   530,     0,
   278,     0,     0,     0,   274,   279,     0,     0,     0,     0,
   275,   276,     0,     0,   277,     0,   280,   281,   282,     0,
   278,     0,   283,     0,     0,   279,   284,     0,     0,     0,
     0,   285,   286,   274,     0,     0,   280,   281,   282,   275,
   276,   296,   283,   277,     0,     0,   284,     0,     0,   278,
     0,   285,   286,   274,   279,     0,     0,     0,     0,   275,
   276,   298,     0,   277,     0,   280,   281,   282,     0,   278,
     0,   283,     0,     0,   279,   284,     0,     0,     0,     0,
   285,   286,   274,     0,     0,   280,   281,   282,   275,   276,
   299,   283,   277,     0,     0,   284,     0,     0,   278,     0,
   285,   286,   274,   279,     0,     0,     0,     0,   275,   276,
   300,     0,   277,     0,   280,   281,   282,     0,   278,     0,
   283,     0,     0,   279,   284,     0,     0,     0,     0,   285,
   286,   274,     0,     0,   280,   281,   282,   275,   276,   335,
   283,   277,     0,     0,   284,     0,     0,   278,     0,   285,
   286,   274,   279,     0,     0,     0,     0,   275,   276,   343,
     0,   277,     0,   280,   281,   282,     0,   278,     0,   283,
     0,     0,   279,   284,     0,     0,     0,     0,   285,   286,
   274,     0,     0,   280,   281,   282,   275,   276,   354,   283,
   277,     0,     0,   284,     0,     0,   278,     0,   285,   286,
   274,   279,     0,     0,     0,     0,   275,   276,   355,     0,
   277,     0,   280,   281,   282,     0,   278,     0,   283,     0,
     0,   279,   284,     0,     0,     0,     0,   285,   286,   274,
     0,     0,   280,   281,   282,   275,   276,   515,   283,   277,
     0,     0,   284,     0,     0,   278,     0,   285,   286,   274,
   279,     0,     0,     0,     0,   275,   276,   518,     0,   277,
     0,   280,   281,   282,     0,   278,     0,   283,     0,     0,
   279,   284,     0,     0,     0,     0,   285,   286,   274,     0,
     0,   280,   281,   282,   275,   276,   524,   283,   277,     0,
     0,   284,     0,     0,   278,     0,   285,   286,   274,   279,
     0,     0,     0,     0,   275,   276,   525,     0,   277,     0,
   280,   281,   282,     0,   278,     0,   283,     0,     0,   279,
   284,     0,     0,     0,     0,   285,   286,   274,     0,     0,
   280,   281,   282,   275,   276,   531,   283,   277,     0,     0,
   284,     0,     0,   278,     0,   285,   286,   274,   279,     0,
     0,     0,     0,   275,   276,   536,     0,   277,     0,   280,
   281,   282,     0,   278,     0,   283,   274,     0,   279,   284,
     0,     0,   275,   276,   285,   286,   277,     0,     0,   280,
   281,   282,   348,     0,   540,   283,   349,     0,     0,   284,
     0,   350,     0,   274,   285,   286,     0,     0,   280,   275,
   276,     0,     0,   277,   541,   274,     0,     0,   284,     0,
     0,   275,   276,   285,   286,   277,     0,     0,     0,     0,
     0,     0,     0,   539,     0,   280,   281,     0,     0,     0,
     0,   283,     0,     0,     0,   284,     0,   280,   281,   274,
   285,   286,     0,   283,     0,   275,   276,   284,     0,   277,
   528,   274,   285,   286,     0,     0,     0,   275,   276,   274,
     0,   277,   600,     0,     0,   275,   276,     0,     0,   277,
   274,   280,     0,     0,     0,     0,   275,   276,   274,   591,
   277,   284,     0,   280,   275,   276,   285,   286,   277,     0,
     0,   280,     0,   284,     0,     0,   592,     0,   285,   286,
     0,   284,   280,     0,     0,     0,   285,   286,   294,     0,
   280,     0,   284,     0,     0,     0,   514,   285,   286,     0,
   284,     0,   274,     0,   274,   285,   286,   516,   275,   276,
   275,   276,   277,     0,   277,   527,   274,     0,     0,     0,
     0,     0,   275,   276,     0,     0,   277,     0,     0,     0,
     0,     0,     0,   274,   280,   274,   280,     0,     0,   275,
   276,   275,   276,   277,   284,   277,   284,   274,   280,   285,
   286,   285,   286,   275,   276,     0,     0,   277,   284,   529,
     0,   532,     0,   285,   286,   280,     0,   280,     0,     0,
     0,     0,     0,   533,     0,   284,     0,   284,   274,   280,
   285,   286,   285,   286,   275,   276,     0,     0,   277,   284,
   534,   274,   538,     0,   285,   286,     0,   275,   276,   274,
     0,   277,     0,     0,   597,   275,   276,     0,     0,   277,
   280,   274,     0,     0,     0,     0,     0,   275,   276,     0,
   284,   277,   274,   280,     0,   285,   286,     0,   275,   276,
   274,   280,   277,   284,     0,   598,   275,   276,   285,   286,
   277,   284,     0,   280,     0,     0,   285,   286,   599,     0,
     0,     0,     0,   284,   280,     0,   601,     0,   285,   286,
     0,     0,   280,     0,   284,     0,     0,     0,   602,   285,
   286,     0,   284,     0,     0,     0,     0,   285,   286,   603,
     0,     0,     0,     0,     0,     0,   463,   606,   464,   465,
   466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
   476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
   486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
   496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
   506,   507,   508,   509,   510,   612,     0,     0,     0,     0,
     0,     0,     0,     2,     3,     0,     4,     0,     0,     5,
     0,     0,     6,     7,     8,     9,     0,     0,     0,     0,
    10,    11,     0,    12,    13,     0,     0,     0,     0,    14,
    15,    16,     0,     0,     0,     0,    17,    18,    19,     0,
    20,     0,    21,    45,    46,     0,    47,    48,    49,    50,
     0,    51,    52,    53,     0,    54,     0,     0,     0,    55,
    56,    57,    58,    59,    60,    61,     0,    62,    63,    64,
    65,    66,     0,    67,     0,     0,    68,    69,    70,     0,
    71,     0,    72,    73
};

static const short yycheck[] = {   231,
   264,     2,     3,     4,     5,     6,     7,    23,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,   283,   284,   305,    10,   269,   219,    56,     6,   273,
   312,    55,    56,    57,    58,    21,     6,    61,   270,    55,
    56,    57,    58,    72,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,   274,     4,     6,     6,    10,    57,    58,
   281,   282,   283,    55,    56,    57,    58,     2,     3,     4,
     5,     6,     7,    65,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,   230,   301,     3,
     4,     6,     6,     7,     6,    62,    62,   310,   302,     4,
   304,     6,    55,    56,    57,    58,    56,   311,    10,   313,
    60,    62,   316,   317,   318,   336,    67,     4,   322,     6,
   263,    23,   265,    15,   267,    62,   269,   411,    62,    21,
   273,    50,    51,    52,   418,    37,    62,    55,    56,    57,
    58,    62,    56,    67,    63,    63,    60,    62,    62,    64,
    64,    56,    67,    67,    62,    60,   408,    62,   410,    64,
    64,    63,    67,   427,    62,   417,    62,   419,   432,    56,
   422,   423,   424,    60,    62,    62,   428,   429,   460,   277,
    67,    62,   117,   281,   119,    62,   121,    62,   123,    62,
   125,    62,   127,    62,   129,    62,   131,    62,   133,    62,
   135,    62,   137,    62,    62,   140,    62,   142,    62,   144,
    62,   146,    62,   148,    62,   150,    62,   152,    62,   154,
    62,   156,    62,   158,    62,   160,    62,   162,    62,   164,
    62,   166,    62,   168,    62,    62,   171,    62,    62,   460,
   338,    55,    56,    57,    58,    62,    62,    62,   189,   190,
   191,    65,    66,   274,   275,   276,   277,   278,   279,   280,
   562,    50,    51,    52,   407,     6,   364,   365,    62,   367,
    60,    12,    13,   416,    63,    16,    60,   420,    60,    62,
    37,   222,   425,   224,   427,    61,   227,   228,    61,   432,
    55,    56,    57,    58,    62,    62,    62,    38,    39,    62,
   584,    66,    62,    44,    62,     7,    62,    48,    62,    61,
   331,    62,    53,    54,     1,    55,    56,    57,    58,     0,
   277,   568,    63,   323,   349,    65,   578,   348,   349,   581,
   582,   583,   277,   585,   586,   587,   331,   326,   590,   274,
   275,   276,   277,   278,   279,   280,   319,   321,    -1,   447,
   314,   449,   450,   451,   452,   559,   560,   561,    -1,   563,
   564,   565,   303,    -1,    -1,   306,    -1,   308,   309,    55,
    56,    57,    58,   577,   315,    55,    56,    57,    58,   320,
    -1,    -1,    -1,   324,   325,    65,    -1,    55,    56,    57,
    58,    -1,     6,    -1,     6,    -1,   331,    65,    12,    13,
    12,    13,    16,    -1,    16,    -1,    -1,    -1,    22,    -1,
    22,    -1,    26,   348,   349,    27,    -1,    31,    -1,    -1,
    -1,   519,   520,   521,    38,    -1,    38,    39,    40,    -1,
    -1,    -1,    44,    -1,    48,    -1,    48,    49,    -1,    53,
    54,    53,    54,    -1,    -1,   543,   544,   545,    -1,    63,
   548,    63,    64,    -1,     6,    -1,   554,    -1,    -1,    -1,
    12,    13,    -1,    -1,    16,    -1,    -1,    -1,    -1,    -1,
    22,    -1,    -1,    -1,    -1,    27,    -1,    -1,    -1,    -1,
    -1,   579,    -1,     6,    -1,    -1,    38,    39,    40,    12,
    13,   589,    44,    16,    -1,    -1,    48,    49,    -1,    22,
    -1,    53,    54,    -1,    27,    -1,    -1,    -1,    -1,    -1,
   608,    63,    64,     6,    -1,    38,    39,    40,    -1,    12,
    13,    44,    -1,    16,    -1,    48,    49,    -1,    -1,    22,
    53,    54,    -1,    -1,    27,    -1,    -1,    -1,    -1,    -1,
    63,    64,     6,    -1,    -1,    38,    39,    40,    12,    13,
    -1,    44,    16,    -1,    -1,    48,    49,    -1,    22,    -1,
    53,    54,    -1,    27,    -1,    -1,    -1,    -1,    -1,    -1,
    63,    64,     6,    -1,    38,    39,    40,    -1,    12,    13,
    44,    -1,    16,    -1,    48,    49,    -1,    -1,    22,    53,
    54,    -1,    -1,    27,    -1,    -1,    -1,    -1,    -1,    63,
    64,    -1,    -1,    -1,    38,    39,    40,    -1,    -1,    -1,
    44,    -1,    -1,    -1,    48,    49,    -1,    -1,    -1,    53,
    54,    -1,    -1,    -1,    -1,    -1,     6,    -1,     8,    63,
    64,    11,    12,    13,    14,    -1,    16,    17,    18,    -1,
    20,    -1,    22,    -1,    -1,    25,    26,    27,    28,    29,
    -1,    -1,    -1,    -1,    34,    35,    36,    -1,    38,    39,
    40,    -1,    42,    43,    44,    45,    -1,    47,    48,    -1,
     6,    -1,     8,    53,    54,    11,    12,    13,    14,    -1,
    16,    17,    18,    63,    20,    -1,    22,    -1,    -1,    25,
    26,    27,    28,    29,    -1,    -1,    -1,    -1,    34,    35,
    36,    -1,    38,    39,    40,    -1,    42,    43,    44,    45,
    -1,    47,    48,    -1,     6,    -1,     8,    53,    54,    11,
    12,    13,    14,    -1,    16,    17,    18,    63,    20,    -1,
    22,    -1,    -1,    25,    26,    27,    28,    29,    -1,    -1,
    -1,    -1,    34,    35,    36,    -1,    38,    39,    40,    -1,
    42,    43,    44,    45,    -1,    47,    48,    -1,     6,    -1,
     8,    53,    54,    11,    12,    13,    14,    -1,    16,    17,
    18,    63,    20,    -1,    22,    -1,    -1,    25,    26,    27,
    28,    29,    -1,    -1,    -1,    -1,    34,    35,    36,    -1,
    38,    39,    40,    -1,    42,    43,    44,    45,    -1,    47,
    48,     6,    -1,    -1,    -1,    53,    54,    12,    13,    -1,
    -1,    16,    -1,    -1,    -1,    63,    -1,    22,    -1,     6,
    -1,     6,    27,    -1,    -1,    12,    13,    12,    13,    16,
    -1,    16,    -1,    38,    39,    40,    -1,    22,    -1,    44,
    45,    -1,    27,    48,    -1,    -1,    -1,    -1,    53,    54,
    -1,    38,    39,    38,    39,    40,    -1,    44,    63,    44,
    45,    48,    -1,    48,     6,    -1,    53,    54,    53,    54,
    12,    13,    -1,    -1,    16,    -1,    63,    -1,    63,    -1,
    22,    -1,    -1,    -1,     6,    27,    -1,    -1,    -1,    -1,
    12,    13,    -1,    -1,    16,    -1,    38,    39,    40,    -1,
    22,    -1,    44,    -1,    -1,    27,    48,    -1,    -1,    -1,
    -1,    53,    54,     6,    -1,    -1,    38,    39,    40,    12,
    13,    63,    44,    16,    -1,    -1,    48,    -1,    -1,    22,
    -1,    53,    54,     6,    27,    -1,    -1,    -1,    -1,    12,
    13,    63,    -1,    16,    -1,    38,    39,    40,    -1,    22,
    -1,    44,    -1,    -1,    27,    48,    -1,    -1,    -1,    -1,
    53,    54,     6,    -1,    -1,    38,    39,    40,    12,    13,
    63,    44,    16,    -1,    -1,    48,    -1,    -1,    22,    -1,
    53,    54,     6,    27,    -1,    -1,    -1,    -1,    12,    13,
    63,    -1,    16,    -1,    38,    39,    40,    -1,    22,    -1,
    44,    -1,    -1,    27,    48,    -1,    -1,    -1,    -1,    53,
    54,     6,    -1,    -1,    38,    39,    40,    12,    13,    63,
    44,    16,    -1,    -1,    48,    -1,    -1,    22,    -1,    53,
    54,     6,    27,    -1,    -1,    -1,    -1,    12,    13,    63,
    -1,    16,    -1,    38,    39,    40,    -1,    22,    -1,    44,
    -1,    -1,    27,    48,    -1,    -1,    -1,    -1,    53,    54,
     6,    -1,    -1,    38,    39,    40,    12,    13,    63,    44,
    16,    -1,    -1,    48,    -1,    -1,    22,    -1,    53,    54,
     6,    27,    -1,    -1,    -1,    -1,    12,    13,    63,    -1,
    16,    -1,    38,    39,    40,    -1,    22,    -1,    44,    -1,
    -1,    27,    48,    -1,    -1,    -1,    -1,    53,    54,     6,
    -1,    -1,    38,    39,    40,    12,    13,    63,    44,    16,
    -1,    -1,    48,    -1,    -1,    22,    -1,    53,    54,     6,
    27,    -1,    -1,    -1,    -1,    12,    13,    63,    -1,    16,
    -1,    38,    39,    40,    -1,    22,    -1,    44,    -1,    -1,
    27,    48,    -1,    -1,    -1,    -1,    53,    54,     6,    -1,
    -1,    38,    39,    40,    12,    13,    63,    44,    16,    -1,
    -1,    48,    -1,    -1,    22,    -1,    53,    54,     6,    27,
    -1,    -1,    -1,    -1,    12,    13,    63,    -1,    16,    -1,
    38,    39,    40,    -1,    22,    -1,    44,    -1,    -1,    27,
    48,    -1,    -1,    -1,    -1,    53,    54,     6,    -1,    -1,
    38,    39,    40,    12,    13,    63,    44,    16,    -1,    -1,
    48,    -1,    -1,    22,    -1,    53,    54,     6,    27,    -1,
    -1,    -1,    -1,    12,    13,    63,    -1,    16,    -1,    38,
    39,    40,    -1,    22,    -1,    44,     6,    -1,    27,    48,
    -1,    -1,    12,    13,    53,    54,    16,    -1,    -1,    38,
    39,    40,    22,    -1,    63,    44,    26,    -1,    -1,    48,
    -1,    31,    -1,     6,    53,    54,    -1,    -1,    38,    12,
    13,    -1,    -1,    16,    63,     6,    -1,    -1,    48,    -1,
    -1,    12,    13,    53,    54,    16,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    63,    -1,    38,    39,    -1,    -1,    -1,
    -1,    44,    -1,    -1,    -1,    48,    -1,    38,    39,     6,
    53,    54,    -1,    44,    -1,    12,    13,    48,    -1,    16,
    63,     6,    53,    54,    -1,    -1,    -1,    12,    13,     6,
    -1,    16,    63,    -1,    -1,    12,    13,    -1,    -1,    16,
     6,    38,    -1,    -1,    -1,    -1,    12,    13,     6,    46,
    16,    48,    -1,    38,    12,    13,    53,    54,    16,    -1,
    -1,    38,    -1,    48,    -1,    -1,    63,    -1,    53,    54,
    -1,    48,    38,    -1,    -1,    -1,    53,    54,    63,    -1,
    38,    -1,    48,    -1,    -1,    -1,    63,    53,    54,    -1,
    48,    -1,     6,    -1,     6,    53,    54,    63,    12,    13,
    12,    13,    16,    -1,    16,    63,     6,    -1,    -1,    -1,
    -1,    -1,    12,    13,    -1,    -1,    16,    -1,    -1,    -1,
    -1,    -1,    -1,     6,    38,     6,    38,    -1,    -1,    12,
    13,    12,    13,    16,    48,    16,    48,     6,    38,    53,
    54,    53,    54,    12,    13,    -1,    -1,    16,    48,    63,
    -1,    63,    -1,    53,    54,    38,    -1,    38,    -1,    -1,
    -1,    -1,    -1,    63,    -1,    48,    -1,    48,     6,    38,
    53,    54,    53,    54,    12,    13,    -1,    -1,    16,    48,
    63,     6,    63,    -1,    53,    54,    -1,    12,    13,     6,
    -1,    16,    -1,    -1,    63,    12,    13,    -1,    -1,    16,
    38,     6,    -1,    -1,    -1,    -1,    -1,    12,    13,    -1,
    48,    16,     6,    38,    -1,    53,    54,    -1,    12,    13,
     6,    38,    16,    48,    -1,    63,    12,    13,    53,    54,
    16,    48,    -1,    38,    -1,    -1,    53,    54,    63,    -1,
    -1,    -1,    -1,    48,    38,    -1,    63,    -1,    53,    54,
    -1,    -1,    38,    -1,    48,    -1,    -1,    -1,    63,    53,
    54,    -1,    48,    -1,    -1,    -1,    -1,    53,    54,    63,
    -1,    -1,    -1,    -1,    -1,    -1,     6,    63,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,     0,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     8,     9,    -1,    11,    -1,    -1,    14,
    -1,    -1,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
    25,    26,    -1,    28,    29,    -1,    -1,    -1,    -1,    34,
    35,    36,    -1,    -1,    -1,    -1,    41,    42,    43,    -1,
    45,    -1,    47,     8,     9,    -1,    11,    12,    13,    14,
    -1,    16,    17,    18,    -1,    20,    -1,    -1,    -1,    24,
    25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
    35,    36,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
    45,    -1,    47,    48
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 253 "parser.y"
{;
    break;}
case 5:
#line 255 "parser.y"
{
                            SCENE->atmosphere()->addObject (yyvsp[0].ptAtmObject);
                          ;
    break;}
case 6:
#line 259 "parser.y"
{
			    // Sanity check to avoid adding an object more than
			    // once. 
			    if( !_ptWorld->containsObject( yyvsp[0].ptObject ) )
			    {
			      _ptWorld->add (yyvsp[0].ptObject);
			    }
			    else
			    {
			      // Somehow, the object was added more than
			      // once... 
			      string s = "This object is already in the scene: ";
			      rt_error(s + yyvsp[0].ptObject->className());
			    }
                          ;
    break;}
case 7:
#line 277 "parser.y"
{;
    break;}
case 8:
#line 279 "parser.y"
{;
    break;}
case 9:
#line 281 "parser.y"
{;
    break;}
case 10:
#line 283 "parser.y"
{;
    break;}
case 11:
#line 285 "parser.y"
{;
    break;}
case 12:
#line 287 "parser.y"
{;
    break;}
case 13:
#line 289 "parser.y"
{;
    break;}
case 14:
#line 291 "parser.y"
{;
    break;}
case 15:
#line 293 "parser.y"
{;
    break;}
case 16:
#line 295 "parser.y"
{;
    break;}
case 17:
#line 297 "parser.y"
{;
    break;}
case 18:
#line 299 "parser.y"
{;
    break;}
case 19:
#line 301 "parser.y"
{;
    break;}
case 20:
#line 303 "parser.y"
{;
    break;}
case 21:
#line 305 "parser.y"
{;
    break;}
case 22:
#line 307 "parser.y"
{;
    break;}
case 23:
#line 309 "parser.y"
{;
    break;}
case 24:
#line 311 "parser.y"
{;
    break;}
case 25:
#line 313 "parser.y"
{;
    break;}
case 26:
#line 315 "parser.y"
{;
    break;}
case 27:
#line 317 "parser.y"
{;
    break;}
case 28:
#line 319 "parser.y"
{;
    break;}
case 29:
#line 321 "parser.y"
{;
    break;}
case 30:
#line 323 "parser.y"
{;
    break;}
case 31:
#line 325 "parser.y"
{;
    break;}
case 32:
#line 327 "parser.y"
{;
    break;}
case 33:
#line 329 "parser.y"
{;
    break;}
case 34:
#line 331 "parser.y"
{;
    break;}
case 35:
#line 333 "parser.y"
{;
    break;}
case 36:
#line 337 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 37:
#line 341 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptLight;
			  ;
    break;}
case 38:
#line 345 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 39:
#line 349 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
			  ;
    break;}
case 40:
#line 353 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 41:
#line 357 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 42:
#line 361 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 43:
#line 365 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 44:
#line 369 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 45:
#line 373 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 46:
#line 377 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 47:
#line 381 "parser.y"
{
			    yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 48:
#line 385 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 49:
#line 389 "parser.y"
{
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 50:
#line 393 "parser.y"
{
                            ((TCsg*) yyvsp[0].ptObject)->setOperation (FX_CSG_UNION);
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 51:
#line 398 "parser.y"
{
                            ((TCsg*) yyvsp[0].ptObject)->setOperation (FX_CSG_INTERSECTION);
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 52:
#line 403 "parser.y"
{
                            ((TCsg*) yyvsp[0].ptObject)->setOperation (FX_CSG_DIFFERENCE);
                            yyval.ptObject = yyvsp[0].ptObject;
                          ;
    break;}
case 53:
#line 410 "parser.y"
{
			    yyval.dValue = yyvsp[0].dValue;
			  ;
    break;}
case 54:
#line 414 "parser.y"
{
                            if ( _tFunctionMap.find (yyvsp[-2].acIdent) == _tFunctionMap.end() )
                            {
			      yyerror ("function does not exist");
			      exit (1);
                            }

			    _pfFunction = _tFunctionMap [yyvsp[-2].acIdent];

			    yyval.dValue = (*_pfFunction)();
			  ;
    break;}
case 55:
#line 426 "parser.y"
{
			    yyval.dValue = yyvsp[-2].dValue + yyvsp[0].dValue;
			  ;
    break;}
case 56:
#line 430 "parser.y"
{
			    yyval.dValue = yyvsp[-2].dValue - yyvsp[0].dValue;
			  ;
    break;}
case 57:
#line 434 "parser.y"
{
			    yyval.dValue = yyvsp[-2].dValue * yyvsp[0].dValue;
			  ;
    break;}
case 58:
#line 438 "parser.y"
{
			    yyval.dValue = yyvsp[-2].dValue / yyvsp[0].dValue;
			  ;
    break;}
case 59:
#line 442 "parser.y"
{
			    yyval.dValue = -yyvsp[0].dValue;
			  ;
    break;}
case 60:
#line 446 "parser.y"
{
			    yyval.dValue = yyvsp[-1].dValue;
			  ;
    break;}
case 61:
#line 451 "parser.y"
{
			    _tColor.setRed (yyvsp[-5].dValue);
			    _tColor.setGreen (yyvsp[-3].dValue);
			    _tColor.setBlue (yyvsp[-1].dValue);
			    yyval.ptColor = (TColor*) &_tColor;
			  ;
    break;}
case 62:
#line 460 "parser.y"
{
			    _tVector.set (yyvsp[-5].dValue, yyvsp[-3].dValue, yyvsp[-1].dValue);
			    yyval.ptVector = &_tVector;
			  ;
    break;}
case 63:
#line 466 "parser.y"
{
			    _tVector2.set (yyvsp[-3].dValue, yyvsp[-1].dValue);
			    yyval.ptVector2 = &_tVector2;
			  ;
    break;}
case 64:
#line 473 "parser.y"
{
			    yyval.ptVector = yyvsp[0].ptVector;
			  ;
    break;}
case 65:
#line 477 "parser.y"
{
			    yyval.ptVector = yyvsp[0].ptVector;
			  ;
    break;}
case 66:
#line 483 "parser.y"
{
			    strcpy (yyval.acIdent, "");
			  ;
    break;}
case 67:
#line 487 "parser.y"
{
			    strcpy (yyval.acIdent, yyvsp[0].acIdent);
			  ;
    break;}
case 68:
#line 493 "parser.y"
{
			    strcpy (yyval.acIdent, "");
			  ;
    break;}
case 69:
#line 497 "parser.y"
{
                            if ( _tObjectMap.find (yyvsp[0].acIdent) == _tObjectMap.end() )
                            {
			      yyerror ("trying to extend from non existing object");
			      exit (1);
                            }
                            _ptParent = _tObjectMap [yyvsp[0].acIdent];
			    strcpy (yyval.acIdent, _ptParent->className().c_str());
			  ;
    break;}
case 70:
#line 507 "parser.y"
{
			    _ptParent = NULL;
			    strcpy (yyval.acIdent, yyvsp[0].acIdent);
			  ;
    break;}
case 73:
#line 518 "parser.y"
{
			    /* Print out an attribute list [names w/types] for
			       the current object */ 
			    TAttributeList   tal;
			  
			    DATA->getAttributeList (tal);
			    
			    cout << "Requested attribute list for \""
				 << DATA->className() << "\"" << endl;
			    
			    for(TAttributeList::const_iterator i = tal.begin();
				i != tal.end();
				++i)
			    {
			      cout << "  ("
				   << EAttribType_to_str (i->second)
				   << ") "
				   << i->first << endl;
			    }
			  ;
    break;}
case 74:
#line 539 "parser.y"
{
			    /* Print out the type of the given attribute */
			    TAttributeList                   tal;
			    TAttributeList::const_iterator   loc;
			    
			    DATA->getAttributeList (tal);
			    
			    loc = tal.find (string(yyvsp[-1].acIdent)); 
			    
			    cout << "Requested attribute type for \"" << yyvsp[-1].acIdent
				 << "\" in \"" << DATA->className() << "\": ";
			    
			    if ( loc != tal.end() )
			    {
			      cout << EAttribType_to_str (loc->second) << endl;
			    }
			    else
			    {
			      cout << "no such attribute" << endl;
			    }
			  ;
    break;}
case 75:
#line 561 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptVector;
			    SetParameter (yyvsp[-1].acIdent, FX_VECTOR);
                          ;
    break;}
case 76:
#line 566 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptVector2;
			    SetParameter (yyvsp[-1].acIdent, FX_VECTOR2);
			  ;
    break;}
case 77:
#line 571 "parser.y"
{
			    _nAttrib.dValue = yyvsp[0].dValue;
			    SetParameter (yyvsp[-1].acIdent, FX_REAL);
			  ;
    break;}
case 78:
#line 576 "parser.y"
{
			    _nAttrib.gValue = yyvsp[0].gValue;
			    SetParameter (yyvsp[-1].acIdent, FX_BOOL);
			  ;
    break;}
case 79:
#line 581 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].acIdent;
			    SetParameter (yyvsp[-1].acIdent, FX_STRING);
			  ;
    break;}
case 80:
#line 586 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptPattern;
			    SetParameter (yyvsp[-1].acIdent, MapClassToAttribute ((TBaseClass*) yyvsp[0].ptPattern));
                          ;
    break;}
case 81:
#line 591 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptPerturbation;
			    SetParameter (yyvsp[-1].acIdent, MapClassToAttribute ((TBaseClass*) yyvsp[0].ptPerturbation));
                          ;
    break;}
case 82:
#line 596 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptColor;
			    SetParameter (yyvsp[-1].acIdent, FX_COLOR);
			  ;
    break;}
case 83:
#line 601 "parser.y"
{
			    UpdateAttribute (yyvsp[-1].acIdent, yyvsp[0].acIdent);
			  ;
    break;}
case 84:
#line 605 "parser.y"
{
			    UpdateAttribute ("color", yyvsp[0].acIdent);
			  ;
    break;}
case 85:
#line 609 "parser.y"
{
			    _nAttrib.dValue = yyvsp[0].dValue;
			    SetParameter ("color", FX_REAL);
			  ;
    break;}
case 86:
#line 614 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptColor;
			    SetParameter ("color", FX_COLOR);
			  ;
    break;}
case 87:
#line 619 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptPattern;
			    SetParameter ("color", FX_PATTERN);
                          ;
    break;}
case 88:
#line 624 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptVector;
			    SetParameter ("vector", FX_VECTOR);
			  ;
    break;}
case 89:
#line 629 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptCamera;
			    SetParameter ("camera", FX_CAMERA);
			  ;
    break;}
case 90:
#line 634 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptRenderer;
			    SetParameter ("renderer", FX_RENDERER);
			  ;
    break;}
case 91:
#line 639 "parser.y"
{
			    _nAttrib.pvValue = yyvsp[0].ptBsdf;
			    SetParameter ("bsdf", FX_BSDF);
			  ;
    break;}
case 94:
#line 650 "parser.y"
{
			    ENTITY->translate (*yyvsp[0].ptVector);
			  ;
    break;}
case 95:
#line 654 "parser.y"
{
			    ENTITY->rotate (*yyvsp[0].ptVector);
			  ;
    break;}
case 96:
#line 658 "parser.y"
{
			    ENTITY->rotate (makeUnitQuaternion (yyvsp[-2].dValue, *yyvsp[0].ptVector));
                          ;
    break;}
case 97:
#line 662 "parser.y"
{
			    ENTITY->translate (*yyvsp[0].ptVector);
			  ;
    break;}
case 98:
#line 666 "parser.y"
{
			    ENTITY->rotate (*yyvsp[0].ptVector);
			  ;
    break;}
case 99:
#line 670 "parser.y"
{
			    ENTITY->rotate (makeUnitQuaternion (yyvsp[-2].dValue, *yyvsp[0].ptVector));
                          ;
    break;}
case 101:
#line 677 "parser.y"
{
			    VOLUME->scale (*yyvsp[0].ptVector, TVector (0, 0, 0));
			  ;
    break;}
case 105:
#line 688 "parser.y"
{
			    OBJECT->setMaterial (yyvsp[0].ptMaterial);
			  ;
    break;}
case 106:
#line 692 "parser.y"
{
			    OBJECT->addFilter (yyvsp[0].ptOFilter);
			  ;
    break;}
case 108:
#line 699 "parser.y"
{
			    DefineColor (yyvsp[-1].acIdent);
			  ;
    break;}
case 109:
#line 703 "parser.y"
{
                            _tColorMap [yyvsp[-5].acIdent] = _tColor;
			    _tTypeMap  [yyvsp[-5].acIdent] = FX_COLOR_CLASS;
                            
                            yyval.ptColor = &_tColor;
			  ;
    break;}
case 112:
#line 733 "parser.y"
{
			    _tColor.setRed (yyvsp[0].dValue);
			  ;
    break;}
case 113:
#line 737 "parser.y"
{
			    _tColor.setGreen (yyvsp[0].dValue);
			  ;
    break;}
case 114:
#line 741 "parser.y"
{
			    _tColor.setBlue (yyvsp[0].dValue);
			  ;
    break;}
case 115:
#line 747 "parser.y"
{
			    DefineVector (yyvsp[-1].acIdent);
			  ;
    break;}
case 116:
#line 751 "parser.y"
{
                            _tVectorMap [yyvsp[-5].acIdent] = _tVector;
			    _tTypeMap   [yyvsp[-5].acIdent] = FX_VECTOR_CLASS;
                            
                            yyval.ptVector = &_tVector;
			  ;
    break;}
case 117:
#line 760 "parser.y"
{
			    yyval.ptVector = InstanceVector (yyvsp[0].acIdent);
			  ;
    break;}
case 118:
#line 764 "parser.y"
{
                            _tVector = TVector (0, 0, 0);
			  ;
    break;}
case 119:
#line 768 "parser.y"
{
			    yyval.ptVector = (TVector*) &_tVector;
			  ;
    break;}
case 122:
#line 778 "parser.y"
{
			    _tVector.setX (yyvsp[0].dValue);
			  ;
    break;}
case 123:
#line 782 "parser.y"
{
			    _tVector.setY (yyvsp[0].dValue);
			  ;
    break;}
case 124:
#line 786 "parser.y"
{
			    _tVector.setZ (yyvsp[0].dValue);
			  ;
    break;}
case 125:
#line 792 "parser.y"
{
                            _tDataStack.push (TImageManager::_getImageIO ("tga"));
                          ;
    break;}
case 126:
#line 796 "parser.y"
{
			    yyval.ptImageIO = (TImageIO*) _tDataStack.POP();
			  ;
    break;}
case 129:
#line 806 "parser.y"
{
                            _ptImageIO = (TImageIO*) _tDataStack.POP();
                            delete _ptImageIO;
                            
                            _ptImageIO = TImageManager::_getImageIO (yyvsp[0].acIdent);
                            if ( !_ptImageIO )
                            {
                              yyerror ("Image output type not available");
                              exit (1);
                            }
                            _tDataStack.push (_ptImageIO);
			  ;
    break;}
case 131:
#line 822 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Scene");
			  ;
    break;}
case 132:
#line 826 "parser.y"
{
			    yyval.ptScene = (TScene*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 133:
#line 832 "parser.y"
{
			    yyval.ptScene = (TScene*) InstanceObject (yyvsp[0].acIdent);
			    TSceneRT::_ptParsedScene = yyval.ptScene;
			  ;
    break;}
case 134:
#line 837 "parser.y"
{
//			    CreateObject ($1, "Scene");
			    _ptData = TSceneRT::_ptParsedScene;
			    _tDataStack.push (_ptData);
			  ;
    break;}
case 135:
#line 843 "parser.y"
{
			    yyval.ptScene = (TScene*) _tDataStack.POP();
//			    $$ = &tScene;
			  ;
    break;}
case 138:
#line 854 "parser.y"
{
			    // This is no longer needed, as there are speial
			    // cases for this in the light_instance rule.
			    if( yyvsp[0].ptLight )
			    {
			      static bool gave_warning = false;

			      if(!gave_warning)
			      {
                                cerr << "Note for light instance on line "
				     << TSceneRT::_dwLineNumber
				     << endl;
				cerr << "  Usage of lights in the 'scene' section is no longer required" << endl;
				cerr << "  They may now be added to aggregates, csg, etc., or used "
				     << endl
				     << "  external to the scene section (same syntax)." 
				     << endl;
				gave_warning = true;
			      }
			      SCENE->addLight (yyvsp[0].ptLight);
			    }
			  ;
    break;}
case 139:
#line 877 "parser.y"
{
			    SCENE->addImageFilter (yyvsp[0].ptIFilter);
			  ;
    break;}
case 140:
#line 881 "parser.y"
{
			    SCENE->setImageOutput (yyvsp[0].ptImageIO);
			  ;
    break;}
case 142:
#line 888 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "PointLight");
			  ;
    break;}
case 143:
#line 892 "parser.y"
{
			    yyval.ptLight = (TLight*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 144:
#line 898 "parser.y"
{
			    yyval.ptLight = (TLight*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 145:
#line 902 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "PointLight");
			  ;
    break;}
case 146:
#line 906 "parser.y"
{
			    yyval.ptLight = (TLight*) _tDataStack.POP();
			    // This one is passed back to the scene instance...
			  ;
    break;}
case 147:
#line 913 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Bsdf");
			  ;
    break;}
case 148:
#line 917 "parser.y"
{
			    yyval.ptBsdf = (TBsdf*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 149:
#line 923 "parser.y"
{
			    yyval.ptBsdf = (TBsdf*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 150:
#line 927 "parser.y"
{
                            CreateObject (yyvsp[0].acIdent, "Bsdf");
			  ;
    break;}
case 151:
#line 931 "parser.y"
{
                            yyval.ptBsdf = (TBsdf*) _tDataStack.POP();
			  ;
    break;}
case 152:
#line 937 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Raytracer");
			  ;
    break;}
case 153:
#line 941 "parser.y"
{
			    yyval.ptRenderer = (TRenderer*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 154:
#line 947 "parser.y"
{
			    yyval.ptRenderer = (TRenderer*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 155:
#line 951 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Raytracer");
			  ;
    break;}
case 156:
#line 955 "parser.y"
{
			    yyval.ptRenderer = (TRenderer*) _tDataStack.POP();
			  ;
    break;}
case 157:
#line 961 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Material");
			  ;
    break;}
case 158:
#line 965 "parser.y"
{
                            yyval.ptMaterial = (TMaterial*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 159:
#line 971 "parser.y"
{
			    yyval.ptMaterial = (TMaterial*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 160:
#line 975 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Material");
			  ;
    break;}
case 161:
#line 979 "parser.y"
{
			    yyval.ptMaterial = (TMaterial*) _tDataStack.POP();
			  ;
    break;}
case 162:
#line 985 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Pattern");
			  ;
    break;}
case 163:
#line 989 "parser.y"
{
                            yyval.ptPattern = (TPattern*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 164:
#line 995 "parser.y"
{
			    yyval.ptPattern = (TPattern*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 165:
#line 999 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Pattern");
			  ;
    break;}
case 166:
#line 1003 "parser.y"
{
			    yyval.ptPattern = (TPattern*) _tDataStack.POP();
			  ;
    break;}
case 167:
#line 1009 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Perturbation");
			  ;
    break;}
case 168:
#line 1013 "parser.y"
{
                            yyval.ptPerturbation = (TPerturbation*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 169:
#line 1019 "parser.y"
{
			    yyval.ptPerturbation = (TPerturbation*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 170:
#line 1023 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Perturbation");
			  ;
    break;}
case 171:
#line 1027 "parser.y"
{
			    yyval.ptPerturbation = (TPerturbation*) _tDataStack.POP();
			  ;
    break;}
case 172:
#line 1033 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "");
			  ;
    break;}
case 173:
#line 1037 "parser.y"
{
			    yyval.ptIFilter = (TImageFilter*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 174:
#line 1043 "parser.y"
{
			    yyval.ptIFilter = (TImageFilter*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 175:
#line 1047 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "");
			  ;
    break;}
case 176:
#line 1051 "parser.y"
{
			    yyval.ptIFilter = (TImageFilter*) _tDataStack.POP();
			  ;
    break;}
case 177:
#line 1057 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "");
			  ;
    break;}
case 178:
#line 1061 "parser.y"
{
			    yyval.ptOFilter = (TObjectFilter*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 179:
#line 1067 "parser.y"
{
			    yyval.ptOFilter = (TObjectFilter*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 180:
#line 1071 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "");
			  ;
    break;}
case 181:
#line 1075 "parser.y"
{
			    yyval.ptOFilter = (TObjectFilter*) _tDataStack.POP();
			  ;
    break;}
case 182:
#line 1081 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "PinholeCamera");
			  ;
    break;}
case 183:
#line 1085 "parser.y"
{
			    yyval.ptCamera = (TCamera*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 184:
#line 1091 "parser.y"
{
			    yyval.ptCamera = (TCamera*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 185:
#line 1095 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "PinholeCamera");
			  ;
    break;}
case 186:
#line 1099 "parser.y"
{
			    yyval.ptCamera = (TCamera*) _tDataStack.POP();
			  ;
    break;}
case 187:
#line 1105 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "");
			  ;
    break;}
case 188:
#line 1109 "parser.y"
{
			    yyval.ptObject = (TObject*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 189:
#line 1115 "parser.y"
{
			    yyval.ptObject = (TObject*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 190:
#line 1119 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "");
			  ;
    break;}
case 191:
#line 1123 "parser.y"
{
			    yyval.ptObject = (TObject*) _tDataStack.POP();
			  ;
    break;}
case 192:
#line 1129 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Plane");
			  ;
    break;}
case 193:
#line 1133 "parser.y"
{
			    yyval.ptObject = (TPlane*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 194:
#line 1139 "parser.y"
{
			    yyval.ptObject = (TPlane*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 195:
#line 1143 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Plane");
			  ;
    break;}
case 196:
#line 1147 "parser.y"
{
			    yyval.ptObject = (TPlane*) _tDataStack.POP();
			  ;
    break;}
case 197:
#line 1153 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Sphere");
			  ;
    break;}
case 198:
#line 1157 "parser.y"
{
			    yyval.ptObject = (TSphere*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 199:
#line 1163 "parser.y"
{
			    yyval.ptObject = (TSphere*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 200:
#line 1167 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Sphere");
			  ;
    break;}
case 201:
#line 1171 "parser.y"
{
			    yyval.ptObject = (TSphere*) _tDataStack.POP();
			  ;
    break;}
case 202:
#line 1177 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Triangle");
			    _bVertices = 0;
			  ;
    break;}
case 203:
#line 1182 "parser.y"
{
			    if ( _bVertices != 3 )
			    {
			      yyerror ("wrong number of vertices in triangle");
			      exit (1);
			    }
			    yyval.ptObject = (TTriangle*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 204:
#line 1193 "parser.y"
{
			    yyval.ptObject = (TTriangle*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 205:
#line 1197 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Triangle");
			    _bVertices = 0;
			  ;
    break;}
case 206:
#line 1202 "parser.y"
{
			    if ( _bVertices != 3 )
			    {
			      yyerror ("wrong number of vertices in triangle");
			      exit (1);
			    }
			    yyval.ptObject = (TTriangle*) _tDataStack.POP();
			  ;
    break;}
case 209:
#line 1217 "parser.y"
{
			    TRIANGLE->setVertex (*yyvsp[0].ptVector);
			    _bVertices++;
			  ;
    break;}
case 211:
#line 1225 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "PhongTriangle");
			    _bVertices = 0;
			  ;
    break;}
case 212:
#line 1230 "parser.y"
{
			    if ( _bVertices != 3 )
			    {
			      yyerror ("wrong number of vertices in phong_triangle");
			      exit (1);
			    }
			    yyval.ptObject = (TPhongTriangle*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 213:
#line 1241 "parser.y"
{
			    yyval.ptObject = (TPhongTriangle*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 214:
#line 1245 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "PhongTriangle");
			    _bVertices = 0;
			  ;
    break;}
case 215:
#line 1250 "parser.y"
{
			    if ( _bVertices != 3 )
			    {
			      yyerror ("wrong number of vertices in phong_triangle");
			      exit (1);
			    }
			    yyval.ptObject = (TPhongTriangle*) _tDataStack.POP();
			  ;
    break;}
case 218:
#line 1265 "parser.y"
{
			    TRIANGLE->setVertex (*yyvsp[0].ptVector);
			    _bVertices++;
			  ;
    break;}
case 220:
#line 1273 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Rectangle");
			    _bVertices = 0;
			  ;
    break;}
case 221:
#line 1278 "parser.y"
{
			    if ( _bVertices != 4 )
			    {
			      yyerror ("wrong number of vertices in rectangle");
			      exit (1);
			    }
			    yyval.ptObject = (TRectangle*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 222:
#line 1289 "parser.y"
{
			    yyval.ptObject = (TRectangle*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 223:
#line 1293 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Rectangle");
			    _bVertices = 0;
			  ;
    break;}
case 224:
#line 1298 "parser.y"
{
			    if ( _bVertices != 4 )
			    {
			      yyerror ("wrong number of vertices in rectangle");
			      exit (1);
			    }
			    yyval.ptObject = (TRectangle*) _tDataStack.POP();
			  ;
    break;}
case 227:
#line 1313 "parser.y"
{
			    RECTANGLE->setVertex (*yyvsp[0].ptVector);
			    _bVertices++;
			  ;
    break;}
case 229:
#line 1321 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Circle");
			  ;
    break;}
case 230:
#line 1325 "parser.y"
{
			    yyval.ptObject = (TCircle*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 231:
#line 1331 "parser.y"
{
			    yyval.ptObject = (TCircle*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 232:
#line 1335 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Circle");
			  ;
    break;}
case 233:
#line 1339 "parser.y"
{
			    yyval.ptObject = (TCircle*) _tDataStack.POP();
			  ;
    break;}
case 236:
#line 1349 "parser.y"
{
			    AGGREGATE->add (yyvsp[0].ptObject);
			  ;
    break;}
case 238:
#line 1356 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Aggregate");
			  ;
    break;}
case 239:
#line 1360 "parser.y"
{
			    yyval.ptObject = (TAggregate*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 240:
#line 1366 "parser.y"
{
			    yyval.ptObject = (TAggregate*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 241:
#line 1370 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Aggregate");
			  ;
    break;}
case 242:
#line 1374 "parser.y"
{
			    yyval.ptObject = (TAggregate*) _tDataStack.POP();
			  ;
    break;}
case 243:
#line 1380 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "AtmConst");
			  ;
    break;}
case 244:
#line 1384 "parser.y"
{
			    yyval.ptAtmObject = (TAtmosphericObject*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 245:
#line 1390 "parser.y"
{
			    yyval.ptAtmObject = (TAtmosphericObject*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 246:
#line 1394 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "AtmConst");
			  ;
    break;}
case 247:
#line 1398 "parser.y"
{
			    yyval.ptAtmObject = (TAtmosphericObject*) _tDataStack.POP();
			  ;
    break;}
case 248:
#line 1404 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Box");
			  ;
    break;}
case 249:
#line 1408 "parser.y"
{
			    yyval.ptObject = (TBox*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 250:
#line 1414 "parser.y"
{
			    yyval.ptObject = (TBox*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 251:
#line 1418 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Box");
			  ;
    break;}
case 252:
#line 1422 "parser.y"
{
			    yyval.ptObject = (TBox*) _tDataStack.POP();
			  ;
    break;}
case 253:
#line 1428 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Cylinder");
			  ;
    break;}
case 254:
#line 1432 "parser.y"
{
			    yyval.ptObject = (TCylinder*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 255:
#line 1438 "parser.y"
{
			    yyval.ptObject = (TCylinder*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 256:
#line 1442 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Cylinder");
			  ;
    break;}
case 257:
#line 1446 "parser.y"
{
			    yyval.ptObject = (TCylinder*) _tDataStack.POP();
			  ;
    break;}
case 258:
#line 1452 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Cone");
			  ;
    break;}
case 259:
#line 1456 "parser.y"
{
			    yyval.ptObject = (TCone*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 260:
#line 1462 "parser.y"
{
			    yyval.ptObject = (TCone*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 261:
#line 1466 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Cone");
			  ;
    break;}
case 262:
#line 1470 "parser.y"
{
			    yyval.ptObject = (TCone*) _tDataStack.POP();
	       		  ;
    break;}
case 263:
#line 1476 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Torus");
			  ;
    break;}
case 264:
#line 1480 "parser.y"
{
			    yyval.ptObject = (TTorus*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 265:
#line 1486 "parser.y"
{
			    yyval.ptObject = (TTorus*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 266:
#line 1490 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Torus");
			  ;
    break;}
case 267:
#line 1494 "parser.y"
{
			    yyval.ptObject = (TTorus*) _tDataStack.POP();
			  ;
    break;}
case 268:
#line 1500 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Mesh");
			  ;
    break;}
case 269:
#line 1504 "parser.y"
{
			    yyval.ptObject = (TMeshObject*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 270:
#line 1510 "parser.y"
{
			    yyval.ptObject = (TMeshObject*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 271:
#line 1514 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Mesh");
			  ;
    break;}
case 272:
#line 1518 "parser.y"
{
			    yyval.ptObject = (TMeshObject*) _tDataStack.POP();
			  ;
    break;}
case 275:
#line 1528 "parser.y"
{
			    MESH->addTriangle ((TTriangle*) yyvsp[0].ptObject);
                            delete yyvsp[0].ptObject;
			  ;
    break;}
case 277:
#line 1536 "parser.y"
{
			    DefineObject (yyvsp[-1].acIdent, yyvsp[0].acIdent, "Csg");
			  ;
    break;}
case 278:
#line 1540 "parser.y"
{
			    yyval.ptObject = (TCsg*) UpdateObject (yyvsp[-5].acIdent);
			  ;
    break;}
case 279:
#line 1546 "parser.y"
{
			    yyval.ptObject = (TCsg*) InstanceObject (yyvsp[0].acIdent);
			  ;
    break;}
case 280:
#line 1550 "parser.y"
{
			    CreateObject (yyvsp[0].acIdent, "Csg");
			  ;
    break;}
case 281:
#line 1554 "parser.y"
{
			    yyval.ptObject = (TCsg*) _tDataStack.POP();
			  ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1613 "parser.y"


void rt_error (const char* pkcTEXT)
{

  cerr << endl << TSceneRT::_tInputFileName << "(" << TSceneRT::_dwLineNumber << ") Error: " << pkcTEXT << endl;

}  /* rt_error() */

void rt_error (const string& rksTEXT)
{

  cerr << endl << TSceneRT::_tInputFileName << "(" << TSceneRT::_dwLineNumber << ") Error: " << rksTEXT << endl;

}  /* rt_error() */


void RT_InitParser (void)
{

  InitObjects();
  InitFunctions();

  _tColorMap.clear();
  _tVectorMap.clear();
  _tTypeMap.clear();  
  while(!_tDataStack.empty()) _tDataStack.pop();

  _ptWorld = new TAggregate();
  
  TSceneRT::_ptParsedScene->setWorld (_ptWorld);
  
}  /* RT_InitParser() */


void RT_CloseParser (void)
{

  _tObjectMap.clear();

}  /* RT_CloseParser() */


void InitFunctions (void)
{
  _tFunctionMap.clear();
  _tFunctionMap ["rand"] = (double(*)(void)) &frand;
}  /* InitFunctions() */


void InitObjects (void)
{
  _tObjectMap.clear();
}  /* InitObjects() */


TProcedural* NewObject (const string& rktCLASS, const TProcedural* pktPARENT)
{

  TProcedural*   ptChild;

  //  cout << "New object : \"" << rktCLASS << "\"" << endl;

  ptChild = (TProcedural*) TClassManager::_newObject (rktCLASS, pktPARENT);
  if ( !ptChild )
  {
    string   tMessage = string ("class ") + rktCLASS + " does not exist";
    yyerror (tMessage.c_str());
    exit (1);
  }

  return ptChild;

}  /* NewObject() */


void* InstanceObject (const string& rktNAME)
{

  void*   pvObject;

  if ( rktNAME == "" )
  {
    yyerror ("instanced object cannot be unnamed");
    exit (1);
  }

  if ( _tObjectMap.find (rktNAME) == _tObjectMap.end() )
  {
    yyerror ("object does not exist");
    exit (1);
  }

  pvObject = _tObjectMap [rktNAME];

  return pvObject;

}  /* InstanceObject() */


void* UpdateObject (const string& rktNAME)
{

  TProcedural*   ptObject;

  // cout << "Updating object : \"" << rktNAME << "\"" << endl;

  ptObject = _tDataStack.POP();

  _tObjectMap [rktNAME] = ptObject;
  _tTypeMap   [rktNAME] = ptObject->classType();

  return ptObject;

}  /* UpdateObject() */


void DefineObject (const string& rktNAME, const string& rktCLASS, const string& rktDEF_CLASS)
{

  // cout << "Defining object : \"" << rktNAME << "\", \"" << rktCLASS << "\", \"" << rktDEF_CLASS << "\"" << endl;

  if ( rktNAME == "" )
  {
    yyerror ("defined object cannot be unnamed");
    exit (1);
  }

  if ( _tTypeMap.find (rktNAME) != _tTypeMap.end() )
  {
    yyerror ("cannot redefine an existing object");
    exit (1);
  }

  if ( ( _tObjectMap.find (rktNAME) != _tObjectMap.end() ) ||
       ( _tTypeMap  .find (rktNAME) != _tTypeMap.  end() ) )
  {
    yyerror ("cannot redefine an existing object");
    exit (1);
  }

  if ( rktCLASS == "" )
  {
    _ptData = NewObject (rktDEF_CLASS, _ptParent);
  }
  else
  {
    _ptData = NewObject (rktCLASS, _ptParent);
  }

  _tDataStack.push (_ptData);
  _ptParent = NULL;

}  /* DefineObject() */


void CreateObject (const string& rktCLASS, const string& rktDEF_CLASS)
{

  // cout << "Creating object : \"" << rktCLASS << "\", \"" << rktDEF_CLASS << "\"" << endl;
  
  if ( rktCLASS == "" )
  {
    _ptData = NewObject (rktDEF_CLASS, _ptParent);
  }
  else
  {
    _ptData = NewObject (rktCLASS, _ptParent);
  }

  _tDataStack.push (_ptData);
  _ptParent = NULL;

}  /* CreateObject() */


void DefineColor (const string& rktNAME)
{

  if ( rktNAME == "" )
  {
    yyerror ("cannot define unnamed color");
    exit (1);
  }

  if ( _tColorMap.find (rktNAME) != _tColorMap.end() )
  {
    yyerror ("cannot redefine an existing color");
    exit (1);
  }

  if ( _tTypeMap.find (rktNAME) != _tTypeMap.end() )
  {
    yyerror ("cannot redefine an existing object");
    exit (1);
  }

  _tColor = TColor::_black();
  
  _ptParent = NULL;

}  /* DefineColor() */


TColor* InstanceColor (const string& rktNAME)
{

  TColor*   ptColor;

  if ( rktNAME == "" )
  {
    yyerror ("instanced object cannot be unnamed");
    exit (1);
  }
  
  if ( _tColorMap.find (rktNAME) == _tColorMap.end() )
  {
    yyerror ("pattern/color does not exist");
    exit (1);
  }
  
  ptColor = (TColor*) &(_tColorMap [rktNAME]);
  
  return ptColor;

}  /* InstanceColor() */


void DefineVector (const string& rktNAME)
{

  if ( rktNAME == "" )
  {
    yyerror ("cannot define unnamed vector");
    exit (1);
  }
  
  if ( _tVectorMap.find (rktNAME) != _tVectorMap.end() )
  {
    yyerror ("cannot redefine an existing vector");
    exit (1);
  }

  if ( _tTypeMap.find (rktNAME) != _tTypeMap.end() )
  {
    yyerror ("cannot redefine an existing object");
    exit (1);
  }
  
  _tVector = TVector (0, 0, 0);
  
  _ptParent = NULL;

}  /* DefineVector() */


TVector* InstanceVector (const string& rktNAME)
{

  TVector*   ptVector;

  if ( rktNAME == "" )
  {
    yyerror ("instanced object cannot be unnamed");
    exit (1);
  }
  
  if ( _tVectorMap.find (rktNAME) == _tVectorMap.end() )
  {
    yyerror ("vector does not exist");
    exit (1);
  }
  
  ptVector = (TVector*) &(_tVectorMap [rktNAME]);
  
  return ptVector;

}  /* InstanceVector() */


EAttribType MapClassToAttribute (const TBaseClass* pktClass)
{

  EClass   eIdentifierClass = pktClass->classType();

  switch (eIdentifierClass) 
  {
    case FX_PATTERN_CLASS:
      return FX_PATTERN;

    case FX_PERTURBATION_CLASS:
      return FX_PERTURBATION;

    default:
      return FX_NONE;
  }

}  /* MapClassToAttribute() */


void UpdateAttribute (const string& rktATTRIBUTE, const string& rktIDENT)
{

  EClass        eIdentifierClass = _tTypeMap [rktIDENT];
  EAttribType   eAttribute;
  void*         vpInstance;
  
  switch (eIdentifierClass) 
  {
    case FX_COLOR_CLASS:
      vpInstance = InstanceColor (rktIDENT);
      eAttribute = FX_COLOR;
      break;

    case FX_VECTOR_CLASS:
      vpInstance = InstanceVector (rktIDENT);
      eAttribute = FX_VECTOR;
      break;
      
    case FX_BSDF_CLASS:
      vpInstance = InstanceObject (rktIDENT);
      eAttribute = FX_BSDF;
      break;

    case FX_PATTERN_CLASS:
      vpInstance = InstanceObject (rktIDENT);
      eAttribute = FX_PATTERN;
      break;

    case FX_PERTURBATION_CLASS:
      vpInstance = InstanceObject (rktIDENT);
      eAttribute = FX_PERTURBATION;
      break;

    default:
      vpInstance = NULL;
      eAttribute = FX_NONE;

      cerr << "Warning: identifier class not recognized." << endl;
  }
  
  _nAttrib.pvValue = vpInstance;
  SetParameter (rktATTRIBUTE, eAttribute);
  
}  /* UpdateAttribute() */


void SetParameter (const string& rktATTRIB, EAttribType eTYPE)
{

  int   iResult;

  iResult = DATA->setAttribute (rktATTRIB, _nAttrib, eTYPE);

  if ( iResult == FX_ATTRIB_WRONG_PARAM )
  {
    yyerror ("object does not have such attribute");
    exit (1);
  }
  else if ( iResult == FX_ATTRIB_WRONG_TYPE )
  {
    yyerror ("incorrect type in attribute value");
    exit (1);
  }
  else if ( iResult == FX_ATTRIB_WRONG_VALUE )
  {
    yyerror ("value not accepted for this attribute");
    exit (1);
  }
  else if ( iResult == FX_ATTRIB_USER_ERROR )
  {
    yyerror (TProcedural::_tUserErrorMessage.c_str());
    exit (1);
  }

}  /* SetParameter() */


string EAttribType_to_str (EAttribType eTYPE)
{

  /* This function is pretty dumb, but I (KH) couldn't find another one
     anywhere else.  Added on 07Aug2000  */ 

  switch ( eTYPE )
  {
    case FX_NONE: 
      return "none";

    case FX_REAL: 
      return "real";

    case FX_BOOL: 
      return "bool";

    case FX_STRING: 
      return "string";

    case FX_COLOR: 
      return "color";

    case FX_VECTOR: 
      return "vector";

    case FX_VECTOR2: 
      return "2d_vector";

    case FX_IMAGE: 
      return "image";

    case FX_BSDF: 
      return "bsdf";

    case FX_CAMERA: 
      return "camera";

    case FX_LIGHT: 
      return "light";

    case FX_MATERIAL: 
      return "material";

    case FX_PATTERN: 
      return "pattern";

    case FX_PERTURBATION: 
      return "perturbation";

    case FX_RENDERER: 
      return "renderer";

    case FX_OBJECT: 
      return "object";

    case FX_OBJECT_FILTER: 
      return "object_filter";

    case FX_IMAGE_FILTER: 
      return "image_filter";

    default: 
      return "unknown";
  }

}  /* EAttribType_to_str() */
