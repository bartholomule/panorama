/*
*  Halo lights test
*/

#include "materials.inc"
#include "shapes.inc"

define MMarble material
{
  bsdf = class BsdfPhong
  {
    exponent = 30;
  };
  ambient  = 0.1;
  diffuse  = 0.6; //0.6
  specular = 0.2; //0.2
};

define pat_brick class PatternBrick
{
  height = 0.75;
  width  = 0.75;
  mortar = 0.50; // 1.0
};

define MBrick material
{
  bsdf = class BsdfPhong
  {
    exponent = 30;
  };
  color      = pat_brick;
  ambient    = 0.1;
  diffuse    = 0.2;
  specular   = 0.6;
  perturb_func = class PerturbationBrick
  {
    brick_pattern = pat_brick;
    bump          = 1.0;
  };
};

define c class PinholeCamera
{
  translate ( <300, 0, 600> ); //<400, 0, 600> //<300, 40, 600>
  look_at   = <0, 0, 0>;
};

define l1 Light
{
  color = { red 0.5 green 0.5 blue 1.0 };
  intensity = 0.1;
  translate( < 500, 100, 0 > );
};

define l Light
{
  color      = { red 1 green 1 blue 0.8 };
  intensity  = 0.07; // 0.1
};

define star Light
{
  color       = { red 0.8 green 0.8 blue 1 };
  intensity   = 0.07; // 0.1
  halo        = 0.4;
  shadow      = off;
  distance_th = 100;
};

define CMySea { red 0 green 0.15 blue 0.30 };

define pat_brick1 pat_brick
{
  color      = { red 0.5 green 0.5 blue 0.5 };
  base_color = { red 0.5 green 0.5 blue 0.5 };
  zoom       = < 40, 40, 40 >; // was 20
};

define Wall box // Wall
{
  point1 = <-300,-150,-1000>;
  point2 = <-310, 100, 600>;
  //translate <0, -50, 0>
  material = MBrick
  {
    color = pat_brick1;
    
    perturb_func = class PerturbationBrick 
    {
      brick_pattern = pat_brick1;
      bump          = 1.0;
    };
  };
};

addObject(Wall);

define Walkway box // Walkway
{
  point1 = <-300,-150,-1100>;
  point2 = < -50, -50, 600>;
  material = MMarble
  {
    color = class PatternMarble
    {
      color = CWhite;
      base_color = { red 0.5 green 0.5 blue 0.5 };
      zoom = < 10, 10, 10 >;
    };
  };
};

addObject(Walkway);

define TopOfWall box // Top of wall
{
  point1 = <-290, 100,-1100>;
  point2 = <-320, 110, 600>;
  material = MMarble
  {
    color = class PatternMarble
    {
      color = CWhite;
      base_color = { red 0.5 green 0.5 blue 0.5 };
      zoom = < 10, 10, 10 >;
    };
  };
};

addObject(TopOfWall);

define pat_water class PatternNoise
{
  print("right below here");
  color       = CMySea;
  print("in the middle");
  base_color  = CMySea;
  print("right above here!");
  zoom        = <5, 5, 5>;
};

define Water plane // the water
{
  translate ( <0, -75, 0> );
  normal    = <0, 1, 0>;
  material  = MNoise
  {
    color   = pat_water;
    
    perturb_func = class PerturbationNoise
    {
      noise_pattern = pat_water;
      bump          = 0.1;
    };
    ambient  = 0.1;
    diffuse  = 0.4;
    specular = 0.6;
  };
};

addObject(Water);

define cy cylinder
{
  scale ( <3, 250, 3> );
  material = MMirror
  {
    color = CBlack;
  };
};

addObject(cy { translate( < -60, -150,  200> ); });
addObject(cy { translate( < -60, -150,    0> ); });
addObject(cy { translate( < -60, -150, -200> ); });
addObject(cy { translate( < -60, -150, -400> ); });
addObject(cy { translate( < -60, -150, -600> ); });
addObject(cy { translate( < -60, -150, -800> ); });
addObject(cy { translate( < -60, -150,-1000> ); });
addObject(cy { translate( <-260, -150,-1000> ); });

scene
{
  camera = c;
  light = l1;
  light = l
  {
    translate ( <-60, 100, 200> );
    halo   =    3.0;
  };
  light = l
  {
    translate ( <-60, 100, 0> );
    halo   =    2.55;
  };
  light = l
  {
    translate ( <-60, 100, -200> );
    halo   =    2.16;
  };
  light = l
  {
    translate ( <-60, 100, -400> );
    halo   =    1.84;
  };
  light = l
  {
    translate ( <-60, 100, -600> );
    halo   =    1.566;
  };
  light = l
  {
    translate ( <-60, 100, -800> );
    halo   =    1.33;
  };
  light = l
  {
    translate ( <-60, 100, -1000> );
    halo   =    1.25;
  };
  light = l
  {
    translate ( <-260, 100, -1000> );
    halo   =    1.25;
  };
  light = star
  {
    translate ( <-3000 + rand() * 4000, 500 + rand() * 1000, -3000> );
  };
  light = star
  {
    translate ( <-3000 + rand() * 4000, 500 + rand() * 1000, -3000> );
  };
  light = star
  {
    translate ( <-3000 + rand() * 4000, 500 + rand() * 1000, -3000> );
  };
  light = star
  {
    translate ( <-3000 + rand() * 4000, 500 + rand() * 1000, -3000> );
  };
  light = star
  {
    translate ( <-3000 + rand() * 4000, 500 + rand() * 1000, -3000> );
  };
  light = star
  {
    translate ( <-3000 + rand() * 4000, 500 + rand() * 1000, -3000> );
  };
  light = star
  {
    translate ( <-3000 + rand() * 4000, 500 + rand() * 1000, -3000> );
  };
  light = star
  {
    translate ( <-3000 + rand() * 4000, 500 + rand() * 1000, -3000> );
  };
  light = star
  {
    translate ( <-3000 + rand() * 4000, 500 + rand() * 1000, -3000> );
  };
  light = star
  {
    translate ( <-3000 + rand() * 4000, 500 + rand() * 1000, -3000> );
  };
  light = star
  {
    translate ( <-3000 + rand() * 4000, 500 + rand() * 1000, -3000> );
  };
  light = star
  {
    translate ( <-3000 + rand() * 4000, 500 + rand() * 1000, -3000> );
  };
  light = star
  {
    translate ( <-3000 + rand() * 4000, 500 + rand() * 1000, -3000> );
  };
  light = star
  {
    translate ( <-3000 + rand() * 4000, 500 + rand() * 1000, -3000> );
  };
  light = star
  {
    translate ( <-3000 + rand() * 4000, 500 + rand() * 1000, -3000> );
  };
  light = star
  {
    translate ( <-3000 + rand() * 4000, 500 + rand() * 1000, -3000> );
  };
  width	      = 400;
  height      = 400;
  background  = CBlack;
  output      = class png
  {
    name = "night.png";
  };
  renderer = class Raytracer
  {
//    sampling    "adaptive"
  };
};

// halt();