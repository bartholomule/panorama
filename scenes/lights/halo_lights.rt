/*
*  Halo lights test
*/

#include "materials.inc"

define camera c
{
  translate	<0, 0, 600>
  look_at	<0, 0, 0>
}

define light l
{
}

define material WallMaterial : extends MLambertian
{
}

// Floor
plane
{
  normal	<0, 1, 0>
  translate	<0, -150, 0>
  material : extends WallMaterial
  {
    color	CWhite
  }
}

// Ceiling
plane
{
  normal	<0, -1, 0>
  translate	<0, 150, 0>
  material : extends WallMaterial
  {
    color	CWhite
  }
}

// Left wall
plane
{
  normal	<1, 0, 0>
  translate	<-200, 0, 0>
  material : extends WallMaterial
  {
    color	CRed
  }
}

// Right wall
plane
{
  normal	<-1, 0, 0>
  translate	<200, 0, 0>
  material : extends WallMaterial
  {
    color	CBlue
  }
}

// Front wall
plane
{
  normal	<0, 0, 1>
  translate	<0, 0, -200>
  material : extends WallMaterial
  {
    color	CWhite
  }
}

// Back wall
plane
{
  normal	<0, 0, -1>
  translate	<0, 0, 200>
  one_sided     on
  material : extends WallMaterial
  {
    color	CWhite
  }
}

sphere
{
  translate	<-50, -80, 100>
  radius	60
  material : extends MCrystal
  {
    color	CWhite
  }
}

sphere
{
  translate	<80, -90, 0>
  radius	60
  material : extends MPlastic
  {
    color	CWhite
  }
}

scene
{
  camera	c
  light : extends l
  {
    translate   <-100 + rand() * 200, -100 + rand() * 200, -100 + rand() * 200>
    color       { red rand() * .3 green rand() * .3 blue rand() * .3 }
    halo        rand() * 5
  }
  light : extends l
  {
    translate   <-100 + rand() * 200, -100 + rand() * 200, -100 + rand() * 200>
    color       { red rand() * .3 green rand() * .3 blue rand() * .3 }
    halo        rand() * 5
  }
  light : extends l
  {
    translate   <-100 + rand() * 200, -100 + rand() * 200, -100 + rand() * 200>
    color       { red rand() * .3 green rand() * .3 blue rand() * .3 }
    halo        rand() * 5
  }
  light : extends l
  {
    translate   <-100 + rand() * 200, -100 + rand() * 200, -100 + rand() * 200>
    color       { red rand() * .3 green rand() * .3 blue rand() * .3 }
    halo        rand() * 5
  }
  light : extends l
  {
    translate   <-100 + rand() * 200, -100 + rand() * 200, -100 + rand() * 200>
    color       { red rand() * .3 green rand() * .3 blue rand() * .3 }
    halo        rand() * 5
  }
  light : extends l
  {
    translate   <-100 + rand() * 200, -100 + rand() * 200, -100 + rand() * 200>
    color       { red rand() * .3 green rand() * .3 blue rand() * .3 }
    halo        rand() * 5
  }
  light : extends l
  {
    translate   <-100 + rand() * 200, -100 + rand() * 200, -100 + rand() * 200>
    color       { red rand() * .3 green rand() * .3 blue rand() * .3 }
    halo        rand() * 5
  }
  light : extends l
  {
    translate   <-100 + rand() * 200, -100 + rand() * 200, -100 + rand() * 200>
    color       { red rand() * .3 green rand() * .3 blue rand() * .3 }
    halo        rand() * 5
  }
  width		400
  height	400
  background    CBlack
  output
  {
    type        "png"
    name	"halo_lights.png"
  }
  renderer : class Raytracer
  {
//    sampling    "adaptive"
  }
}
