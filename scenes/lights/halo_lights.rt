/*
*  Halo lights test
*/

#include "materials.inc"
#include "cameras.inc"

define c Camera
{
  translate(<0, 0, 600>);
  look_at = <0, 0, 0>;
};

define l class PointLight
{
};

define WallMaterial MLambertian
{
};

// Floor
class Plane
{
  normal   = <0, 1, 0>;
  translate( <0, -150, 0> );
  material = WallMaterial
  {
    color = CWhite;
  };
};

// Ceiling
class Plane
{
  normal = <0, -1, 0>;
  translate( <0, 150, 0> );
  material = WallMaterial
  {
    color = CWhite;
  };
};

// Left wall
class Plane
{
  normal = <1, 0, 0>;
  translate( <-200, 0, 0> );
  material = WallMaterial
  {
    color = CRed;
  };
};

// Right wall
class Plane
{
  normal = <-1, 0, 0>;
  translate( <200, 0, 0> );
  material = WallMaterial
  {
    color = CBlue;
  };
};

// Front wall
class Plane
{
  normal = <0, 0, 1>;
  translate( <0, 0, -200> );
  material = WallMaterial
  {
    color = CWhite;
  };
};

// Back wall
class Plane
{
  normal = <0, 0, -1>;
  translate( <0, 0, 200> );
  one_sided = on;
  material = WallMaterial
  {
    color = CWhite;
  };
};

class Sphere
{
  translate( <-50, -80, 100> );
  radius = 60;
  material = MCrystal
  {
    color = CWhite;
  };
};

class Sphere
{
  translate( <80, -90, 0> );
  radius = 60;
  material = MPlastic
  {
    color = CWhite;
  };
};

class Scene
{
  camera = c;
  light = l
  {
    translate( <-100 + rand() * 200, -100 + rand() * 200, -100 + rand() * 200> );
    color = < rand() * .3, rand() * .3, rand() * .3 >;
    halo = rand() * 5;
  };
  light = l
  {
    translate( <-100 + rand() * 200, -100 + rand() * 200, -100 + rand() * 200> );
    color = < rand() * .3, rand() * .3, rand() * .3 >;
    halo = rand() * 5;
  };
  light = l
  {
    translate( <-100 + rand() * 200, -100 + rand() * 200, -100 + rand() * 200> );
    color = < rand() * .3, rand() * .3, rand() * .3 >;
    halo = rand() * 5;
  };
  light = l
  {
    translate( <-100 + rand() * 200, -100 + rand() * 200, -100 + rand() * 200> );
    color = < rand() * .3, rand() * .3, rand() * .3 >;
    halo = rand() * 5;
  };
  light = l
  {
    translate( <-100 + rand() * 200, -100 + rand() * 200, -100 + rand() * 200> );
    color = < rand() * .3, rand() * .3, rand() * .3 >;
    halo = rand() * 5;
  };
  light = l
  {
    translate( <-100 + rand() * 200, -100 + rand() * 200, -100 + rand() * 200> );
    color = < rand() * .3, rand() * .3, rand() * .3 >;
    halo = rand() * 5;
  };
  light = l
  {
    translate( <-100 + rand() * 200, -100 + rand() * 200, -100 + rand() * 200> );
    color = < rand() * .3, rand() * .3, rand() * .3 >;
    halo = rand() * 5;
  };
  light = l
  {
    translate( <-100 + rand() * 200, -100 + rand() * 200, -100 + rand() * 200> );
    color = < rand() * .3, rand() * .3, rand() * .3 >;
    halo = rand() * 5;
  };
  width		= 200;
  height	= 200;
  background    = CBlack;
  output = class png
  {
    name = "halo_lights.png";
  };
  renderer = class Raytracer
  {
//    sampling    "adaptive"
  };
};
